statements

statements := statement statements
statements __EPSILON__

statement := print-statement
statement := block-statement
statement := return-statement
statement := expression-statement
statement := function-definition
statement := decl-statement
statement := if-else-statement

if-else-statement := if-clause
if-else-statement := if-clause else-clause
if-else-statement := if-clause elif-clauses else-clause

if-clause := if ( expr ) statement
elif-clauses := elif-clause
elif-clauses := elif-clause elif-clauses
elif-clause := elif ( expr ) statement
else-clause := else statement

expression-statement := expr ;
return-statement := return expr ;
block-statement := { statements }

print-statement := print expr ;
print-statement := println expr ;
print-statement := print STRING-LITERAL ;
print-statement := println STRING-LITERAL ;

decl-statement := type IDENTIFIER = assignment-expr ;

expr := assignment-expr

assignment-op := =
assignment-op := +=
assignment-op := -=
assignment-op := *=
assignment-op := /=
assignment-op := %=
assignment-expr := compare-expr
assignment-expr := IDENTIFIER assignment-op assignment-expr

compare-op := <=
compare-op := <
compare-op := >=
compare-op := >
compare-op := ==
compare-op := !=
compare-expr := add-expr
compare-expr := compare-expr compare-op add-expr

add-op := +
add-op := -
add-expr := mult-expr
add-expr := add-expr add-op mult-expr

mult-op := *
mult-op := /
mult-op := %
mult-expr := primary-expr
mult-expr := mult-expr mult-op primary-expr

primary-expr := INT-LITERAL
primary-expr := FLOAT-LITERAL
primary-expr := IDENTIFIER
primary-expr := ( expr )
primary-expr := call-expr
primary-expr := input-expr

input-expr := input type

call-expr := IDENTIFIER ( )
call-expr := IDENTIFIER ( call-arguments )
call-arguments := call-argument
call-arguments := call-argument , call-arguments
call-arguments := call-argument
call-argument := expr

function-definition := func IDENTIFIER parameter-list -> return type expr ;
function-definition := func IDENTIFIER parameter-list -> type block-statement
parameter-list := ( )
parameter-list := ( parameters )
parameters := parameter
parameters := parameter , parameters
parameter := type IDENTIFIER
parameter := ref type IDENTIFIER
parameter := mut type IDENTIFIER

type := void
type := int
type := float