statements

statements := statement statements
statements __EPSILON__

statement := print-statement
statement := block-statement
statement := return-statement
statement := expression-statement
statement := function-definition

expression-statement := expr ;
return-statement := return expr ;
block-statement := { statements }

print-statement := print expr ;
print-statement := println expr ;
print-statement := print STRING-LITERAL ;
print-statement := println STRING-LITERAL;

expr := assignment-expr

assignment-op := =
assignment-op := +=
assignment-op := -=
assignment-op := *=
assignment-op := /=
assignment-op := %=
assignment-expr := add-expr
assignment-expr := IDENTIFIER assignment-op assignment-expr

add-op := +
add-op := -
add-expr := mult-expr
add-expr := add-expr add-op mult-expr

mult-op := *
mult-op := /
mult-op := %
mult-expr := primary-expr
mult-expr := mult-expr mult-op primary-expr

primary-expr := INT-LITERAL
primary-expr := FLOAT-LITERAL
primary-expr := IDENTIFIER
primary-expr := ( expr )
primary-expr := call-expr

call-expr := IDENTIFIER ( )
call-expr := IDENTIFIER ( call-arguments )
call-arguments := expr
call-arguments := expr , call-arguments

function-definition := func IDENTIFIER parameter-list -> statement
parameter-list := ( )
parameter-list := ( parameters )
parameters := parameter
parameters := parameter , parameters
parameter := type IDENTIFIER

type := IDENTIFIER