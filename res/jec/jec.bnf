program

// Basic program structure; DEPENDS ON: main-block, declarations
program := declarations main-block

// Declarations; DEPENDS ON: parameter-list, optional-parameter-list,
//                           type, block-statement, variable-declaration
//               TOKENS: def struct identifier { } func ( ) -> global
declarations __EPSILON__
__CHAIN__ declarations := declarations declaration
declaration := struct-declaration
declaration := function-declaration
declaration := global-declaration
struct-declaration := def struct identifier { parameter-list }
function-declaration := def func identifier ( optional-parameter-list ) -> type block-statement
global-declaration := global variable-declaration

// Blocks; DEPENDS ON: block-body
//         TOKENS: main 
main-block := main block-body

// Statements; DEPENDS ON: variable-declaration, expression-statement,
//                                     conditional-statement, loop-statement,
//                                     exit-statement, return-statement
statements __EPSILON__
__CHAIN__ statements := statements statement
statement := block-statement
statement := expression-statement
statement := variable-declaration
statement := conditional-statement
statement := loop-statement
statement := exit-statement
statement := return-statement
statement := dealloc-statement

// Block statement; DEPENDS ON: statements
//                  TOKENS: { }
block-statement := { statements }

// Expression statement; DEPENDS ON: expression
//                       TOKENS: ;
expression-statement := expression ;

// Variable declaration statement; DEPENDS ON: type, expression
//                                 TOKENS: =
variable-declaration := simple-variable-declaration ;
variable-declaration := compound-variable-declaration ;
simple-variable-declaration := type identifier
compound-variable-declaration := simple-variable-declaration = expression

// Parameter-list
parameter-list := variable-declaration
__CHAIN__ parameter-list := parameter-list , variable-declaration
optional-parameter-list __EPSILON__
optional-parameter-list := parameter-list

// Conditional-statement; DEPENDS ON: expression, statement
conditional-statement := if-statement
conditional-statement := if-else-statement
if-statement := if ( expression ) statement
if-else-statement := if-statement else statement

// Loop statement; DEPENDS ON: expression, statement
loop-statement := while-loop
loop-statement := while-else-loop
while-loop := while ( expression ) statement
while-else-loop := while-loop else statement

// Exit-statement; DEPENDS ON:
exit-statement := exit-instructions ;
exit-instructions := exit-instruction
__CHAIN__ exit-instructions := exit-instructions exit-instruction
exit-instruction := break
exit-instruction := continue

// Return-statement; DEPENDS ON: expression
return-statement := return expression ;

// Types; DEPENDS ON:
simple-type := int
simple-type := float
simple-type := bool
simple-type := char
simple-type := struct identifier
type := simple-type
type := @ type

// Expressions -- Resolve precedence later with shunting yard algorithm
// DEPENDS ON: type
expression := prefix-expression
__CHAIN__ expression := expression binary-operator prefix-expression
// Prefix expressions, including expressions that act like prefix expressions
prefix-expression := postfix-expression
prefix-expression := prefix-operator prefix-expression
prefix-expression := struct-initializer
prefix-expression := single-allocation-expression
prefix-expression := array-allocation-expression
single-allocation-expression := alloc struct-initializer
array-allocation-expression := alloc [ int-literal ] type
prefix-expression := sizeof-expression
prefix-expression := sizeof type
// Postfix expressions, including expressions that act like postfix expressions
postfix-expression := primary-expression
postfix-expression := primary-expression postfix-operator
// Primary expressions
primary-expression := ( expression )
primary-expression := int-literal
primary-expression := float-literal
primary-expression := char-literal
primary-expression := bool-literal
primary-expression := string-literal

// Struct initializer
struct-initializer := struct identifier { optional-struct-members }
optional-struct-members __EPSILON__
optional-struct-members := struct-members
struct-members := struct-member
__CHAIN__ struct-members := struct-members , struct-member
struct-member := identifier = expression

// Binary operators; DEPENDS ON
binary-operator := simple-binary-operator
binary-operator := assignment-binary-operator
binary-operator := relational-operator
simple-binary-operator := +
simple-binary-operator := -
simple-binary-operator := /
simple-binary-operator := *
simple-binary-operator := %
simple-binary-operator := ||
simple-binary-operator := &&
simple-binary-operator := |
simple-binary-operator := &
simple-binary-operator := ^
simple-binary-operator := >>
simple-binary-operator := <<
assignment-binary-operator := simple-binary-operator =
relational-operator := >
relational-operator := <
relational-operator := >=
relational-operator := <=
relational-operator := !=
relational-operator := ==

// Prefix operators; DEPENDS ON
// Note that # is the dereference operator
prefix-operator := -
prefix-operator := ~
prefix-operator := !
prefix-operator := #


postfix-operator := ( optional-argument-list )
postfix-operator := [ expression ]
postfix-operator := as type