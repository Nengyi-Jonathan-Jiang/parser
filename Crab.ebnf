statements
statements __EPSILON__
statements := statement_list

statement_list := statement
statement_list := statement_list statement

statement := expression ;
statement := block_statements
statement := variable_decls
statement := function_decl
statement := output_statement
statement := input_statement
statement := while_loop
statement := do_while_loop
statement := for_loop
statement := if_statement
statement := else_statement
statement := test_statement
statement := switch_statement
statement := jump_statement

primary_expression := ( expression )

primary_expression := HEX_CONST
primary_expression := OCTAL_CONST
primary_expression := BINARY_CONST
primary_expression := NUMBER_CONST

primary_expression := CHAR_CONST
primary_expression := STRING_CONST

primary_expression := IDENTIFIER

postfix_expression := primary_expression
postfix_expression := postfix_expression [ expression ]
postfix_expression := function_call
postfix_expression := postfix_expression . IDENTIFIER
postfix_expression := postfix_expression -> IDENTIFIER
postfix_expression := postfix_expression ++
postfix_expression := postfix_expression --

unary_expression := postfix_expression
unary_expression := unary_operator unary_expression

unary_operator := -
unary_operator := !
unary_operator := ~
unary_operator := *
unary_operator := &
unary_operator := ++
unary_operator := --

multiplicative_expression := unary_expression
multiplicative_expression := multiplicative_expression * unary_expression
multiplicative_expression := multiplicative_expression / unary_expression
multiplicative_expression := multiplicative_expression % unary_expression

additive_expression := multiplicative_expression
additive_expression := additive_expression + multiplicative_expression
additive_expression := additive_expression - multiplicative_expression

shift_expression := additive_expression
shift_expression := shift_expression << additive_expression
shift_expression := shift_expression >> additive_expression

relational_expression := shift_expression
relational_expression := relational_expression < shift_expression
relational_expression := relational_expression > shift_expression
relational_expression := relational_expression <= shift_expression
relational_expression := relational_expression >= shift_expression

equality_expression := relational_expression
equality_expression := equality_expression == relational_expression
equality_expression := equality_expression != relational_expression

binary_and_expression := equality_expression
binary_and_expression := binary_and_expression & equality_expression

binary_xor_expression := binary_and_expression
binary_xor_expression := binary_xor_expression ^ binary_and_expression
binary_or_expression := binary_xor_expression
binary_or_expression := binary_or_expression | binary_xor_expression

logical_and_expression := binary_or_expression
logical_and_expression := logical_and_expression && binary_or_expression

logical_xor_expression := logical_and_expression
logical_xor_expression := logical_xor_expression ^^ logical_and_expression

logical_or_expression := logical_xor_expression
logical_or_expression := logical_or_expression || logical_xor_expression

conditional_expression := logical_or_expression
conditional_expression := logical_or_expression ? expression : assignment_expression

assignment_expression := conditional_expression
assignment_expression := unary_expression assignment_operator assignment_expression

assignment_operator := =
assignment_operator := *=
assignment_operator := /=
assignment_operator := %=
assignment_operator := +=
assignment_operator := -=
assignment_operator := <<=
assignment_operator := >>=
assignment_operator := &=
assignment_operator := ^=
assignment_operator := |=

expression := assignment_expression
expression := expression , assignment_expression

type := IDENTIFIER
type := IDENTIFIER :: type
type := type *
type := type &
type := type < template_params >

template_param := expression
template_param := type

template_params := template_param
template_params := template_params , template_param

variable_decls := type VAR variable_inits ;
variable_inits := variable_name_and_assign
variable_inits := variable_inits , variable_name_and_assign

variable_name_and_assign := IDENTIFIER
variable_name_and_assign := IDENTIFIER = expression

function_decl := type FUNC IDENTIFIER ( ) block_statements
function_decl := type FUNC IDENTIFIER ( func_args ) block_statements

func_args := single_variable_decl
func_args := func_args , single_variable_decl

do_while_loop := DO block_statements WHILE ( expression ) ;
while_loop := WHILE ( expression ) statement
for_loop := for ( variable_decls ; expression ; expression ) statement
if_statement := IF ( expression ) statement
else_statement := ELSE statement

test_case_statement := CASE ( expression ) statement
test_case_statement := DEFAULT statement
test_case_statements __EPSILON__
test_case_statements := test_case_statements test_case_statement

test_statement := TEST ( expression ) { test_case_statements }

switch_case_statement := CASE expression : statements
switch_case_statements __EPSILON__
switch_case_statements := switch_case_statements switch_case_statement

switch_statement := SWITCH ( expression ) { switch_case_statements }

block_statements := { statements }

output_statement := OUTPUT expression ;
input_statement := INPUT expression ;
jump_statement := CONTINUE ;
jump_statement := BREAK ;
jump_statement := RETURN ;
jump_statement := RETURN expression ;
jump_statement := GOTO IDENTIFIER ;