1005
a Ω r 0 statements 
a statements s 1
a statement_list s 2
a statement s 3
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statements 1
g statement_list 2
g statement 3
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a Ω a 
s
a Ω r 1 statements statement_list
a statement s 98
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 98
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a Ω r 1 statement_list statement
a ( r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a function_call r 1 statement_list statement
a ++ r 1 statement_list statement
a -- r 1 statement_list statement
a - r 1 statement_list statement
a ! r 1 statement_list statement
a ~ r 1 statement_list statement
a * r 1 statement_list statement
a & r 1 statement_list statement
a DO r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a IF r 1 statement_list statement
a ELSE r 1 statement_list statement
a TEST r 1 statement_list statement
a { r 1 statement_list statement
a SWITCH r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a INPUT r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a BREAK r 1 statement_list statement
a RETURN r 1 statement_list statement
a GOTO r 1 statement_list statement
s
a ; s 149
a , s 150
s
a Ω r 1 statement block_statements
a ( r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a function_call r 1 statement block_statements
a ++ r 1 statement block_statements
a -- r 1 statement block_statements
a - r 1 statement block_statements
a ! r 1 statement block_statements
a ~ r 1 statement block_statements
a * r 1 statement block_statements
a & r 1 statement block_statements
a DO r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a IF r 1 statement block_statements
a ELSE r 1 statement block_statements
a TEST r 1 statement block_statements
a { r 1 statement block_statements
a SWITCH r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a INPUT r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a BREAK r 1 statement block_statements
a RETURN r 1 statement block_statements
a GOTO r 1 statement block_statements
s
a Ω r 1 statement variable_decls
a ( r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a function_call r 1 statement variable_decls
a ++ r 1 statement variable_decls
a -- r 1 statement variable_decls
a - r 1 statement variable_decls
a ! r 1 statement variable_decls
a ~ r 1 statement variable_decls
a * r 1 statement variable_decls
a & r 1 statement variable_decls
a DO r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a IF r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a TEST r 1 statement variable_decls
a { r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a GOTO r 1 statement variable_decls
s
a Ω r 1 statement function_decl
a ( r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a function_call r 1 statement function_decl
a ++ r 1 statement function_decl
a -- r 1 statement function_decl
a - r 1 statement function_decl
a ! r 1 statement function_decl
a ~ r 1 statement function_decl
a * r 1 statement function_decl
a & r 1 statement function_decl
a DO r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a IF r 1 statement function_decl
a ELSE r 1 statement function_decl
a TEST r 1 statement function_decl
a { r 1 statement function_decl
a SWITCH r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a INPUT r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a BREAK r 1 statement function_decl
a RETURN r 1 statement function_decl
a GOTO r 1 statement function_decl
s
a Ω r 1 statement output_statement
a ( r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a function_call r 1 statement output_statement
a ++ r 1 statement output_statement
a -- r 1 statement output_statement
a - r 1 statement output_statement
a ! r 1 statement output_statement
a ~ r 1 statement output_statement
a * r 1 statement output_statement
a & r 1 statement output_statement
a DO r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a IF r 1 statement output_statement
a ELSE r 1 statement output_statement
a TEST r 1 statement output_statement
a { r 1 statement output_statement
a SWITCH r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a INPUT r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a BREAK r 1 statement output_statement
a RETURN r 1 statement output_statement
a GOTO r 1 statement output_statement
s
a Ω r 1 statement input_statement
a ( r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a function_call r 1 statement input_statement
a ++ r 1 statement input_statement
a -- r 1 statement input_statement
a - r 1 statement input_statement
a ! r 1 statement input_statement
a ~ r 1 statement input_statement
a * r 1 statement input_statement
a & r 1 statement input_statement
a DO r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a IF r 1 statement input_statement
a ELSE r 1 statement input_statement
a TEST r 1 statement input_statement
a { r 1 statement input_statement
a SWITCH r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a INPUT r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a BREAK r 1 statement input_statement
a RETURN r 1 statement input_statement
a GOTO r 1 statement input_statement
s
a Ω r 1 statement while_loop
a ( r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a function_call r 1 statement while_loop
a ++ r 1 statement while_loop
a -- r 1 statement while_loop
a - r 1 statement while_loop
a ! r 1 statement while_loop
a ~ r 1 statement while_loop
a * r 1 statement while_loop
a & r 1 statement while_loop
a DO r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a IF r 1 statement while_loop
a ELSE r 1 statement while_loop
a TEST r 1 statement while_loop
a { r 1 statement while_loop
a SWITCH r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a INPUT r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a BREAK r 1 statement while_loop
a RETURN r 1 statement while_loop
a GOTO r 1 statement while_loop
s
a Ω r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a - r 1 statement do_while_loop
a ! r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
a * r 1 statement do_while_loop
a & r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a { r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
s
a Ω r 1 statement for_loop
a ( r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a function_call r 1 statement for_loop
a ++ r 1 statement for_loop
a -- r 1 statement for_loop
a - r 1 statement for_loop
a ! r 1 statement for_loop
a ~ r 1 statement for_loop
a * r 1 statement for_loop
a & r 1 statement for_loop
a DO r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a IF r 1 statement for_loop
a ELSE r 1 statement for_loop
a TEST r 1 statement for_loop
a { r 1 statement for_loop
a SWITCH r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a INPUT r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a BREAK r 1 statement for_loop
a RETURN r 1 statement for_loop
a GOTO r 1 statement for_loop
s
a Ω r 1 statement if_statement
a ( r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a function_call r 1 statement if_statement
a ++ r 1 statement if_statement
a -- r 1 statement if_statement
a - r 1 statement if_statement
a ! r 1 statement if_statement
a ~ r 1 statement if_statement
a * r 1 statement if_statement
a & r 1 statement if_statement
a DO r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a IF r 1 statement if_statement
a ELSE r 1 statement if_statement
a TEST r 1 statement if_statement
a { r 1 statement if_statement
a SWITCH r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a INPUT r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a BREAK r 1 statement if_statement
a RETURN r 1 statement if_statement
a GOTO r 1 statement if_statement
s
a Ω r 1 statement else_statement
a ( r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a function_call r 1 statement else_statement
a ++ r 1 statement else_statement
a -- r 1 statement else_statement
a - r 1 statement else_statement
a ! r 1 statement else_statement
a ~ r 1 statement else_statement
a * r 1 statement else_statement
a & r 1 statement else_statement
a DO r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a IF r 1 statement else_statement
a ELSE r 1 statement else_statement
a TEST r 1 statement else_statement
a { r 1 statement else_statement
a SWITCH r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a INPUT r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a BREAK r 1 statement else_statement
a RETURN r 1 statement else_statement
a GOTO r 1 statement else_statement
s
a Ω r 1 statement test_statement
a ( r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a function_call r 1 statement test_statement
a ++ r 1 statement test_statement
a -- r 1 statement test_statement
a - r 1 statement test_statement
a ! r 1 statement test_statement
a ~ r 1 statement test_statement
a * r 1 statement test_statement
a & r 1 statement test_statement
a DO r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a IF r 1 statement test_statement
a ELSE r 1 statement test_statement
a TEST r 1 statement test_statement
a { r 1 statement test_statement
a SWITCH r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a INPUT r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a BREAK r 1 statement test_statement
a RETURN r 1 statement test_statement
a GOTO r 1 statement test_statement
s
a Ω r 1 statement switch_statement
a ( r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a function_call r 1 statement switch_statement
a ++ r 1 statement switch_statement
a -- r 1 statement switch_statement
a - r 1 statement switch_statement
a ! r 1 statement switch_statement
a ~ r 1 statement switch_statement
a * r 1 statement switch_statement
a & r 1 statement switch_statement
a DO r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a IF r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a TEST r 1 statement switch_statement
a { r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a GOTO r 1 statement switch_statement
s
a Ω r 1 statement jump_statement
a ( r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a function_call r 1 statement jump_statement
a ++ r 1 statement jump_statement
a -- r 1 statement jump_statement
a - r 1 statement jump_statement
a ! r 1 statement jump_statement
a ~ r 1 statement jump_statement
a * r 1 statement jump_statement
a & r 1 statement jump_statement
a DO r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a IF r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a TEST r 1 statement jump_statement
a { r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a GOTO r 1 statement jump_statement
s
a ; r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 108
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 108
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ; r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ; r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ; r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ; r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ; r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ; r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ; r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 type IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a :: s 151
a VAR r 1 type IDENTIFIER
a FUNC r 1 type IDENTIFIER
s
a ; r 1 unary_expression postfix_expression
a [ s 152
a . s 153
a -> s 154
a ++ s 155
a -- s 156
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ; r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ( r 1 unary_operator ++
a HEX_CONST r 1 unary_operator ++
a OCTAL_CONST r 1 unary_operator ++
a BINARY_CONST r 1 unary_operator ++
a NUMBER_CONST r 1 unary_operator ++
a CHAR_CONST r 1 unary_operator ++
a STRING_CONST r 1 unary_operator ++
a IDENTIFIER r 1 unary_operator ++
a function_call r 1 unary_operator ++
a ++ r 1 unary_operator ++
a -- r 1 unary_operator ++
a - r 1 unary_operator ++
a ! r 1 unary_operator ++
a ~ r 1 unary_operator ++
a * r 1 unary_operator ++
a & r 1 unary_operator ++
s
a ( r 1 unary_operator --
a HEX_CONST r 1 unary_operator --
a OCTAL_CONST r 1 unary_operator --
a BINARY_CONST r 1 unary_operator --
a NUMBER_CONST r 1 unary_operator --
a CHAR_CONST r 1 unary_operator --
a STRING_CONST r 1 unary_operator --
a IDENTIFIER r 1 unary_operator --
a function_call r 1 unary_operator --
a ++ r 1 unary_operator --
a -- r 1 unary_operator --
a - r 1 unary_operator --
a ! r 1 unary_operator --
a ~ r 1 unary_operator --
a * r 1 unary_operator --
a & r 1 unary_operator --
s
a ; r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 135
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 135
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 101
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 102
a unary_operator s 103
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 18
g postfix_expression 101
g unary_expression 102
g unary_operator 103
s
a ( r 1 unary_operator -
a HEX_CONST r 1 unary_operator -
a OCTAL_CONST r 1 unary_operator -
a BINARY_CONST r 1 unary_operator -
a NUMBER_CONST r 1 unary_operator -
a CHAR_CONST r 1 unary_operator -
a STRING_CONST r 1 unary_operator -
a IDENTIFIER r 1 unary_operator -
a function_call r 1 unary_operator -
a ++ r 1 unary_operator -
a -- r 1 unary_operator -
a - r 1 unary_operator -
a ! r 1 unary_operator -
a ~ r 1 unary_operator -
a * r 1 unary_operator -
a & r 1 unary_operator -
s
a ( r 1 unary_operator !
a HEX_CONST r 1 unary_operator !
a OCTAL_CONST r 1 unary_operator !
a BINARY_CONST r 1 unary_operator !
a NUMBER_CONST r 1 unary_operator !
a CHAR_CONST r 1 unary_operator !
a STRING_CONST r 1 unary_operator !
a IDENTIFIER r 1 unary_operator !
a function_call r 1 unary_operator !
a ++ r 1 unary_operator !
a -- r 1 unary_operator !
a - r 1 unary_operator !
a ! r 1 unary_operator !
a ~ r 1 unary_operator !
a * r 1 unary_operator !
a & r 1 unary_operator !
s
a ( r 1 unary_operator ~
a HEX_CONST r 1 unary_operator ~
a OCTAL_CONST r 1 unary_operator ~
a BINARY_CONST r 1 unary_operator ~
a NUMBER_CONST r 1 unary_operator ~
a CHAR_CONST r 1 unary_operator ~
a STRING_CONST r 1 unary_operator ~
a IDENTIFIER r 1 unary_operator ~
a function_call r 1 unary_operator ~
a ++ r 1 unary_operator ~
a -- r 1 unary_operator ~
a - r 1 unary_operator ~
a ! r 1 unary_operator ~
a ~ r 1 unary_operator ~
a * r 1 unary_operator ~
a & r 1 unary_operator ~
s
a ( r 1 unary_operator *
a HEX_CONST r 1 unary_operator *
a OCTAL_CONST r 1 unary_operator *
a BINARY_CONST r 1 unary_operator *
a NUMBER_CONST r 1 unary_operator *
a CHAR_CONST r 1 unary_operator *
a STRING_CONST r 1 unary_operator *
a IDENTIFIER r 1 unary_operator *
a function_call r 1 unary_operator *
a ++ r 1 unary_operator *
a -- r 1 unary_operator *
a - r 1 unary_operator *
a ! r 1 unary_operator *
a ~ r 1 unary_operator *
a * r 1 unary_operator *
a & r 1 unary_operator *
s
a ( r 1 unary_operator &
a HEX_CONST r 1 unary_operator &
a OCTAL_CONST r 1 unary_operator &
a BINARY_CONST r 1 unary_operator &
a NUMBER_CONST r 1 unary_operator &
a CHAR_CONST r 1 unary_operator &
a STRING_CONST r 1 unary_operator &
a IDENTIFIER r 1 unary_operator &
a function_call r 1 unary_operator &
a ++ r 1 unary_operator &
a -- r 1 unary_operator &
a - r 1 unary_operator &
a ! r 1 unary_operator &
a ~ r 1 unary_operator &
a * r 1 unary_operator &
a & r 1 unary_operator &
s
a ; r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a * s 157
a & r 1 additive_expression multiplicative_expression
a / s 158
a % s 159
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a ; r 1 shift_expression additive_expression
a - s 160
a & r 1 shift_expression additive_expression
a + s 161
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a ; r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a << s 162
a >> s 163
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a ; r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a < s 164
a > s 165
a <= s 166
a >= s 167
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a ; r 1 binary_and_expression equality_expression
a & r 1 binary_and_expression equality_expression
a == s 168
a != s 169
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a ; r 1 binary_xor_expression binary_and_expression
a & s 170
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ; r 1 binary_or_expression binary_xor_expression
a ^ s 171
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a ; r 1 logical_and_expression binary_or_expression
a | s 172
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a ; r 1 logical_xor_expression logical_and_expression
a && s 173
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ; r 1 logical_or_expression logical_xor_expression
a ^^ s 174
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a ; r 1 conditional_expression logical_or_expression
a || s 175
a ? s 176
a , r 1 conditional_expression logical_or_expression
s
a ; r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a ; r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a * s 177
a & s 178
a < s 179
a VAR s 180
a FUNC s 181
s
a block_statements s 147
a { s 148
g block_statements 147
s
a ( s 182
s
a ( s 183
s
a ( s 184
s
a statement s 99
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 99
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a ( s 185
s
a statements s 66
a statement_list s 67
a statement s 68
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a } r 0 statements 
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statements 66
g statement_list 67
g statement 68
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a ( s 186
s
a expression s 104
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 104
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 105
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 105
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 187
s
a ; s 188
s
a expression s 106
a ; s 107
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 106
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 189
s
a } s 380
s
a statement s 192
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a } r 1 statements statement_list
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statement 192
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a ( r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a function_call r 1 statement_list statement
a ++ r 1 statement_list statement
a -- r 1 statement_list statement
a - r 1 statement_list statement
a ! r 1 statement_list statement
a ~ r 1 statement_list statement
a * r 1 statement_list statement
a & r 1 statement_list statement
a DO r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a IF r 1 statement_list statement
a ELSE r 1 statement_list statement
a TEST r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a SWITCH r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a INPUT r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a BREAK r 1 statement_list statement
a RETURN r 1 statement_list statement
a GOTO r 1 statement_list statement
s
a ; s 335
a , s 150
s
a ( r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a function_call r 1 statement block_statements
a ++ r 1 statement block_statements
a -- r 1 statement block_statements
a - r 1 statement block_statements
a ! r 1 statement block_statements
a ~ r 1 statement block_statements
a * r 1 statement block_statements
a & r 1 statement block_statements
a DO r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a IF r 1 statement block_statements
a ELSE r 1 statement block_statements
a TEST r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a SWITCH r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a INPUT r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a BREAK r 1 statement block_statements
a RETURN r 1 statement block_statements
a GOTO r 1 statement block_statements
s
a ( r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a function_call r 1 statement variable_decls
a ++ r 1 statement variable_decls
a -- r 1 statement variable_decls
a - r 1 statement variable_decls
a ! r 1 statement variable_decls
a ~ r 1 statement variable_decls
a * r 1 statement variable_decls
a & r 1 statement variable_decls
a DO r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a IF r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a TEST r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a GOTO r 1 statement variable_decls
s
a ( r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a function_call r 1 statement function_decl
a ++ r 1 statement function_decl
a -- r 1 statement function_decl
a - r 1 statement function_decl
a ! r 1 statement function_decl
a ~ r 1 statement function_decl
a * r 1 statement function_decl
a & r 1 statement function_decl
a DO r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a IF r 1 statement function_decl
a ELSE r 1 statement function_decl
a TEST r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a SWITCH r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a INPUT r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a BREAK r 1 statement function_decl
a RETURN r 1 statement function_decl
a GOTO r 1 statement function_decl
s
a ( r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a function_call r 1 statement output_statement
a ++ r 1 statement output_statement
a -- r 1 statement output_statement
a - r 1 statement output_statement
a ! r 1 statement output_statement
a ~ r 1 statement output_statement
a * r 1 statement output_statement
a & r 1 statement output_statement
a DO r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a IF r 1 statement output_statement
a ELSE r 1 statement output_statement
a TEST r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a SWITCH r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a INPUT r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a BREAK r 1 statement output_statement
a RETURN r 1 statement output_statement
a GOTO r 1 statement output_statement
s
a ( r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a function_call r 1 statement input_statement
a ++ r 1 statement input_statement
a -- r 1 statement input_statement
a - r 1 statement input_statement
a ! r 1 statement input_statement
a ~ r 1 statement input_statement
a * r 1 statement input_statement
a & r 1 statement input_statement
a DO r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a IF r 1 statement input_statement
a ELSE r 1 statement input_statement
a TEST r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a SWITCH r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a INPUT r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a BREAK r 1 statement input_statement
a RETURN r 1 statement input_statement
a GOTO r 1 statement input_statement
s
a ( r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a function_call r 1 statement while_loop
a ++ r 1 statement while_loop
a -- r 1 statement while_loop
a - r 1 statement while_loop
a ! r 1 statement while_loop
a ~ r 1 statement while_loop
a * r 1 statement while_loop
a & r 1 statement while_loop
a DO r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a IF r 1 statement while_loop
a ELSE r 1 statement while_loop
a TEST r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a SWITCH r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a INPUT r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a BREAK r 1 statement while_loop
a RETURN r 1 statement while_loop
a GOTO r 1 statement while_loop
s
a ( r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a - r 1 statement do_while_loop
a ! r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
a * r 1 statement do_while_loop
a & r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
s
a ( r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a function_call r 1 statement for_loop
a ++ r 1 statement for_loop
a -- r 1 statement for_loop
a - r 1 statement for_loop
a ! r 1 statement for_loop
a ~ r 1 statement for_loop
a * r 1 statement for_loop
a & r 1 statement for_loop
a DO r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a IF r 1 statement for_loop
a ELSE r 1 statement for_loop
a TEST r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a SWITCH r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a INPUT r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a BREAK r 1 statement for_loop
a RETURN r 1 statement for_loop
a GOTO r 1 statement for_loop
s
a ( r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a function_call r 1 statement if_statement
a ++ r 1 statement if_statement
a -- r 1 statement if_statement
a - r 1 statement if_statement
a ! r 1 statement if_statement
a ~ r 1 statement if_statement
a * r 1 statement if_statement
a & r 1 statement if_statement
a DO r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a IF r 1 statement if_statement
a ELSE r 1 statement if_statement
a TEST r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a SWITCH r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a INPUT r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a BREAK r 1 statement if_statement
a RETURN r 1 statement if_statement
a GOTO r 1 statement if_statement
s
a ( r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a function_call r 1 statement else_statement
a ++ r 1 statement else_statement
a -- r 1 statement else_statement
a - r 1 statement else_statement
a ! r 1 statement else_statement
a ~ r 1 statement else_statement
a * r 1 statement else_statement
a & r 1 statement else_statement
a DO r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a IF r 1 statement else_statement
a ELSE r 1 statement else_statement
a TEST r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a SWITCH r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a INPUT r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a BREAK r 1 statement else_statement
a RETURN r 1 statement else_statement
a GOTO r 1 statement else_statement
s
a ( r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a function_call r 1 statement test_statement
a ++ r 1 statement test_statement
a -- r 1 statement test_statement
a - r 1 statement test_statement
a ! r 1 statement test_statement
a ~ r 1 statement test_statement
a * r 1 statement test_statement
a & r 1 statement test_statement
a DO r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a IF r 1 statement test_statement
a ELSE r 1 statement test_statement
a TEST r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a SWITCH r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a INPUT r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a BREAK r 1 statement test_statement
a RETURN r 1 statement test_statement
a GOTO r 1 statement test_statement
s
a ( r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a function_call r 1 statement switch_statement
a ++ r 1 statement switch_statement
a -- r 1 statement switch_statement
a - r 1 statement switch_statement
a ! r 1 statement switch_statement
a ~ r 1 statement switch_statement
a * r 1 statement switch_statement
a & r 1 statement switch_statement
a DO r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a IF r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a TEST r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a GOTO r 1 statement switch_statement
s
a ( r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a function_call r 1 statement jump_statement
a ++ r 1 statement jump_statement
a -- r 1 statement jump_statement
a - r 1 statement jump_statement
a ! r 1 statement jump_statement
a ~ r 1 statement jump_statement
a * r 1 statement jump_statement
a & r 1 statement jump_statement
a DO r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a IF r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a TEST r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a GOTO r 1 statement jump_statement
s
a * s 177
a & s 178
a < s 179
a VAR s 366
a FUNC s 367
s
a block_statements s 334
a { s 148
g block_statements 334
s
a ( s 368
s
a ( s 369
s
a ( s 370
s
a statement s 193
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statement 193
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a ( s 371
s
a statements s 190
a statement_list s 67
a statement s 68
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a } r 0 statements 
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statements 190
g statement_list 67
g statement 68
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a ( s 372
s
a expression s 222
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 222
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 223
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 223
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 373
s
a ; s 374
s
a expression s 224
a ; s 225
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 224
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 375
s
a Ω r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a ! r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
s
a Ω r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a ! r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
s
a ; r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ; r 1 unary_expression postfix_expression
a [ s 152
a . s 153
a -> s 154
a ++ s 155
a -- s 156
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ; r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 101
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 221
a unary_operator s 103
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 18
g postfix_expression 101
g unary_expression 221
g unary_operator 103
s
a ; s 361
a , s 150
s
a ; s 362
a , s 150
s
a ; s 363
a , s 150
s
a Ω r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a ! r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
s
a ) s 364
a , s 365
s
a ) r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 231
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 231
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ) r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ) r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ) r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ) r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ) r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ) r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ) r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ) r 1 unary_expression postfix_expression
a [ s 336
a . s 337
a -> s 338
a ++ s 339
a -- s 340
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ) r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ) r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 325
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 325
s
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 228
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 229
a unary_operator s 230
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 109
g postfix_expression 228
g unary_expression 229
g unary_operator 230
s
a ) r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a * s 341
a & r 1 additive_expression multiplicative_expression
a / s 342
a % s 343
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a ) r 1 shift_expression additive_expression
a - s 344
a & r 1 shift_expression additive_expression
a + s 345
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a ) r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a << s 346
a >> s 347
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a ) r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a < s 348
a > s 349
a <= s 350
a >= s 351
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a ) r 1 binary_and_expression equality_expression
a & r 1 binary_and_expression equality_expression
a == s 352
a != s 353
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a ) r 1 binary_xor_expression binary_and_expression
a & s 354
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ) r 1 binary_or_expression binary_xor_expression
a ^ s 355
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a ) r 1 logical_and_expression binary_or_expression
a | s 356
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a ) r 1 logical_xor_expression logical_and_expression
a && s 357
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ) r 1 logical_or_expression logical_xor_expression
a ^^ s 358
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a ) r 1 conditional_expression logical_or_expression
a || s 359
a ? s 360
a , r 1 conditional_expression logical_or_expression
s
a ) r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a ) r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 226
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 226
s
a ( r 1 assignment_operator =
a HEX_CONST r 1 assignment_operator =
a OCTAL_CONST r 1 assignment_operator =
a BINARY_CONST r 1 assignment_operator =
a NUMBER_CONST r 1 assignment_operator =
a CHAR_CONST r 1 assignment_operator =
a STRING_CONST r 1 assignment_operator =
a IDENTIFIER r 1 assignment_operator =
a function_call r 1 assignment_operator =
a ++ r 1 assignment_operator =
a -- r 1 assignment_operator =
a - r 1 assignment_operator =
a ! r 1 assignment_operator =
a ~ r 1 assignment_operator =
a * r 1 assignment_operator =
a & r 1 assignment_operator =
s
a ( r 1 assignment_operator *=
a HEX_CONST r 1 assignment_operator *=
a OCTAL_CONST r 1 assignment_operator *=
a BINARY_CONST r 1 assignment_operator *=
a NUMBER_CONST r 1 assignment_operator *=
a CHAR_CONST r 1 assignment_operator *=
a STRING_CONST r 1 assignment_operator *=
a IDENTIFIER r 1 assignment_operator *=
a function_call r 1 assignment_operator *=
a ++ r 1 assignment_operator *=
a -- r 1 assignment_operator *=
a - r 1 assignment_operator *=
a ! r 1 assignment_operator *=
a ~ r 1 assignment_operator *=
a * r 1 assignment_operator *=
a & r 1 assignment_operator *=
s
a ( r 1 assignment_operator /=
a HEX_CONST r 1 assignment_operator /=
a OCTAL_CONST r 1 assignment_operator /=
a BINARY_CONST r 1 assignment_operator /=
a NUMBER_CONST r 1 assignment_operator /=
a CHAR_CONST r 1 assignment_operator /=
a STRING_CONST r 1 assignment_operator /=
a IDENTIFIER r 1 assignment_operator /=
a function_call r 1 assignment_operator /=
a ++ r 1 assignment_operator /=
a -- r 1 assignment_operator /=
a - r 1 assignment_operator /=
a ! r 1 assignment_operator /=
a ~ r 1 assignment_operator /=
a * r 1 assignment_operator /=
a & r 1 assignment_operator /=
s
a ( r 1 assignment_operator %=
a HEX_CONST r 1 assignment_operator %=
a OCTAL_CONST r 1 assignment_operator %=
a BINARY_CONST r 1 assignment_operator %=
a NUMBER_CONST r 1 assignment_operator %=
a CHAR_CONST r 1 assignment_operator %=
a STRING_CONST r 1 assignment_operator %=
a IDENTIFIER r 1 assignment_operator %=
a function_call r 1 assignment_operator %=
a ++ r 1 assignment_operator %=
a -- r 1 assignment_operator %=
a - r 1 assignment_operator %=
a ! r 1 assignment_operator %=
a ~ r 1 assignment_operator %=
a * r 1 assignment_operator %=
a & r 1 assignment_operator %=
s
a ( r 1 assignment_operator +=
a HEX_CONST r 1 assignment_operator +=
a OCTAL_CONST r 1 assignment_operator +=
a BINARY_CONST r 1 assignment_operator +=
a NUMBER_CONST r 1 assignment_operator +=
a CHAR_CONST r 1 assignment_operator +=
a STRING_CONST r 1 assignment_operator +=
a IDENTIFIER r 1 assignment_operator +=
a function_call r 1 assignment_operator +=
a ++ r 1 assignment_operator +=
a -- r 1 assignment_operator +=
a - r 1 assignment_operator +=
a ! r 1 assignment_operator +=
a ~ r 1 assignment_operator +=
a * r 1 assignment_operator +=
a & r 1 assignment_operator +=
s
a ( r 1 assignment_operator -=
a HEX_CONST r 1 assignment_operator -=
a OCTAL_CONST r 1 assignment_operator -=
a BINARY_CONST r 1 assignment_operator -=
a NUMBER_CONST r 1 assignment_operator -=
a CHAR_CONST r 1 assignment_operator -=
a STRING_CONST r 1 assignment_operator -=
a IDENTIFIER r 1 assignment_operator -=
a function_call r 1 assignment_operator -=
a ++ r 1 assignment_operator -=
a -- r 1 assignment_operator -=
a - r 1 assignment_operator -=
a ! r 1 assignment_operator -=
a ~ r 1 assignment_operator -=
a * r 1 assignment_operator -=
a & r 1 assignment_operator -=
s
a ( r 1 assignment_operator <<=
a HEX_CONST r 1 assignment_operator <<=
a OCTAL_CONST r 1 assignment_operator <<=
a BINARY_CONST r 1 assignment_operator <<=
a NUMBER_CONST r 1 assignment_operator <<=
a CHAR_CONST r 1 assignment_operator <<=
a STRING_CONST r 1 assignment_operator <<=
a IDENTIFIER r 1 assignment_operator <<=
a function_call r 1 assignment_operator <<=
a ++ r 1 assignment_operator <<=
a -- r 1 assignment_operator <<=
a - r 1 assignment_operator <<=
a ! r 1 assignment_operator <<=
a ~ r 1 assignment_operator <<=
a * r 1 assignment_operator <<=
a & r 1 assignment_operator <<=
s
a ( r 1 assignment_operator >>=
a HEX_CONST r 1 assignment_operator >>=
a OCTAL_CONST r 1 assignment_operator >>=
a BINARY_CONST r 1 assignment_operator >>=
a NUMBER_CONST r 1 assignment_operator >>=
a CHAR_CONST r 1 assignment_operator >>=
a STRING_CONST r 1 assignment_operator >>=
a IDENTIFIER r 1 assignment_operator >>=
a function_call r 1 assignment_operator >>=
a ++ r 1 assignment_operator >>=
a -- r 1 assignment_operator >>=
a - r 1 assignment_operator >>=
a ! r 1 assignment_operator >>=
a ~ r 1 assignment_operator >>=
a * r 1 assignment_operator >>=
a & r 1 assignment_operator >>=
s
a ( r 1 assignment_operator &=
a HEX_CONST r 1 assignment_operator &=
a OCTAL_CONST r 1 assignment_operator &=
a BINARY_CONST r 1 assignment_operator &=
a NUMBER_CONST r 1 assignment_operator &=
a CHAR_CONST r 1 assignment_operator &=
a STRING_CONST r 1 assignment_operator &=
a IDENTIFIER r 1 assignment_operator &=
a function_call r 1 assignment_operator &=
a ++ r 1 assignment_operator &=
a -- r 1 assignment_operator &=
a - r 1 assignment_operator &=
a ! r 1 assignment_operator &=
a ~ r 1 assignment_operator &=
a * r 1 assignment_operator &=
a & r 1 assignment_operator &=
s
a ( r 1 assignment_operator ^=
a HEX_CONST r 1 assignment_operator ^=
a OCTAL_CONST r 1 assignment_operator ^=
a BINARY_CONST r 1 assignment_operator ^=
a NUMBER_CONST r 1 assignment_operator ^=
a CHAR_CONST r 1 assignment_operator ^=
a STRING_CONST r 1 assignment_operator ^=
a IDENTIFIER r 1 assignment_operator ^=
a function_call r 1 assignment_operator ^=
a ++ r 1 assignment_operator ^=
a -- r 1 assignment_operator ^=
a - r 1 assignment_operator ^=
a ! r 1 assignment_operator ^=
a ~ r 1 assignment_operator ^=
a * r 1 assignment_operator ^=
a & r 1 assignment_operator ^=
s
a ( r 1 assignment_operator |=
a HEX_CONST r 1 assignment_operator |=
a OCTAL_CONST r 1 assignment_operator |=
a BINARY_CONST r 1 assignment_operator |=
a NUMBER_CONST r 1 assignment_operator |=
a CHAR_CONST r 1 assignment_operator |=
a STRING_CONST r 1 assignment_operator |=
a IDENTIFIER r 1 assignment_operator |=
a function_call r 1 assignment_operator |=
a ++ r 1 assignment_operator |=
a -- r 1 assignment_operator |=
a - r 1 assignment_operator |=
a ! r 1 assignment_operator |=
a ~ r 1 assignment_operator |=
a * r 1 assignment_operator |=
a & r 1 assignment_operator |=
s
a WHILE s 379
s
a statements s 191
a statement_list s 67
a statement s 68
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a } r 0 statements 
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statements 191
g statement_list 67
g statement 68
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a Ω r 2 statement expression ;
a ( r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a function_call r 2 statement expression ;
a ++ r 2 statement expression ;
a -- r 2 statement expression ;
a - r 2 statement expression ;
a ! r 2 statement expression ;
a ~ r 2 statement expression ;
a * r 2 statement expression ;
a & r 2 statement expression ;
a DO r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a IF r 2 statement expression ;
a ELSE r 2 statement expression ;
a TEST r 2 statement expression ;
a { r 2 statement expression ;
a SWITCH r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a INPUT r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a BREAK r 2 statement expression ;
a RETURN r 2 statement expression ;
a GOTO r 2 statement expression ;
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 227
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 227
s
a IDENTIFIER s 326
a type s 327
g type 327
s
a expression s 236
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 236
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 376
s
a IDENTIFIER s 377
s
a ; r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ; r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 322
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 293
g postfix_expression 302
g unary_expression 322
g unary_operator 305
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 323
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 293
g postfix_expression 302
g unary_expression 323
g unary_operator 305
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 324
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 293
g postfix_expression 302
g unary_expression 324
g unary_operator 305
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 321
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 321
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 320
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 320
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 318
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 318
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 319
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 319
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 314
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 314
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 315
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 315
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 316
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 316
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 317
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 317
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 312
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 312
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 313
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 313
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 311
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 311
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 310
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 310
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 309
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 309
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 308
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 308
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 307
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 307
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 304
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 306
g primary_expression 293
g postfix_expression 302
g unary_expression 304
g unary_operator 305
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 306
s
a expression s 194
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 220
g expression 194
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 220
s
a * r 2 type type *
a & r 2 type type *
a < r 2 type type *
a VAR r 2 type type *
a FUNC r 2 type type *
s
a * r 2 type type &
a & r 2 type type &
a < r 2 type type &
a VAR r 2 type type &
a FUNC r 2 type type &
s
a expression s 263
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 272
a postfix_expression s 273
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 275
a unary_operator s 276
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 286
a logical_or_expression s 287
a conditional_expression s 288
a assignment_expression s 289
a type s 290
a template_params s 291
a template_param s 292
g expression 263
g primary_expression 264
g postfix_expression 273
g unary_expression 275
g unary_operator 276
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 286
g logical_or_expression 287
g conditional_expression 288
g assignment_expression 289
g type 290
g template_params 291
g template_param 292
s
a IDENTIFIER s 331
a variable_inits s 332
a variable_name_and_assign s 333
g variable_inits 332
g variable_name_and_assign 333
s
a IDENTIFIER s 378
s
a expression s 232
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 232
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a variable_decls s 328
a IDENTIFIER s 329
a type s 330
g variable_decls 328
g type 330
s
a expression s 233
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 233
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 234
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 234
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 235
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 235
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a Ω r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a ! r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
s
a Ω r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a ! r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
s
a ; s 381
s
a } s 554
s
a } s 555
s
a ( r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a ! r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
s
a ( r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a ! r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
s
a : s 525
a , s 526
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 387
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 387
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 444
a . s 445
a -> s 446
a ++ s 447
a -- s 448
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a : r 1 multiplicative_expression unary_expression
a assignment_operator s 438
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 438
s
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 382
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 383
a unary_operator s 384
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 195
g postfix_expression 382
g unary_expression 383
g unary_operator 384
s
a - r 1 additive_expression multiplicative_expression
a * s 464
a & r 1 additive_expression multiplicative_expression
a / s 465
a % s 466
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a : r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a - s 473
a & r 1 shift_expression additive_expression
a + s 474
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a : r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a & r 1 relational_expression shift_expression
a << s 479
a >> s 480
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a : r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a & r 1 equality_expression relational_expression
a < s 485
a > s 486
a <= s 487
a >= s 488
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a : r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a & r 1 binary_and_expression equality_expression
a == s 499
a != s 500
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a : r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a & s 504
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a : r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ^ s 507
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a : r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a | s 510
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a : r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a && s 513
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a : r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ^^ s 516
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a : r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a || s 520
a ? s 521
a : r 1 conditional_expression logical_or_expression
a , r 1 conditional_expression logical_or_expression
s
a : r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a : r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a ; r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ; s 527
a , s 150
s
a ; s 528
a , s 150
s
a ; s 529
a , s 150
s
a ( r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a ! r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
s
a ; r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a ; r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a ) r 1 unary_expression postfix_expression
a [ s 336
a . s 337
a -> s 338
a ++ s 339
a -- s 340
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ) r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 228
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 386
a unary_operator s 230
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 109
g postfix_expression 228
g unary_expression 386
g unary_operator 230
s
a ) s 530
a , s 365
s
a ) s 531
a , s 365
s
a ) s 532
a , s 365
s
a ) s 533
a , s 365
s
a ) s 534
a , s 365
s
a ] s 535
a , s 536
s
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 389
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 389
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 449
a ] r 1 unary_expression postfix_expression
a . s 450
a -> s 451
a ++ s 452
a -- s 453
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ] r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 439
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 439
s
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 397
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 398
a unary_operator s 399
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 237
g postfix_expression 397
g unary_expression 398
g unary_operator 399
s
a ] r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a * s 467
a & r 1 additive_expression multiplicative_expression
a / s 468
a % s 469
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a ] r 1 shift_expression additive_expression
a - s 475
a & r 1 shift_expression additive_expression
a + s 476
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a ] r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a << s 481
a >> s 482
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a ] r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a < s 489
a > s 490
a <= s 491
a >= s 492
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a ] r 1 binary_and_expression equality_expression
a & r 1 binary_and_expression equality_expression
a == s 501
a != s 502
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a ] r 1 binary_xor_expression binary_and_expression
a & s 505
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ] r 1 binary_or_expression binary_xor_expression
a ^ s 508
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a ] r 1 logical_and_expression binary_or_expression
a | s 511
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a ] r 1 logical_xor_expression logical_and_expression
a && s 514
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ] r 1 logical_or_expression logical_xor_expression
a ^^ s 517
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a ] r 1 conditional_expression logical_or_expression
a || s 522
a ? s 523
a , r 1 conditional_expression logical_or_expression
s
a ] r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a ] r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a > r 1 template_param expression
a , r 1 template_param expression
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 388
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 388
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 type IDENTIFIER
a > r 1 type IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 type IDENTIFIER
a :: s 443
s
a [ s 454
a . s 455
a -> s 456
a ++ s 457
a -- s 458
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 440
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 440
s
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 401
a postfix_expression s 402
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 264
g postfix_expression 402
g unary_expression 403
g unary_operator 404
s
a - r 1 additive_expression multiplicative_expression
a * s 470
a & r 1 additive_expression multiplicative_expression
a / s 471
a % s 472
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a - s 477
a & r 1 shift_expression additive_expression
a + s 478
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a & r 1 relational_expression shift_expression
a << s 483
a >> s 484
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a & r 1 equality_expression relational_expression
a < s 493
a > r 1 equality_expression relational_expression
a <= s 495
a >= s 496
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a & r 1 binary_and_expression equality_expression
a > r 1 binary_and_expression equality_expression
a == s 497
a != s 498
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a & s 503
a > r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a > r 1 binary_or_expression binary_xor_expression
a ^ s 506
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a > r 1 logical_and_expression binary_or_expression
a | s 509
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a > r 1 logical_xor_expression logical_and_expression
a && s 512
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a > r 1 logical_or_expression logical_xor_expression
a ^^ s 515
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a > r 1 conditional_expression logical_or_expression
a || s 518
a ? s 519
a , r 1 conditional_expression logical_or_expression
s
a > r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a > r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a * s 538
a & s 539
a < s 540
a > r 1 template_param type
a , r 1 template_param type
s
a > s 545
a , s 546
s
a > r 1 template_params template_param
a , r 1 template_params template_param
s
a ; r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 390
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 390
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ; r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ; r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ; r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ; r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ; r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ; r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ; r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ; r 1 unary_expression postfix_expression
a [ s 459
a . s 460
a -> s 461
a ++ s 462
a -- s 463
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ; r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ; r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 293
a ( s 294
a HEX_CONST s 295
a OCTAL_CONST s 296
a BINARY_CONST s 297
a NUMBER_CONST s 298
a CHAR_CONST s 299
a STRING_CONST s 300
a IDENTIFIER s 301
a postfix_expression s 302
a function_call s 303
a ++ s 29
a -- s 30
a unary_expression s 405
a unary_operator s 305
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 293
g postfix_expression 302
g unary_expression 405
g unary_operator 305
s
a ; r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 174
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a ; r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 173
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a ; r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 172
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ; r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 171
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a ; r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a & s 170
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a ; r 3 binary_and_expression binary_and_expression & equality_expression
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 168
a != s 169
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a ; r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a < s 164
a > s 165
a <= s 166
a >= s 167
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a ; r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a < s 164
a > s 165
a <= s 166
a >= s 167
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a ; r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a << s 162
a >> s 163
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a ; r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a << s 162
a >> s 163
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a ; r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a << s 162
a >> s 163
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a ; r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a << s 162
a >> s 163
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a ; r 3 shift_expression shift_expression << additive_expression
a - s 160
a & r 3 shift_expression shift_expression << additive_expression
a + s 161
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a ; r 3 shift_expression shift_expression >> additive_expression
a - s 160
a & r 3 shift_expression shift_expression >> additive_expression
a + s 161
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a ; r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 157
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 158
a % s 159
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a ; r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 157
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 158
a % s 159
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a ; r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a ; r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a ; r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 395
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 395
s
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a < r 1 type IDENTIFIER
a :: s 151
a VAR r 1 type IDENTIFIER
a FUNC r 1 type IDENTIFIER
s
a * r 3 type IDENTIFIER :: type
a & r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
a FUNC r 3 type IDENTIFIER :: type
s
a ; s 559
s
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a < r 1 type IDENTIFIER
a :: s 537
a VAR r 1 type IDENTIFIER
s
a * s 541
a & s 542
a < s 543
a VAR s 544
s
a ; r 1 variable_name_and_assign IDENTIFIER
a = s 549
a , r 1 variable_name_and_assign IDENTIFIER
s
a ; s 547
a , s 548
s
a ; r 1 variable_inits variable_name_and_assign
a , r 1 variable_inits variable_name_and_assign
s
a WHILE s 553
s
a ( r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a function_call r 2 statement expression ;
a ++ r 2 statement expression ;
a -- r 2 statement expression ;
a - r 2 statement expression ;
a ! r 2 statement expression ;
a ~ r 2 statement expression ;
a * r 2 statement expression ;
a & r 2 statement expression ;
a DO r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a IF r 2 statement expression ;
a ELSE r 2 statement expression ;
a TEST r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a SWITCH r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a INPUT r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a BREAK r 2 statement expression ;
a RETURN r 2 statement expression ;
a GOTO r 2 statement expression ;
s
a expression s 400
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 400
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 550
s
a IDENTIFIER s 551
s
a ) r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ) r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 435
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 406
g postfix_expression 415
g unary_expression 435
g unary_operator 418
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 436
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 406
g postfix_expression 415
g unary_expression 436
g unary_operator 418
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 437
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 406
g postfix_expression 415
g unary_expression 437
g unary_operator 418
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 434
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 434
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 433
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 433
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 431
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 431
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 432
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 432
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 427
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 427
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 428
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 428
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 429
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 429
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 430
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 430
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 425
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 425
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 426
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 426
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 424
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 424
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 423
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 423
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 422
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 422
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 421
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 421
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 420
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 420
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 417
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 419
g primary_expression 406
g postfix_expression 415
g unary_expression 417
g unary_operator 418
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 419
s
a expression s 385
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 220
g expression 385
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 220
s
a Ω r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a ! r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
s
a Ω r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a ! r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
s
a Ω r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a ! r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
s
a ; r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 396
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 396
s
a IDENTIFIER s 331
a variable_inits s 442
a variable_name_and_assign s 333
g variable_inits 442
g variable_name_and_assign 333
s
a IDENTIFIER s 552
s
a expression s 391
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 391
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a variable_decls s 441
a IDENTIFIER s 329
a type s 330
g variable_decls 441
g type 330
s
a expression s 392
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 392
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 393
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 393
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 394
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 394
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ( r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a ! r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
s
a ( r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a ! r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
s
a ; s 556
s
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ( s 557
s
a ( s 558
s
a Ω r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a - r 3 block_statements { statements }
a ! r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
a * r 3 block_statements { statements }
a & r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a { r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
s
a Ω r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a ! r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
s
a [ s 444
a . s 445
a -> s 446
a ++ s 447
a -- s 448
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 382
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 562
a unary_operator s 384
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 195
g postfix_expression 382
g unary_expression 562
g unary_operator 384
s
a : s 696
a , s 526
s
a ) r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ) s 697
a , s 365
s
a ) s 698
a , s 365
s
a ) s 699
a , s 365
s
a ) s 700
a , s 365
s
a ) s 701
a , s 365
s
a ) s 702
a , s 365
s
a ) s 703
a , s 365
s
a ) s 704
a , s 365
s
a ) r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a ) r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a [ s 449
a ] r 1 unary_expression postfix_expression
a . s 450
a -> s 451
a ++ s 452
a -- s 453
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ] r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 397
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 399
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 237
g postfix_expression 397
g unary_expression 605
g unary_operator 399
s
a ] s 705
a , s 536
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 454
a . s 455
a -> s 456
a ++ s 457
a -- s 458
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 401
a postfix_expression s 402
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 612
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 264
g postfix_expression 402
g unary_expression 612
g unary_operator 404
s
a ; r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ) r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 603
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 603
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ) r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ) r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ) r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ) r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ) r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ) r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ) r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ) r 1 unary_expression postfix_expression
a [ s 691
a . s 692
a -> s 693
a ++ s 694
a -- s 695
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ) r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ) r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 406
a ( s 407
a HEX_CONST s 408
a OCTAL_CONST s 409
a BINARY_CONST s 410
a NUMBER_CONST s 411
a CHAR_CONST s 412
a STRING_CONST s 413
a IDENTIFIER s 414
a postfix_expression s 415
a function_call s 416
a ++ s 29
a -- s 30
a unary_expression s 618
a unary_operator s 418
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 406
g postfix_expression 415
g unary_expression 618
g unary_operator 418
s
a ) r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 358
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a ) r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 357
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a ) r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 356
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ) r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 355
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a ) r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a & s 354
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a ) r 3 binary_and_expression binary_and_expression & equality_expression
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 352
a != s 353
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a ) r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a < s 348
a > s 349
a <= s 350
a >= s 351
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a ) r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a < s 348
a > s 349
a <= s 350
a >= s 351
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a ) r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a << s 346
a >> s 347
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a ) r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a << s 346
a >> s 347
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a ) r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a << s 346
a >> s 347
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a ) r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a << s 346
a >> s 347
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a ) r 3 shift_expression shift_expression << additive_expression
a - s 344
a & r 3 shift_expression shift_expression << additive_expression
a + s 345
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a ) r 3 shift_expression shift_expression >> additive_expression
a - s 344
a & r 3 shift_expression shift_expression >> additive_expression
a + s 345
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a ) r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 341
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 342
a % s 343
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a ) r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 341
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 342
a % s 343
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a ) r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a ) r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a ) r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 566
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 566
s
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 610
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 610
s
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 401
a postfix_expression s 273
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 275
a unary_operator s 276
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 286
a logical_or_expression s 287
a conditional_expression s 288
a assignment_expression s 616
g primary_expression 264
g postfix_expression 273
g unary_expression 275
g unary_operator 276
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 286
g logical_or_expression 287
g conditional_expression 288
g assignment_expression 616
s
a ; s 717
s
a ; s 706
a , s 548
s
a IDENTIFIER s 683
a type s 684
g type 684
s
a expression s 606
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 606
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 707
s
a IDENTIFIER s 711
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 608
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 608
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 709
s
a IDENTIFIER s 713
s
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 607
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 607
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 708
s
a IDENTIFIER s 712
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 609
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 609
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 710
s
a IDENTIFIER s 714
s
a ; r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ; r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 597
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 568
g postfix_expression 577
g unary_expression 597
g unary_operator 580
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 598
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 568
g postfix_expression 577
g unary_expression 598
g unary_operator 580
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 599
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 568
g postfix_expression 577
g unary_expression 599
g unary_operator 580
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 648
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 619
g postfix_expression 628
g unary_expression 648
g unary_operator 631
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 649
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 619
g postfix_expression 628
g unary_expression 649
g unary_operator 631
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 650
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 619
g postfix_expression 628
g unary_expression 650
g unary_operator 631
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 680
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 651
g postfix_expression 660
g unary_expression 680
g unary_operator 663
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 681
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 651
g postfix_expression 660
g unary_expression 681
g unary_operator 663
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 682
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 651
g postfix_expression 660
g unary_expression 682
g unary_operator 663
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 596
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 596
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 595
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 595
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 647
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 647
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 646
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 646
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 679
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 679
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 678
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 678
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 593
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 593
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 594
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 594
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 644
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 644
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 645
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 645
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 676
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 676
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 677
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 677
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 589
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 589
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 590
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 590
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 591
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 591
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 592
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 592
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 640
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 640
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 641
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 641
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 642
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 642
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 643
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 643
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 672
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 672
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 673
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 673
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 674
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 674
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 675
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 675
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 670
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 670
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 671
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 671
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 587
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 587
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 588
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 588
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 638
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 638
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 639
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 639
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 669
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 669
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 586
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 586
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 637
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 637
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 668
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 668
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 585
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 585
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 636
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 636
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 667
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 667
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 584
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 584
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 635
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 635
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 666
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 666
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 583
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 583
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 634
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 634
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 665
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 665
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 582
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 582
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 633
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 633
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 662
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 664
g primary_expression 651
g postfix_expression 660
g unary_expression 662
g unary_operator 663
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 664
s
a expression s 563
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 220
g expression 563
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 220
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 579
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 581
g primary_expression 568
g postfix_expression 577
g unary_expression 579
g unary_operator 580
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 581
s
a expression s 564
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 220
g expression 564
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 220
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 630
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 632
g primary_expression 619
g postfix_expression 628
g unary_expression 630
g unary_operator 631
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 632
s
a expression s 565
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 220
g expression 565
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 220
s
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 401
a postfix_expression s 273
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 275
a unary_operator s 276
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 286
a logical_or_expression s 287
a conditional_expression s 288
a assignment_expression s 617
g primary_expression 264
g postfix_expression 273
g unary_expression 275
g unary_operator 276
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 286
g logical_or_expression 287
g conditional_expression 288
g assignment_expression 617
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 602
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 602
s
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 567
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 567
s
a ( r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a ! r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
s
a ( r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a ! r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
s
a ( r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a ! r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
s
a ) r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a statement s 560
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 560
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a statement s 561
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 561
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a { s 718
s
a { s 719
s
a ; r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 611
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 611
s
a IDENTIFIER s 329
a type s 685
g type 685
s
a * r 2 type type *
a & r 2 type type *
a < r 2 type type *
a > r 2 type type *
a , r 2 type type *
s
a * r 2 type type &
a & r 2 type type &
a < r 2 type type &
a > r 2 type type &
a , r 2 type type &
s
a expression s 263
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 272
a postfix_expression s 273
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 275
a unary_operator s 276
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 286
a logical_or_expression s 287
a conditional_expression s 288
a assignment_expression s 289
a type s 290
a template_params s 613
a template_param s 292
g expression 263
g primary_expression 264
g postfix_expression 273
g unary_expression 275
g unary_operator 276
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 286
g logical_or_expression 287
g conditional_expression 288
g assignment_expression 289
g type 290
g template_params 613
g template_param 292
s
a * r 2 type type *
a & r 2 type type *
a < r 2 type type *
a VAR r 2 type type *
s
a * r 2 type type &
a & r 2 type type &
a < r 2 type type &
a VAR r 2 type type &
s
a expression s 263
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 272
a postfix_expression s 273
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 275
a unary_operator s 276
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 286
a logical_or_expression s 287
a conditional_expression s 288
a assignment_expression s 289
a type s 290
a template_params s 614
a template_param s 292
g expression 263
g primary_expression 264
g postfix_expression 273
g unary_expression 275
g unary_operator 276
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 286
g logical_or_expression 287
g conditional_expression 288
g assignment_expression 289
g type 290
g template_params 614
g template_param 292
s
a IDENTIFIER s 331
a variable_inits s 686
a variable_name_and_assign s 333
g variable_inits 686
g variable_name_and_assign 333
s
a * r 4 type type < template_params >
a & r 4 type type < template_params >
a < r 4 type type < template_params >
a VAR r 4 type type < template_params >
a FUNC r 4 type type < template_params >
s
a expression s 263
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 272
a postfix_expression s 273
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 275
a unary_operator s 276
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 286
a logical_or_expression s 287
a conditional_expression s 288
a assignment_expression s 289
a type s 290
a template_param s 615
g expression 263
g primary_expression 264
g postfix_expression 273
g unary_expression 275
g unary_operator 276
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 286
g logical_or_expression 287
g conditional_expression 288
g assignment_expression 289
g type 290
g template_param 615
s
a Ω r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a ! r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
s
a IDENTIFIER s 331
a variable_name_and_assign s 687
g variable_name_and_assign 687
s
a expression s 600
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 600
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ( s 715
s
a ( s 716
s
a ( r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a - r 3 block_statements { statements }
a ! r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
a * r 3 block_statements { statements }
a & r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
s
a WHILE r 3 block_statements { statements }
s
a ( r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a ! r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
s
a ) s 688
a func_args s 689
a single_variable_decl s 690
g func_args 689
s
a expression s 604
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 604
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 601
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 601
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a Ω r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a ! r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
s
a Ω r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a ! r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a : s 752
a , s 526
s
a : s 753
a , s 526
s
a : s 754
a , s 526
s
a : r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a : r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 724
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 724
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 737
a . s 738
a -> s 739
a ++ s 740
a -- s 741
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a : r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 568
a ( s 569
a HEX_CONST s 570
a OCTAL_CONST s 571
a BINARY_CONST s 572
a NUMBER_CONST s 573
a CHAR_CONST s 574
a STRING_CONST s 575
a IDENTIFIER s 576
a postfix_expression s 577
a function_call s 578
a ++ s 29
a -- s 30
a unary_expression s 722
a unary_operator s 580
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 568
g postfix_expression 577
g unary_expression 722
g unary_operator 580
s
a ^^ s 516
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a : r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a && s 513
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a : r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a | s 510
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a : r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ^ s 507
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a : r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 504
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a : r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 499
a != s 500
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a : r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a & r 3 equality_expression equality_expression == relational_expression
a < s 485
a > s 486
a <= s 487
a >= s 488
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a : r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a & r 3 equality_expression equality_expression != relational_expression
a < s 485
a > s 486
a <= s 487
a >= s 488
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a : r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a & r 3 relational_expression relational_expression < shift_expression
a << s 479
a >> s 480
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a : r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a & r 3 relational_expression relational_expression > shift_expression
a << s 479
a >> s 480
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a : r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a & r 3 relational_expression relational_expression <= shift_expression
a << s 479
a >> s 480
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a : r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a & r 3 relational_expression relational_expression >= shift_expression
a << s 479
a >> s 480
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a : r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a - s 473
a & r 3 shift_expression shift_expression << additive_expression
a + s 474
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a : r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a - s 473
a & r 3 shift_expression shift_expression >> additive_expression
a + s 474
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a : r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 464
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 465
a % s 466
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a : r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 464
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 465
a % s 466
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a : r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a : r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a : r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a : r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a ; r 3 variable_name_and_assign IDENTIFIER = expression
a , r 3 variable_name_and_assign IDENTIFIER = expression
s
a ; s 755
a , s 150
s
a ; r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ) s 756
a , s 365
s
a ) s 757
a , s 365
s
a ] r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ] s 758
a , s 536
s
a ] s 759
a , s 536
s
a ] s 760
a , s 536
s
a ] s 761
a , s 536
s
a ] r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a ] r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a > s 762
a , s 546
s
a > s 763
a , s 546
s
a > r 3 template_params template_params , template_param
a , r 3 template_params template_params , template_param
s
a > r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a > r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a ) r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 726
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 726
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 742
a ] r 1 unary_expression postfix_expression
a . s 743
a -> s 744
a ++ s 745
a -- s 746
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ] r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 619
a ( s 620
a HEX_CONST s 621
a OCTAL_CONST s 622
a BINARY_CONST s 623
a NUMBER_CONST s 624
a CHAR_CONST s 625
a STRING_CONST s 626
a IDENTIFIER s 627
a postfix_expression s 628
a function_call s 629
a ++ s 29
a -- s 30
a unary_expression s 730
a unary_operator s 631
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 619
g postfix_expression 628
g unary_expression 730
g unary_operator 631
s
a ] r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 517
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a ] r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 514
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a ] r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 511
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ] r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 508
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a ] r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a & s 505
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a ] r 3 binary_and_expression binary_and_expression & equality_expression
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 501
a != s 502
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a ] r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a < s 489
a > s 490
a <= s 491
a >= s 492
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a ] r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a < s 489
a > s 490
a <= s 491
a >= s 492
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a ] r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a << s 481
a >> s 482
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a ] r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a << s 481
a >> s 482
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a ] r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a << s 481
a >> s 482
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a ] r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a << s 481
a >> s 482
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a ] r 3 shift_expression shift_expression << additive_expression
a - s 475
a & r 3 shift_expression shift_expression << additive_expression
a + s 476
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a ] r 3 shift_expression shift_expression >> additive_expression
a - s 475
a & r 3 shift_expression shift_expression >> additive_expression
a + s 476
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a ] r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 467
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 468
a % s 469
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a ] r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 467
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 468
a % s 469
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a ] r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a ] r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a ] r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 725
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 725
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 747
a . s 748
a -> s 749
a ++ s 750
a -- s 751
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 651
a ( s 652
a HEX_CONST s 653
a OCTAL_CONST s 654
a BINARY_CONST s 655
a NUMBER_CONST s 656
a CHAR_CONST s 657
a STRING_CONST s 658
a IDENTIFIER s 659
a postfix_expression s 660
a function_call s 661
a ++ s 29
a -- s 30
a unary_expression s 731
a unary_operator s 663
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 651
g postfix_expression 660
g unary_expression 731
g unary_operator 663
s
a > r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 515
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a > r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 512
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a > r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 509
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a > r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 506
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 503
a > r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a & r 3 binary_and_expression binary_and_expression & equality_expression
a > r 3 binary_and_expression binary_and_expression & equality_expression
a == s 497
a != s 498
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a & r 3 equality_expression equality_expression == relational_expression
a < s 493
a > r 3 equality_expression equality_expression == relational_expression
a <= s 495
a >= s 496
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a & r 3 equality_expression equality_expression != relational_expression
a < s 493
a > r 3 equality_expression equality_expression != relational_expression
a <= s 495
a >= s 496
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a & r 3 relational_expression relational_expression < shift_expression
a << s 483
a >> s 484
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a & r 3 relational_expression relational_expression > shift_expression
a << s 483
a >> s 484
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a & r 3 relational_expression relational_expression <= shift_expression
a << s 483
a >> s 484
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a & r 3 relational_expression relational_expression >= shift_expression
a << s 483
a >> s 484
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a - s 477
a & r 3 shift_expression shift_expression << additive_expression
a + s 478
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a - s 477
a & r 3 shift_expression shift_expression >> additive_expression
a + s 478
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 470
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 471
a % s 472
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 470
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 471
a % s 472
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a < r 1 type IDENTIFIER
a > r 1 type IDENTIFIER
a , r 1 type IDENTIFIER
a :: s 443
s
a * r 3 type IDENTIFIER :: type
a & r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a > r 3 type IDENTIFIER :: type
a , r 3 type IDENTIFIER :: type
s
a * r 3 type IDENTIFIER :: type
a & r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
s
a ; s 764
a , s 548
s
a ; r 3 variable_inits variable_inits , variable_name_and_assign
a , r 3 variable_inits variable_inits , variable_name_and_assign
s
a block_statements s 736
a { s 58
g block_statements 736
s
a ) s 765
a , s 766
s
a ) r 1 func_args single_variable_decl
a , r 1 func_args single_variable_decl
s
a expression s 729
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 729
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 767
s
a IDENTIFIER s 768
s
a ) r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ) r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 728
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 728
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a ; r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a statement s 720
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statement 720
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a statement s 721
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statement 721
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a { s 769
s
a { s 770
s
a ) r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a ( r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a ! r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ) s 732
a func_args s 733
a single_variable_decl s 690
g func_args 733
s
a expression s 727
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 727
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 723
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 723
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 734
a } r 0 test_case_statements 
g test_case_statements 734
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 735
g switch_case_statements 735
s
a ( r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a ! r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
s
a ( r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a ! r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ; s 789
a , s 150
s
a ) s 790
a , s 365
s
a ) s 791
a , s 365
s
a ) s 792
a , s 365
s
a ) s 793
a , s 365
s
a ) r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ] s 794
a , s 536
s
a ] r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a block_statements s 788
a { s 90
g block_statements 788
s
a ) s 795
a , s 766
s
a test_case_statement s 778
a CASE s 779
a DEFAULT s 780
a } s 781
g test_case_statement 778
s
a CASE s 783
a } s 784
a switch_case_statement s 785
g switch_case_statement 785
s
a Ω r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a expression s 773
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 773
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 796
s
a IDENTIFIER s 799
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 775
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 775
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 798
s
a IDENTIFIER s 801
s
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 774
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 262
g expression 774
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 262
s
a IDENTIFIER s 797
s
a IDENTIFIER s 800
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 264
a ( s 265
a HEX_CONST s 266
a OCTAL_CONST s 267
a BINARY_CONST s 268
a NUMBER_CONST s 269
a CHAR_CONST s 270
a STRING_CONST s 271
a IDENTIFIER s 401
a postfix_expression s 273
a function_call s 274
a ++ s 29
a -- s 30
a unary_expression s 275
a unary_operator s 276
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 277
a additive_expression s 278
a shift_expression s 279
a relational_expression s 280
a equality_expression s 281
a binary_and_expression s 282
a binary_xor_expression s 283
a binary_or_expression s 284
a logical_and_expression s 285
a logical_xor_expression s 286
a logical_or_expression s 287
a conditional_expression s 288
a assignment_expression s 777
g primary_expression 264
g postfix_expression 273
g unary_expression 275
g unary_operator 276
g multiplicative_expression 277
g additive_expression 278
g shift_expression 279
g relational_expression 280
g equality_expression 281
g binary_and_expression 282
g binary_xor_expression 283
g binary_or_expression 284
g logical_and_expression 285
g logical_xor_expression 286
g logical_or_expression 287
g conditional_expression 288
g assignment_expression 777
s
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 771
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 771
s
a primary_expression s 237
a ( s 238
a HEX_CONST s 239
a OCTAL_CONST s 240
a BINARY_CONST s 241
a NUMBER_CONST s 242
a CHAR_CONST s 243
a STRING_CONST s 244
a IDENTIFIER s 245
a postfix_expression s 246
a function_call s 247
a ++ s 29
a -- s 30
a unary_expression s 248
a unary_operator s 249
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 250
a additive_expression s 251
a shift_expression s 252
a relational_expression s 253
a equality_expression s 254
a binary_and_expression s 255
a binary_xor_expression s 256
a binary_or_expression s 257
a logical_and_expression s 258
a logical_xor_expression s 259
a logical_or_expression s 260
a conditional_expression s 261
a assignment_expression s 776
g primary_expression 237
g postfix_expression 246
g unary_expression 248
g unary_operator 249
g multiplicative_expression 250
g additive_expression 251
g shift_expression 252
g relational_expression 253
g equality_expression 254
g binary_and_expression 255
g binary_xor_expression 256
g binary_or_expression 257
g logical_and_expression 258
g logical_xor_expression 259
g logical_or_expression 260
g conditional_expression 261
g assignment_expression 776
s
a expression s 772
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 772
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ) r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a ; s 803
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a ; r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a * r 4 type type < template_params >
a & r 4 type type < template_params >
a < r 4 type type < template_params >
a > r 4 type type < template_params >
a , r 4 type type < template_params >
s
a * r 4 type type < template_params >
a & r 4 type type < template_params >
a < r 4 type type < template_params >
a VAR r 4 type type < template_params >
s
a ; r 4 variable_decls type VAR variable_inits ;
s
a block_statements s 787
a { s 58
g block_statements 787
s
a single_variable_decl s 802
s
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 782
a } r 0 test_case_statements 
g test_case_statements 782
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 786
g switch_case_statements 786
s
a : r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ) s 839
a , s 365
s
a ] s 840
a , s 536
s
a ] s 841
a , s 536
s
a ] s 842
a , s 536
s
a ] r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a > r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a CASE r 2 test_case_statements test_case_statements test_case_statement
a DEFAULT r 2 test_case_statements test_case_statements test_case_statement
a } r 2 test_case_statements test_case_statements test_case_statement
s
a ( s 843
s
a statement s 804
a expression s 805
a block_statements s 806
a variable_decls s 807
a function_decl s 808
a output_statement s 809
a input_statement s 810
a while_loop s 811
a do_while_loop s 812
a for_loop s 813
a if_statement s 814
a else_statement s 815
a test_statement s 816
a switch_statement s 817
a jump_statement s 818
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 819
a DO s 820
a WHILE s 821
a for s 822
a IF s 823
a ELSE s 824
a TEST s 825
a { s 826
a SWITCH s 827
a OUTPUT s 828
a INPUT s 829
a CONTINUE s 830
a BREAK s 831
a RETURN s 832
a GOTO s 833
g statement 804
g expression 805
g block_statements 806
g variable_decls 807
g function_decl 808
g output_statement 809
g input_statement 810
g while_loop 811
g do_while_loop 812
g for_loop 813
g if_statement 814
g else_statement 815
g test_statement 816
g switch_statement 817
g jump_statement 818
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 819
s
a Ω r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
s
a test_case_statement s 778
a CASE s 779
a DEFAULT s 780
a } s 836
g test_case_statement 778
s
a expression s 834
a primary_expression s 195
a ( s 196
a HEX_CONST s 197
a OCTAL_CONST s 198
a BINARY_CONST s 199
a NUMBER_CONST s 200
a CHAR_CONST s 201
a STRING_CONST s 202
a IDENTIFIER s 203
a postfix_expression s 204
a function_call s 205
a ++ s 29
a -- s 30
a unary_expression s 206
a unary_operator s 207
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 208
a additive_expression s 209
a shift_expression s 210
a relational_expression s 211
a equality_expression s 212
a binary_and_expression s 213
a binary_xor_expression s 214
a binary_or_expression s 215
a logical_and_expression s 216
a logical_xor_expression s 217
a logical_or_expression s 218
a conditional_expression s 219
a assignment_expression s 220
g expression 834
g primary_expression 195
g postfix_expression 204
g unary_expression 206
g unary_operator 207
g multiplicative_expression 208
g additive_expression 209
g shift_expression 210
g relational_expression 211
g equality_expression 212
g binary_and_expression 213
g binary_xor_expression 214
g binary_or_expression 215
g logical_and_expression 216
g logical_xor_expression 217
g logical_or_expression 218
g conditional_expression 219
g assignment_expression 220
s
a Ω r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a CASE r 2 switch_case_statements switch_case_statements switch_case_statement
a } r 2 switch_case_statements switch_case_statements switch_case_statement
s
a CASE s 783
a } s 837
a switch_case_statement s 785
g switch_case_statement 785
s
a Ω r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a expression s 835
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 835
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a ; s 844
s
a ) r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a block_statements s 838
a { s 90
g block_statements 838
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ) r 3 func_args func_args , single_variable_decl
a , r 3 func_args func_args , single_variable_decl
s
a Ω r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a CASE r 2 test_case_statement DEFAULT statement
a DEFAULT r 2 test_case_statement DEFAULT statement
a } r 2 test_case_statement DEFAULT statement
s
a ; s 854
a , s 150
s
a CASE r 1 statement block_statements
a DEFAULT r 1 statement block_statements
a } r 1 statement block_statements
s
a CASE r 1 statement variable_decls
a DEFAULT r 1 statement variable_decls
a } r 1 statement variable_decls
s
a CASE r 1 statement function_decl
a DEFAULT r 1 statement function_decl
a } r 1 statement function_decl
s
a CASE r 1 statement output_statement
a DEFAULT r 1 statement output_statement
a } r 1 statement output_statement
s
a CASE r 1 statement input_statement
a DEFAULT r 1 statement input_statement
a } r 1 statement input_statement
s
a CASE r 1 statement while_loop
a DEFAULT r 1 statement while_loop
a } r 1 statement while_loop
s
a CASE r 1 statement do_while_loop
a DEFAULT r 1 statement do_while_loop
a } r 1 statement do_while_loop
s
a CASE r 1 statement for_loop
a DEFAULT r 1 statement for_loop
a } r 1 statement for_loop
s
a CASE r 1 statement if_statement
a DEFAULT r 1 statement if_statement
a } r 1 statement if_statement
s
a CASE r 1 statement else_statement
a DEFAULT r 1 statement else_statement
a } r 1 statement else_statement
s
a CASE r 1 statement test_statement
a DEFAULT r 1 statement test_statement
a } r 1 statement test_statement
s
a CASE r 1 statement switch_statement
a DEFAULT r 1 statement switch_statement
a } r 1 statement switch_statement
s
a CASE r 1 statement jump_statement
a DEFAULT r 1 statement jump_statement
a } r 1 statement jump_statement
s
a * s 177
a & s 178
a < s 179
a VAR s 857
a FUNC s 858
s
a block_statements s 853
a { s 148
g block_statements 853
s
a ( s 859
s
a ( s 860
s
a ( s 861
s
a statement s 847
a expression s 805
a block_statements s 806
a variable_decls s 807
a function_decl s 808
a output_statement s 809
a input_statement s 810
a while_loop s 811
a do_while_loop s 812
a for_loop s 813
a if_statement s 814
a else_statement s 815
a test_statement s 816
a switch_statement s 817
a jump_statement s 818
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 819
a DO s 820
a WHILE s 821
a for s 822
a IF s 823
a ELSE s 824
a TEST s 825
a { s 826
a SWITCH s 827
a OUTPUT s 828
a INPUT s 829
a CONTINUE s 830
a BREAK s 831
a RETURN s 832
a GOTO s 833
g statement 847
g expression 805
g block_statements 806
g variable_decls 807
g function_decl 808
g output_statement 809
g input_statement 810
g while_loop 811
g do_while_loop 812
g for_loop 813
g if_statement 814
g else_statement 815
g test_statement 816
g switch_statement 817
g jump_statement 818
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 819
s
a ( s 862
s
a statements s 845
a statement_list s 67
a statement s 68
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a } r 0 statements 
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statements 845
g statement_list 67
g statement 68
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a ( s 863
s
a expression s 848
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 848
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 849
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 849
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 864
s
a ; s 865
s
a expression s 850
a ; s 851
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 850
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 866
s
a : s 855
a , s 526
s
a ) s 856
a , s 365
s
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a statement s 846
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 846
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a expression s 852
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 852
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a } s 912
s
a Ω r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a CASE r 2 else_statement ELSE statement
a DEFAULT r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
s
a ; s 906
a , s 150
s
a ; s 907
a , s 150
s
a ; s 908
a , s 150
s
a CASE r 2 jump_statement RETURN ;
a DEFAULT r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
s
a ) s 909
a , s 365
s
a WHILE s 911
s
a CASE r 2 statement expression ;
a DEFAULT r 2 statement expression ;
a } r 2 statement expression ;
s
a statements s 867
a statement_list s 868
a statement s 869
a expression s 870
a block_statements s 871
a variable_decls s 872
a function_decl s 873
a output_statement s 874
a input_statement s 875
a while_loop s 876
a do_while_loop s 877
a for_loop s 878
a if_statement s 879
a else_statement s 880
a test_statement s 881
a switch_statement s 882
a jump_statement s 883
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 884
a DO s 885
a WHILE s 886
a for s 887
a IF s 888
a ELSE s 889
a CASE r 0 statements 
a TEST s 890
a { s 891
a } r 0 statements 
a SWITCH s 892
a OUTPUT s 893
a INPUT s 894
a CONTINUE s 895
a BREAK s 896
a RETURN s 897
a GOTO s 898
g statements 867
g statement_list 868
g statement 869
g expression 870
g block_statements 871
g variable_decls 872
g function_decl 873
g output_statement 874
g input_statement 875
g while_loop 876
g do_while_loop 877
g for_loop 878
g if_statement 879
g else_statement 880
g test_statement 881
g switch_statement 882
g jump_statement 883
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 884
s
a statement s 899
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statement 899
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a IDENTIFIER s 331
a variable_inits s 905
a variable_name_and_assign s 333
g variable_inits 905
g variable_name_and_assign 333
s
a IDENTIFIER s 910
s
a expression s 900
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 900
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a variable_decls s 904
a IDENTIFIER s 329
a type s 330
g variable_decls 904
g type 330
s
a expression s 901
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 901
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 902
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 902
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 903
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 903
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a CASE r 2 jump_statement CONTINUE ;
a DEFAULT r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
s
a CASE r 2 jump_statement BREAK ;
a DEFAULT r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
s
a ; s 913
s
a CASE r 4 switch_case_statement CASE expression : statements
a } r 4 switch_case_statement CASE expression : statements
s
a statement s 915
a expression s 870
a block_statements s 871
a variable_decls s 872
a function_decl s 873
a output_statement s 874
a input_statement s 875
a while_loop s 876
a do_while_loop s 877
a for_loop s 878
a if_statement s 879
a else_statement s 880
a test_statement s 881
a switch_statement s 882
a jump_statement s 883
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 884
a DO s 885
a WHILE s 886
a for s 887
a IF s 888
a ELSE s 889
a CASE r 1 statements statement_list
a TEST s 890
a { s 891
a } r 1 statements statement_list
a SWITCH s 892
a OUTPUT s 893
a INPUT s 894
a CONTINUE s 895
a BREAK s 896
a RETURN s 897
a GOTO s 898
g statement 915
g expression 870
g block_statements 871
g variable_decls 872
g function_decl 873
g output_statement 874
g input_statement 875
g while_loop 876
g do_while_loop 877
g for_loop 878
g if_statement 879
g else_statement 880
g test_statement 881
g switch_statement 882
g jump_statement 883
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 884
s
a ( r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a function_call r 1 statement_list statement
a ++ r 1 statement_list statement
a -- r 1 statement_list statement
a - r 1 statement_list statement
a ! r 1 statement_list statement
a ~ r 1 statement_list statement
a * r 1 statement_list statement
a & r 1 statement_list statement
a DO r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a IF r 1 statement_list statement
a ELSE r 1 statement_list statement
a CASE r 1 statement_list statement
a TEST r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a SWITCH r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a INPUT r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a BREAK r 1 statement_list statement
a RETURN r 1 statement_list statement
a GOTO r 1 statement_list statement
s
a ; s 923
a , s 150
s
a ( r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a function_call r 1 statement block_statements
a ++ r 1 statement block_statements
a -- r 1 statement block_statements
a - r 1 statement block_statements
a ! r 1 statement block_statements
a ~ r 1 statement block_statements
a * r 1 statement block_statements
a & r 1 statement block_statements
a DO r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a IF r 1 statement block_statements
a ELSE r 1 statement block_statements
a CASE r 1 statement block_statements
a TEST r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a SWITCH r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a INPUT r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a BREAK r 1 statement block_statements
a RETURN r 1 statement block_statements
a GOTO r 1 statement block_statements
s
a ( r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a function_call r 1 statement variable_decls
a ++ r 1 statement variable_decls
a -- r 1 statement variable_decls
a - r 1 statement variable_decls
a ! r 1 statement variable_decls
a ~ r 1 statement variable_decls
a * r 1 statement variable_decls
a & r 1 statement variable_decls
a DO r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a IF r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a CASE r 1 statement variable_decls
a TEST r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a GOTO r 1 statement variable_decls
s
a ( r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a function_call r 1 statement function_decl
a ++ r 1 statement function_decl
a -- r 1 statement function_decl
a - r 1 statement function_decl
a ! r 1 statement function_decl
a ~ r 1 statement function_decl
a * r 1 statement function_decl
a & r 1 statement function_decl
a DO r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a IF r 1 statement function_decl
a ELSE r 1 statement function_decl
a CASE r 1 statement function_decl
a TEST r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a SWITCH r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a INPUT r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a BREAK r 1 statement function_decl
a RETURN r 1 statement function_decl
a GOTO r 1 statement function_decl
s
a ( r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a function_call r 1 statement output_statement
a ++ r 1 statement output_statement
a -- r 1 statement output_statement
a - r 1 statement output_statement
a ! r 1 statement output_statement
a ~ r 1 statement output_statement
a * r 1 statement output_statement
a & r 1 statement output_statement
a DO r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a IF r 1 statement output_statement
a ELSE r 1 statement output_statement
a CASE r 1 statement output_statement
a TEST r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a SWITCH r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a INPUT r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a BREAK r 1 statement output_statement
a RETURN r 1 statement output_statement
a GOTO r 1 statement output_statement
s
a ( r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a function_call r 1 statement input_statement
a ++ r 1 statement input_statement
a -- r 1 statement input_statement
a - r 1 statement input_statement
a ! r 1 statement input_statement
a ~ r 1 statement input_statement
a * r 1 statement input_statement
a & r 1 statement input_statement
a DO r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a IF r 1 statement input_statement
a ELSE r 1 statement input_statement
a CASE r 1 statement input_statement
a TEST r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a SWITCH r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a INPUT r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a BREAK r 1 statement input_statement
a RETURN r 1 statement input_statement
a GOTO r 1 statement input_statement
s
a ( r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a function_call r 1 statement while_loop
a ++ r 1 statement while_loop
a -- r 1 statement while_loop
a - r 1 statement while_loop
a ! r 1 statement while_loop
a ~ r 1 statement while_loop
a * r 1 statement while_loop
a & r 1 statement while_loop
a DO r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a IF r 1 statement while_loop
a ELSE r 1 statement while_loop
a CASE r 1 statement while_loop
a TEST r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a SWITCH r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a INPUT r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a BREAK r 1 statement while_loop
a RETURN r 1 statement while_loop
a GOTO r 1 statement while_loop
s
a ( r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a - r 1 statement do_while_loop
a ! r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
a * r 1 statement do_while_loop
a & r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a CASE r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
s
a ( r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a function_call r 1 statement for_loop
a ++ r 1 statement for_loop
a -- r 1 statement for_loop
a - r 1 statement for_loop
a ! r 1 statement for_loop
a ~ r 1 statement for_loop
a * r 1 statement for_loop
a & r 1 statement for_loop
a DO r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a IF r 1 statement for_loop
a ELSE r 1 statement for_loop
a CASE r 1 statement for_loop
a TEST r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a SWITCH r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a INPUT r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a BREAK r 1 statement for_loop
a RETURN r 1 statement for_loop
a GOTO r 1 statement for_loop
s
a ( r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a function_call r 1 statement if_statement
a ++ r 1 statement if_statement
a -- r 1 statement if_statement
a - r 1 statement if_statement
a ! r 1 statement if_statement
a ~ r 1 statement if_statement
a * r 1 statement if_statement
a & r 1 statement if_statement
a DO r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a IF r 1 statement if_statement
a ELSE r 1 statement if_statement
a CASE r 1 statement if_statement
a TEST r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a SWITCH r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a INPUT r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a BREAK r 1 statement if_statement
a RETURN r 1 statement if_statement
a GOTO r 1 statement if_statement
s
a ( r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a function_call r 1 statement else_statement
a ++ r 1 statement else_statement
a -- r 1 statement else_statement
a - r 1 statement else_statement
a ! r 1 statement else_statement
a ~ r 1 statement else_statement
a * r 1 statement else_statement
a & r 1 statement else_statement
a DO r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a IF r 1 statement else_statement
a ELSE r 1 statement else_statement
a CASE r 1 statement else_statement
a TEST r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a SWITCH r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a INPUT r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a BREAK r 1 statement else_statement
a RETURN r 1 statement else_statement
a GOTO r 1 statement else_statement
s
a ( r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a function_call r 1 statement test_statement
a ++ r 1 statement test_statement
a -- r 1 statement test_statement
a - r 1 statement test_statement
a ! r 1 statement test_statement
a ~ r 1 statement test_statement
a * r 1 statement test_statement
a & r 1 statement test_statement
a DO r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a IF r 1 statement test_statement
a ELSE r 1 statement test_statement
a CASE r 1 statement test_statement
a TEST r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a SWITCH r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a INPUT r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a BREAK r 1 statement test_statement
a RETURN r 1 statement test_statement
a GOTO r 1 statement test_statement
s
a ( r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a function_call r 1 statement switch_statement
a ++ r 1 statement switch_statement
a -- r 1 statement switch_statement
a - r 1 statement switch_statement
a ! r 1 statement switch_statement
a ~ r 1 statement switch_statement
a * r 1 statement switch_statement
a & r 1 statement switch_statement
a DO r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a IF r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a CASE r 1 statement switch_statement
a TEST r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a GOTO r 1 statement switch_statement
s
a ( r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a function_call r 1 statement jump_statement
a ++ r 1 statement jump_statement
a -- r 1 statement jump_statement
a - r 1 statement jump_statement
a ! r 1 statement jump_statement
a ~ r 1 statement jump_statement
a * r 1 statement jump_statement
a & r 1 statement jump_statement
a DO r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a IF r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a CASE r 1 statement jump_statement
a TEST r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a GOTO r 1 statement jump_statement
s
a * s 177
a & s 178
a < s 179
a VAR s 928
a FUNC s 929
s
a block_statements s 922
a { s 148
g block_statements 922
s
a ( s 931
s
a ( s 932
s
a ( s 933
s
a statement s 916
a expression s 870
a block_statements s 871
a variable_decls s 872
a function_decl s 873
a output_statement s 874
a input_statement s 875
a while_loop s 876
a do_while_loop s 877
a for_loop s 878
a if_statement s 879
a else_statement s 880
a test_statement s 881
a switch_statement s 882
a jump_statement s 883
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 884
a DO s 885
a WHILE s 886
a for s 887
a IF s 888
a ELSE s 889
a TEST s 890
a { s 891
a SWITCH s 892
a OUTPUT s 893
a INPUT s 894
a CONTINUE s 895
a BREAK s 896
a RETURN s 897
a GOTO s 898
g statement 916
g expression 870
g block_statements 871
g variable_decls 872
g function_decl 873
g output_statement 874
g input_statement 875
g while_loop 876
g do_while_loop 877
g for_loop 878
g if_statement 879
g else_statement 880
g test_statement 881
g switch_statement 882
g jump_statement 883
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 884
s
a ( s 934
s
a statements s 914
a statement_list s 67
a statement s 68
a expression s 69
a block_statements s 70
a variable_decls s 71
a function_decl s 72
a output_statement s 73
a input_statement s 74
a while_loop s 75
a do_while_loop s 76
a for_loop s 77
a if_statement s 78
a else_statement s 79
a test_statement s 80
a switch_statement s 81
a jump_statement s 82
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 83
a DO s 84
a WHILE s 85
a for s 86
a IF s 87
a ELSE s 88
a TEST s 89
a { s 90
a } r 0 statements 
a SWITCH s 91
a OUTPUT s 92
a INPUT s 93
a CONTINUE s 94
a BREAK s 95
a RETURN s 96
a GOTO s 97
g statements 914
g statement_list 67
g statement 68
g expression 69
g block_statements 70
g variable_decls 71
g function_decl 72
g output_statement 73
g input_statement 74
g while_loop 75
g do_while_loop 76
g for_loop 77
g if_statement 78
g else_statement 79
g test_statement 80
g switch_statement 81
g jump_statement 82
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 83
s
a ( s 935
s
a expression s 918
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 918
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 919
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 919
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 936
s
a ; s 937
s
a expression s 920
a ; s 921
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 920
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 938
s
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ) s 924
a , s 365
s
a ) s 925
a , s 365
s
a ) s 926
a , s 365
s
a ) s 927
a , s 365
s
a ; s 941
s
a ; s 930
a , s 548
s
a CASE r 3 output_statement OUTPUT expression ;
a DEFAULT r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
s
a CASE r 3 input_statement INPUT expression ;
a DEFAULT r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
s
a CASE r 3 jump_statement RETURN expression ;
a DEFAULT r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
s
a statement s 917
a expression s 805
a block_statements s 806
a variable_decls s 807
a function_decl s 808
a output_statement s 809
a input_statement s 810
a while_loop s 811
a do_while_loop s 812
a for_loop s 813
a if_statement s 814
a else_statement s 815
a test_statement s 816
a switch_statement s 817
a jump_statement s 818
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 819
a DO s 820
a WHILE s 821
a for s 822
a IF s 823
a ELSE s 824
a TEST s 825
a { s 826
a SWITCH s 827
a OUTPUT s 828
a INPUT s 829
a CONTINUE s 830
a BREAK s 831
a RETURN s 832
a GOTO s 833
g statement 917
g expression 805
g block_statements 806
g variable_decls 807
g function_decl 808
g output_statement 809
g input_statement 810
g while_loop 811
g do_while_loop 812
g for_loop 813
g if_statement 814
g else_statement 815
g test_statement 816
g switch_statement 817
g jump_statement 818
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 819
s
a ( s 939
s
a ( s 940
s
a CASE r 3 block_statements { statements }
a DEFAULT r 3 block_statements { statements }
a } r 3 block_statements { statements }
s
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a DEFAULT r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
s
a } s 959
s
a ( r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a ! r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a CASE r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
s
a ( r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a ! r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a CASE r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
s
a CASE r 5 test_case_statement CASE ( expression ) statement
a DEFAULT r 5 test_case_statement CASE ( expression ) statement
a } r 5 test_case_statement CASE ( expression ) statement
s
a ; s 954
a , s 150
s
a ; s 955
a , s 150
s
a ; s 956
a , s 150
s
a ( r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a ! r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a CASE r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
s
a WHILE s 958
s
a ( r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a function_call r 2 statement expression ;
a ++ r 2 statement expression ;
a -- r 2 statement expression ;
a - r 2 statement expression ;
a ! r 2 statement expression ;
a ~ r 2 statement expression ;
a * r 2 statement expression ;
a & r 2 statement expression ;
a DO r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a IF r 2 statement expression ;
a ELSE r 2 statement expression ;
a CASE r 2 statement expression ;
a TEST r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a SWITCH r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a INPUT r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a BREAK r 2 statement expression ;
a RETURN r 2 statement expression ;
a GOTO r 2 statement expression ;
s
a statement s 942
a expression s 805
a block_statements s 806
a variable_decls s 807
a function_decl s 808
a output_statement s 809
a input_statement s 810
a while_loop s 811
a do_while_loop s 812
a for_loop s 813
a if_statement s 814
a else_statement s 815
a test_statement s 816
a switch_statement s 817
a jump_statement s 818
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 819
a DO s 820
a WHILE s 821
a for s 822
a IF s 823
a ELSE s 824
a TEST s 825
a { s 826
a SWITCH s 827
a OUTPUT s 828
a INPUT s 829
a CONTINUE s 830
a BREAK s 831
a RETURN s 832
a GOTO s 833
g statement 942
g expression 805
g block_statements 806
g variable_decls 807
g function_decl 808
g output_statement 809
g input_statement 810
g while_loop 811
g do_while_loop 812
g for_loop 813
g if_statement 814
g else_statement 815
g test_statement 816
g switch_statement 817
g jump_statement 818
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 819
s
a statement s 943
a expression s 805
a block_statements s 806
a variable_decls s 807
a function_decl s 808
a output_statement s 809
a input_statement s 810
a while_loop s 811
a do_while_loop s 812
a for_loop s 813
a if_statement s 814
a else_statement s 815
a test_statement s 816
a switch_statement s 817
a jump_statement s 818
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 819
a DO s 820
a WHILE s 821
a for s 822
a IF s 823
a ELSE s 824
a TEST s 825
a { s 826
a SWITCH s 827
a OUTPUT s 828
a INPUT s 829
a CONTINUE s 830
a BREAK s 831
a RETURN s 832
a GOTO s 833
g statement 943
g expression 805
g block_statements 806
g variable_decls 807
g function_decl 808
g output_statement 809
g input_statement 810
g while_loop 811
g do_while_loop 812
g for_loop 813
g if_statement 814
g else_statement 815
g test_statement 816
g switch_statement 817
g jump_statement 818
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 819
s
a { s 961
s
a { s 962
s
a IDENTIFIER s 331
a variable_inits s 951
a variable_name_and_assign s 333
g variable_inits 951
g variable_name_and_assign 333
s
a IDENTIFIER s 957
s
a CASE r 4 variable_decls type VAR variable_inits ;
a DEFAULT r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
s
a expression s 945
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 945
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a variable_decls s 950
a IDENTIFIER s 329
a type s 330
g variable_decls 950
g type 330
s
a expression s 946
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 946
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 947
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 947
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 948
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 948
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ( r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a ! r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a CASE r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
s
a ( r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a ! r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a CASE r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
s
a ; s 960
s
a ) s 952
a func_args s 953
a single_variable_decl s 690
g func_args 953
s
a expression s 949
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 949
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 944
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 944
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a CASE r 5 while_loop WHILE ( expression ) statement
a DEFAULT r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
s
a CASE r 5 if_statement IF ( expression ) statement
a DEFAULT r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
s
a ; s 966
a , s 150
s
a ) s 967
a , s 365
s
a ) s 968
a , s 365
s
a ) s 969
a , s 365
s
a ) s 970
a , s 365
s
a ) s 971
a , s 365
s
a ; s 976
s
a ; s 972
a , s 548
s
a block_statements s 965
a { s 826
g block_statements 965
s
a ) s 973
a , s 766
s
a ( r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a ! r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a CASE r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
s
a ( r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a ! r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a CASE r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
s
a ( r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a ! r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a CASE r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
s
a ( s 974
s
a ( s 975
s
a ( r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a - r 3 block_statements { statements }
a ! r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
a * r 3 block_statements { statements }
a & r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a CASE r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
s
a ( r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a ! r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 963
a } r 0 test_case_statements 
g test_case_statements 963
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 964
g switch_case_statements 964
s
a test_case_statement s 778
a CASE s 779
a DEFAULT s 780
a } s 984
g test_case_statement 778
s
a CASE s 783
a } s 985
a switch_case_statement s 785
g switch_case_statement 785
s
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DEFAULT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a expression s 981
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 981
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a statement s 977
a expression s 870
a block_statements s 871
a variable_decls s 872
a function_decl s 873
a output_statement s 874
a input_statement s 875
a while_loop s 876
a do_while_loop s 877
a for_loop s 878
a if_statement s 879
a else_statement s 880
a test_statement s 881
a switch_statement s 882
a jump_statement s 883
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 884
a DO s 885
a WHILE s 886
a for s 887
a IF s 888
a ELSE s 889
a TEST s 890
a { s 891
a SWITCH s 892
a OUTPUT s 893
a INPUT s 894
a CONTINUE s 895
a BREAK s 896
a RETURN s 897
a GOTO s 898
g statement 977
g expression 870
g block_statements 871
g variable_decls 872
g function_decl 873
g output_statement 874
g input_statement 875
g while_loop 876
g do_while_loop 877
g for_loop 878
g if_statement 879
g else_statement 880
g test_statement 881
g switch_statement 882
g jump_statement 883
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 884
s
a statement s 978
a expression s 870
a block_statements s 871
a variable_decls s 872
a function_decl s 873
a output_statement s 874
a input_statement s 875
a while_loop s 876
a do_while_loop s 877
a for_loop s 878
a if_statement s 879
a else_statement s 880
a test_statement s 881
a switch_statement s 882
a jump_statement s 883
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 884
a DO s 885
a WHILE s 886
a for s 887
a IF s 888
a ELSE s 889
a TEST s 890
a { s 891
a SWITCH s 892
a OUTPUT s 893
a INPUT s 894
a CONTINUE s 895
a BREAK s 896
a RETURN s 897
a GOTO s 898
g statement 978
g expression 870
g block_statements 871
g variable_decls 872
g function_decl 873
g output_statement 874
g input_statement 875
g while_loop 876
g do_while_loop 877
g for_loop 878
g if_statement 879
g else_statement 880
g test_statement 881
g switch_statement 882
g jump_statement 883
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 884
s
a { s 987
s
a { s 988
s
a ; s 989
s
a ( r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a ! r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a CASE r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
s
a block_statements s 986
a { s 826
g block_statements 986
s
a ) s 982
a func_args s 983
a single_variable_decl s 690
g func_args 983
s
a expression s 980
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 980
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a expression s 979
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 100
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 979
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ( r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a ! r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a CASE r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
s
a ( r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a ! r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a CASE r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
s
a ; s 993
a , s 150
s
a ) s 994
a , s 365
s
a ) s 995
a , s 365
s
a block_statements s 992
a { s 891
g block_statements 992
s
a ) s 996
a , s 766
s
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a DEFAULT r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
s
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DEFAULT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DEFAULT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 990
a } r 0 test_case_statements 
g test_case_statements 990
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 991
g switch_case_statements 991
s
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DEFAULT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a test_case_statement s 778
a CASE s 779
a DEFAULT s 780
a } s 999
g test_case_statement 778
s
a CASE s 783
a } s 1000
a switch_case_statement s 785
g switch_case_statement 785
s
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a expression s 998
a primary_expression s 109
a ( s 110
a HEX_CONST s 111
a OCTAL_CONST s 112
a BINARY_CONST s 113
a NUMBER_CONST s 114
a CHAR_CONST s 115
a STRING_CONST s 116
a IDENTIFIER s 117
a postfix_expression s 118
a function_call s 119
a ++ s 29
a -- s 30
a unary_expression s 120
a unary_operator s 121
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 122
a additive_expression s 123
a shift_expression s 124
a relational_expression s 125
a equality_expression s 126
a binary_and_expression s 127
a binary_xor_expression s 128
a binary_or_expression s 129
a logical_and_expression s 130
a logical_xor_expression s 131
a logical_or_expression s 132
a conditional_expression s 133
a assignment_expression s 134
g expression 998
g primary_expression 109
g postfix_expression 118
g unary_expression 120
g unary_operator 121
g multiplicative_expression 122
g additive_expression 123
g shift_expression 124
g relational_expression 125
g equality_expression 126
g binary_and_expression 127
g binary_xor_expression 128
g binary_or_expression 129
g logical_and_expression 130
g logical_xor_expression 131
g logical_or_expression 132
g conditional_expression 133
g assignment_expression 134
s
a ; s 1002
s
a statement s 997
a expression s 805
a block_statements s 806
a variable_decls s 807
a function_decl s 808
a output_statement s 809
a input_statement s 810
a while_loop s 811
a do_while_loop s 812
a for_loop s 813
a if_statement s 814
a else_statement s 815
a test_statement s 816
a switch_statement s 817
a jump_statement s 818
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 819
a DO s 820
a WHILE s 821
a for s 822
a IF s 823
a ELSE s 824
a TEST s 825
a { s 826
a SWITCH s 827
a OUTPUT s 828
a INPUT s 829
a CONTINUE s 830
a BREAK s 831
a RETURN s 832
a GOTO s 833
g statement 997
g expression 805
g block_statements 806
g variable_decls 807
g function_decl 808
g output_statement 809
g input_statement 810
g while_loop 811
g do_while_loop 812
g for_loop 813
g if_statement 814
g else_statement 815
g test_statement 816
g switch_statement 817
g jump_statement 818
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 819
s
a block_statements s 1001
a { s 891
g block_statements 1001
s
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DEFAULT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ) s 1003
a , s 365
s
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a statement s 1004
a expression s 870
a block_statements s 871
a variable_decls s 872
a function_decl s 873
a output_statement s 874
a input_statement s 875
a while_loop s 876
a do_while_loop s 877
a for_loop s 878
a if_statement s 879
a else_statement s 880
a test_statement s 881
a switch_statement s 882
a jump_statement s 883
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 884
a DO s 885
a WHILE s 886
a for s 887
a IF s 888
a ELSE s 889
a TEST s 890
a { s 891
a SWITCH s 892
a OUTPUT s 893
a INPUT s 894
a CONTINUE s 895
a BREAK s 896
a RETURN s 897
a GOTO s 898
g statement 1004
g expression 870
g block_statements 871
g variable_decls 872
g function_decl 873
g output_statement 874
g input_statement 875
g while_loop 876
g do_while_loop 877
g for_loop 878
g if_statement 879
g else_statement 880
g test_statement 881
g switch_statement 882
g jump_statement 883
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 884
s
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s