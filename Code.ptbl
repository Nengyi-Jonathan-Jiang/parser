1005
a Ω r 0 statements 
a statements s 1
a statement_list s 2
a statement s 3
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statements 1
g statement_list 2
g statement 3
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a Ω a 
s
a Ω r 1 statements statement_list
a statement s 126
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 126
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a Ω r 1 statement_list statement
a ( r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a function_call r 1 statement_list statement
a ++ r 1 statement_list statement
a -- r 1 statement_list statement
a - r 1 statement_list statement
a ! r 1 statement_list statement
a ~ r 1 statement_list statement
a * r 1 statement_list statement
a & r 1 statement_list statement
a DO r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a IF r 1 statement_list statement
a ELSE r 1 statement_list statement
a TEST r 1 statement_list statement
a { r 1 statement_list statement
a SWITCH r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a INPUT r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a BREAK r 1 statement_list statement
a RETURN r 1 statement_list statement
a GOTO r 1 statement_list statement
s
a ; s 172
a , s 173
s
a Ω r 1 statement block_statements
a ( r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a function_call r 1 statement block_statements
a ++ r 1 statement block_statements
a -- r 1 statement block_statements
a - r 1 statement block_statements
a ! r 1 statement block_statements
a ~ r 1 statement block_statements
a * r 1 statement block_statements
a & r 1 statement block_statements
a DO r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a IF r 1 statement block_statements
a ELSE r 1 statement block_statements
a TEST r 1 statement block_statements
a { r 1 statement block_statements
a SWITCH r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a INPUT r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a BREAK r 1 statement block_statements
a RETURN r 1 statement block_statements
a GOTO r 1 statement block_statements
s
a Ω r 1 statement variable_decls
a ( r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a function_call r 1 statement variable_decls
a ++ r 1 statement variable_decls
a -- r 1 statement variable_decls
a - r 1 statement variable_decls
a ! r 1 statement variable_decls
a ~ r 1 statement variable_decls
a * r 1 statement variable_decls
a & r 1 statement variable_decls
a DO r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a IF r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a TEST r 1 statement variable_decls
a { r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a GOTO r 1 statement variable_decls
s
a Ω r 1 statement function_decl
a ( r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a function_call r 1 statement function_decl
a ++ r 1 statement function_decl
a -- r 1 statement function_decl
a - r 1 statement function_decl
a ! r 1 statement function_decl
a ~ r 1 statement function_decl
a * r 1 statement function_decl
a & r 1 statement function_decl
a DO r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a IF r 1 statement function_decl
a ELSE r 1 statement function_decl
a TEST r 1 statement function_decl
a { r 1 statement function_decl
a SWITCH r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a INPUT r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a BREAK r 1 statement function_decl
a RETURN r 1 statement function_decl
a GOTO r 1 statement function_decl
s
a Ω r 1 statement output_statement
a ( r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a function_call r 1 statement output_statement
a ++ r 1 statement output_statement
a -- r 1 statement output_statement
a - r 1 statement output_statement
a ! r 1 statement output_statement
a ~ r 1 statement output_statement
a * r 1 statement output_statement
a & r 1 statement output_statement
a DO r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a IF r 1 statement output_statement
a ELSE r 1 statement output_statement
a TEST r 1 statement output_statement
a { r 1 statement output_statement
a SWITCH r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a INPUT r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a BREAK r 1 statement output_statement
a RETURN r 1 statement output_statement
a GOTO r 1 statement output_statement
s
a Ω r 1 statement input_statement
a ( r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a function_call r 1 statement input_statement
a ++ r 1 statement input_statement
a -- r 1 statement input_statement
a - r 1 statement input_statement
a ! r 1 statement input_statement
a ~ r 1 statement input_statement
a * r 1 statement input_statement
a & r 1 statement input_statement
a DO r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a IF r 1 statement input_statement
a ELSE r 1 statement input_statement
a TEST r 1 statement input_statement
a { r 1 statement input_statement
a SWITCH r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a INPUT r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a BREAK r 1 statement input_statement
a RETURN r 1 statement input_statement
a GOTO r 1 statement input_statement
s
a Ω r 1 statement while_loop
a ( r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a function_call r 1 statement while_loop
a ++ r 1 statement while_loop
a -- r 1 statement while_loop
a - r 1 statement while_loop
a ! r 1 statement while_loop
a ~ r 1 statement while_loop
a * r 1 statement while_loop
a & r 1 statement while_loop
a DO r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a IF r 1 statement while_loop
a ELSE r 1 statement while_loop
a TEST r 1 statement while_loop
a { r 1 statement while_loop
a SWITCH r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a INPUT r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a BREAK r 1 statement while_loop
a RETURN r 1 statement while_loop
a GOTO r 1 statement while_loop
s
a Ω r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a - r 1 statement do_while_loop
a ! r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
a * r 1 statement do_while_loop
a & r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a { r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
s
a Ω r 1 statement for_loop
a ( r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a function_call r 1 statement for_loop
a ++ r 1 statement for_loop
a -- r 1 statement for_loop
a - r 1 statement for_loop
a ! r 1 statement for_loop
a ~ r 1 statement for_loop
a * r 1 statement for_loop
a & r 1 statement for_loop
a DO r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a IF r 1 statement for_loop
a ELSE r 1 statement for_loop
a TEST r 1 statement for_loop
a { r 1 statement for_loop
a SWITCH r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a INPUT r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a BREAK r 1 statement for_loop
a RETURN r 1 statement for_loop
a GOTO r 1 statement for_loop
s
a Ω r 1 statement if_statement
a ( r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a function_call r 1 statement if_statement
a ++ r 1 statement if_statement
a -- r 1 statement if_statement
a - r 1 statement if_statement
a ! r 1 statement if_statement
a ~ r 1 statement if_statement
a * r 1 statement if_statement
a & r 1 statement if_statement
a DO r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a IF r 1 statement if_statement
a ELSE r 1 statement if_statement
a TEST r 1 statement if_statement
a { r 1 statement if_statement
a SWITCH r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a INPUT r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a BREAK r 1 statement if_statement
a RETURN r 1 statement if_statement
a GOTO r 1 statement if_statement
s
a Ω r 1 statement else_statement
a ( r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a function_call r 1 statement else_statement
a ++ r 1 statement else_statement
a -- r 1 statement else_statement
a - r 1 statement else_statement
a ! r 1 statement else_statement
a ~ r 1 statement else_statement
a * r 1 statement else_statement
a & r 1 statement else_statement
a DO r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a IF r 1 statement else_statement
a ELSE r 1 statement else_statement
a TEST r 1 statement else_statement
a { r 1 statement else_statement
a SWITCH r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a INPUT r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a BREAK r 1 statement else_statement
a RETURN r 1 statement else_statement
a GOTO r 1 statement else_statement
s
a Ω r 1 statement test_statement
a ( r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a function_call r 1 statement test_statement
a ++ r 1 statement test_statement
a -- r 1 statement test_statement
a - r 1 statement test_statement
a ! r 1 statement test_statement
a ~ r 1 statement test_statement
a * r 1 statement test_statement
a & r 1 statement test_statement
a DO r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a IF r 1 statement test_statement
a ELSE r 1 statement test_statement
a TEST r 1 statement test_statement
a { r 1 statement test_statement
a SWITCH r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a INPUT r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a BREAK r 1 statement test_statement
a RETURN r 1 statement test_statement
a GOTO r 1 statement test_statement
s
a Ω r 1 statement switch_statement
a ( r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a function_call r 1 statement switch_statement
a ++ r 1 statement switch_statement
a -- r 1 statement switch_statement
a - r 1 statement switch_statement
a ! r 1 statement switch_statement
a ~ r 1 statement switch_statement
a * r 1 statement switch_statement
a & r 1 statement switch_statement
a DO r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a IF r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a TEST r 1 statement switch_statement
a { r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a GOTO r 1 statement switch_statement
s
a Ω r 1 statement jump_statement
a ( r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a function_call r 1 statement jump_statement
a ++ r 1 statement jump_statement
a -- r 1 statement jump_statement
a - r 1 statement jump_statement
a ! r 1 statement jump_statement
a ~ r 1 statement jump_statement
a * r 1 statement jump_statement
a & r 1 statement jump_statement
a DO r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a IF r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a TEST r 1 statement jump_statement
a { r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a GOTO r 1 statement jump_statement
s
a ; r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 66
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 66
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ; r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ; r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ; r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ; r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ; r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ; r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ; r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 type IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a :: s 181
a VAR r 1 type IDENTIFIER
a FUNC r 1 type IDENTIFIER
s
a ; r 1 unary_expression postfix_expression
a [ s 150
a . s 151
a -> s 152
a ++ s 153
a -- s 154
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ; r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ( r 1 unary_operator ++
a HEX_CONST r 1 unary_operator ++
a OCTAL_CONST r 1 unary_operator ++
a BINARY_CONST r 1 unary_operator ++
a NUMBER_CONST r 1 unary_operator ++
a CHAR_CONST r 1 unary_operator ++
a STRING_CONST r 1 unary_operator ++
a IDENTIFIER r 1 unary_operator ++
a function_call r 1 unary_operator ++
a ++ r 1 unary_operator ++
a -- r 1 unary_operator ++
a - r 1 unary_operator ++
a ! r 1 unary_operator ++
a ~ r 1 unary_operator ++
a * r 1 unary_operator ++
a & r 1 unary_operator ++
s
a ( r 1 unary_operator --
a HEX_CONST r 1 unary_operator --
a OCTAL_CONST r 1 unary_operator --
a BINARY_CONST r 1 unary_operator --
a NUMBER_CONST r 1 unary_operator --
a CHAR_CONST r 1 unary_operator --
a STRING_CONST r 1 unary_operator --
a IDENTIFIER r 1 unary_operator --
a function_call r 1 unary_operator --
a ++ r 1 unary_operator --
a -- r 1 unary_operator --
a - r 1 unary_operator --
a ! r 1 unary_operator --
a ~ r 1 unary_operator --
a * r 1 unary_operator --
a & r 1 unary_operator --
s
a ; r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 135
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 135
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 132
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 133
a unary_operator s 134
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 18
g postfix_expression 132
g unary_expression 133
g unary_operator 134
s
a ( r 1 unary_operator -
a HEX_CONST r 1 unary_operator -
a OCTAL_CONST r 1 unary_operator -
a BINARY_CONST r 1 unary_operator -
a NUMBER_CONST r 1 unary_operator -
a CHAR_CONST r 1 unary_operator -
a STRING_CONST r 1 unary_operator -
a IDENTIFIER r 1 unary_operator -
a function_call r 1 unary_operator -
a ++ r 1 unary_operator -
a -- r 1 unary_operator -
a - r 1 unary_operator -
a ! r 1 unary_operator -
a ~ r 1 unary_operator -
a * r 1 unary_operator -
a & r 1 unary_operator -
s
a ( r 1 unary_operator !
a HEX_CONST r 1 unary_operator !
a OCTAL_CONST r 1 unary_operator !
a BINARY_CONST r 1 unary_operator !
a NUMBER_CONST r 1 unary_operator !
a CHAR_CONST r 1 unary_operator !
a STRING_CONST r 1 unary_operator !
a IDENTIFIER r 1 unary_operator !
a function_call r 1 unary_operator !
a ++ r 1 unary_operator !
a -- r 1 unary_operator !
a - r 1 unary_operator !
a ! r 1 unary_operator !
a ~ r 1 unary_operator !
a * r 1 unary_operator !
a & r 1 unary_operator !
s
a ( r 1 unary_operator ~
a HEX_CONST r 1 unary_operator ~
a OCTAL_CONST r 1 unary_operator ~
a BINARY_CONST r 1 unary_operator ~
a NUMBER_CONST r 1 unary_operator ~
a CHAR_CONST r 1 unary_operator ~
a STRING_CONST r 1 unary_operator ~
a IDENTIFIER r 1 unary_operator ~
a function_call r 1 unary_operator ~
a ++ r 1 unary_operator ~
a -- r 1 unary_operator ~
a - r 1 unary_operator ~
a ! r 1 unary_operator ~
a ~ r 1 unary_operator ~
a * r 1 unary_operator ~
a & r 1 unary_operator ~
s
a ( r 1 unary_operator *
a HEX_CONST r 1 unary_operator *
a OCTAL_CONST r 1 unary_operator *
a BINARY_CONST r 1 unary_operator *
a NUMBER_CONST r 1 unary_operator *
a CHAR_CONST r 1 unary_operator *
a STRING_CONST r 1 unary_operator *
a IDENTIFIER r 1 unary_operator *
a function_call r 1 unary_operator *
a ++ r 1 unary_operator *
a -- r 1 unary_operator *
a - r 1 unary_operator *
a ! r 1 unary_operator *
a ~ r 1 unary_operator *
a * r 1 unary_operator *
a & r 1 unary_operator *
s
a ( r 1 unary_operator &
a HEX_CONST r 1 unary_operator &
a OCTAL_CONST r 1 unary_operator &
a BINARY_CONST r 1 unary_operator &
a NUMBER_CONST r 1 unary_operator &
a CHAR_CONST r 1 unary_operator &
a STRING_CONST r 1 unary_operator &
a IDENTIFIER r 1 unary_operator &
a function_call r 1 unary_operator &
a ++ r 1 unary_operator &
a -- r 1 unary_operator &
a - r 1 unary_operator &
a ! r 1 unary_operator &
a ~ r 1 unary_operator &
a * r 1 unary_operator &
a & r 1 unary_operator &
s
a ; r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a * s 155
a & r 1 additive_expression multiplicative_expression
a / s 156
a % s 157
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a ; r 1 shift_expression additive_expression
a - s 170
a & r 1 shift_expression additive_expression
a + s 171
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a ; r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a << s 163
a >> s 164
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a ; r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a < s 159
a > s 160
a <= s 161
a >= s 162
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a ; r 1 binary_and_expression equality_expression
a & r 1 binary_and_expression equality_expression
a == s 174
a != s 175
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a ; r 1 binary_xor_expression binary_and_expression
a & s 149
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ; r 1 binary_or_expression binary_xor_expression
a ^ s 188
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a ; r 1 logical_and_expression binary_or_expression
a | s 182
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a ; r 1 logical_xor_expression logical_and_expression
a && s 158
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ; r 1 logical_or_expression logical_xor_expression
a ^^ s 180
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a ; r 1 conditional_expression logical_or_expression
a || s 185
a ? s 186
a , r 1 conditional_expression logical_or_expression
s
a ; r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a ; r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a * s 165
a & s 166
a < s 167
a VAR s 168
a FUNC s 169
s
a block_statements s 147
a { s 148
g block_statements 147
s
a ( s 179
s
a ( s 187
s
a ( s 177
s
a statement s 125
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 125
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a ( s 176
s
a statements s 93
a statement_list s 94
a statement s 95
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a } r 0 statements 
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statements 93
g statement_list 94
g statement 95
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a ( s 184
s
a expression s 131
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 131
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 130
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 130
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 178
s
a ; s 183
s
a expression s 127
a ; s 128
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 127
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 189
s
a ) s 355
a , s 356
s
a ) r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 190
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 190
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ) r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ) r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ) r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ) r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ) r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ) r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ) r 1 unary_expression postfix_expression
a [ s 336
a . s 337
a -> s 338
a ++ s 339
a -- s 340
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ) r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ) r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 325
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 325
s
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 306
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 307
a unary_operator s 308
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 67
g postfix_expression 306
g unary_expression 307
g unary_operator 308
s
a ) r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a * s 341
a & r 1 additive_expression multiplicative_expression
a / s 342
a % s 343
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a ) r 1 shift_expression additive_expression
a - s 353
a & r 1 shift_expression additive_expression
a + s 354
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a ) r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a << s 349
a >> s 350
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a ) r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a < s 345
a > s 346
a <= s 347
a >= s 348
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a ) r 1 binary_and_expression equality_expression
a & r 1 binary_and_expression equality_expression
a == s 361
a != s 362
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a ) r 1 binary_xor_expression binary_and_expression
a & s 335
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ) r 1 binary_or_expression binary_xor_expression
a ^ s 374
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a ) r 1 logical_and_expression binary_or_expression
a | s 368
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a ) r 1 logical_xor_expression logical_and_expression
a && s 344
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ) r 1 logical_or_expression logical_xor_expression
a ^^ s 367
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a ) r 1 conditional_expression logical_or_expression
a || s 371
a ? s 372
a , r 1 conditional_expression logical_or_expression
s
a ) r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a ) r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a } s 378
s
a statement s 225
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a } r 1 statements statement_list
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statement 225
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a ( r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a function_call r 1 statement_list statement
a ++ r 1 statement_list statement
a -- r 1 statement_list statement
a - r 1 statement_list statement
a ! r 1 statement_list statement
a ~ r 1 statement_list statement
a * r 1 statement_list statement
a & r 1 statement_list statement
a DO r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a IF r 1 statement_list statement
a ELSE r 1 statement_list statement
a TEST r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a SWITCH r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a INPUT r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a BREAK r 1 statement_list statement
a RETURN r 1 statement_list statement
a GOTO r 1 statement_list statement
s
a ; s 357
a , s 173
s
a ( r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a function_call r 1 statement block_statements
a ++ r 1 statement block_statements
a -- r 1 statement block_statements
a - r 1 statement block_statements
a ! r 1 statement block_statements
a ~ r 1 statement block_statements
a * r 1 statement block_statements
a & r 1 statement block_statements
a DO r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a IF r 1 statement block_statements
a ELSE r 1 statement block_statements
a TEST r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a SWITCH r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a INPUT r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a BREAK r 1 statement block_statements
a RETURN r 1 statement block_statements
a GOTO r 1 statement block_statements
s
a ( r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a function_call r 1 statement variable_decls
a ++ r 1 statement variable_decls
a -- r 1 statement variable_decls
a - r 1 statement variable_decls
a ! r 1 statement variable_decls
a ~ r 1 statement variable_decls
a * r 1 statement variable_decls
a & r 1 statement variable_decls
a DO r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a IF r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a TEST r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a GOTO r 1 statement variable_decls
s
a ( r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a function_call r 1 statement function_decl
a ++ r 1 statement function_decl
a -- r 1 statement function_decl
a - r 1 statement function_decl
a ! r 1 statement function_decl
a ~ r 1 statement function_decl
a * r 1 statement function_decl
a & r 1 statement function_decl
a DO r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a IF r 1 statement function_decl
a ELSE r 1 statement function_decl
a TEST r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a SWITCH r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a INPUT r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a BREAK r 1 statement function_decl
a RETURN r 1 statement function_decl
a GOTO r 1 statement function_decl
s
a ( r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a function_call r 1 statement output_statement
a ++ r 1 statement output_statement
a -- r 1 statement output_statement
a - r 1 statement output_statement
a ! r 1 statement output_statement
a ~ r 1 statement output_statement
a * r 1 statement output_statement
a & r 1 statement output_statement
a DO r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a IF r 1 statement output_statement
a ELSE r 1 statement output_statement
a TEST r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a SWITCH r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a INPUT r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a BREAK r 1 statement output_statement
a RETURN r 1 statement output_statement
a GOTO r 1 statement output_statement
s
a ( r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a function_call r 1 statement input_statement
a ++ r 1 statement input_statement
a -- r 1 statement input_statement
a - r 1 statement input_statement
a ! r 1 statement input_statement
a ~ r 1 statement input_statement
a * r 1 statement input_statement
a & r 1 statement input_statement
a DO r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a IF r 1 statement input_statement
a ELSE r 1 statement input_statement
a TEST r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a SWITCH r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a INPUT r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a BREAK r 1 statement input_statement
a RETURN r 1 statement input_statement
a GOTO r 1 statement input_statement
s
a ( r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a function_call r 1 statement while_loop
a ++ r 1 statement while_loop
a -- r 1 statement while_loop
a - r 1 statement while_loop
a ! r 1 statement while_loop
a ~ r 1 statement while_loop
a * r 1 statement while_loop
a & r 1 statement while_loop
a DO r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a IF r 1 statement while_loop
a ELSE r 1 statement while_loop
a TEST r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a SWITCH r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a INPUT r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a BREAK r 1 statement while_loop
a RETURN r 1 statement while_loop
a GOTO r 1 statement while_loop
s
a ( r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a - r 1 statement do_while_loop
a ! r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
a * r 1 statement do_while_loop
a & r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
s
a ( r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a function_call r 1 statement for_loop
a ++ r 1 statement for_loop
a -- r 1 statement for_loop
a - r 1 statement for_loop
a ! r 1 statement for_loop
a ~ r 1 statement for_loop
a * r 1 statement for_loop
a & r 1 statement for_loop
a DO r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a IF r 1 statement for_loop
a ELSE r 1 statement for_loop
a TEST r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a SWITCH r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a INPUT r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a BREAK r 1 statement for_loop
a RETURN r 1 statement for_loop
a GOTO r 1 statement for_loop
s
a ( r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a function_call r 1 statement if_statement
a ++ r 1 statement if_statement
a -- r 1 statement if_statement
a - r 1 statement if_statement
a ! r 1 statement if_statement
a ~ r 1 statement if_statement
a * r 1 statement if_statement
a & r 1 statement if_statement
a DO r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a IF r 1 statement if_statement
a ELSE r 1 statement if_statement
a TEST r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a SWITCH r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a INPUT r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a BREAK r 1 statement if_statement
a RETURN r 1 statement if_statement
a GOTO r 1 statement if_statement
s
a ( r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a function_call r 1 statement else_statement
a ++ r 1 statement else_statement
a -- r 1 statement else_statement
a - r 1 statement else_statement
a ! r 1 statement else_statement
a ~ r 1 statement else_statement
a * r 1 statement else_statement
a & r 1 statement else_statement
a DO r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a IF r 1 statement else_statement
a ELSE r 1 statement else_statement
a TEST r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a SWITCH r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a INPUT r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a BREAK r 1 statement else_statement
a RETURN r 1 statement else_statement
a GOTO r 1 statement else_statement
s
a ( r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a function_call r 1 statement test_statement
a ++ r 1 statement test_statement
a -- r 1 statement test_statement
a - r 1 statement test_statement
a ! r 1 statement test_statement
a ~ r 1 statement test_statement
a * r 1 statement test_statement
a & r 1 statement test_statement
a DO r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a IF r 1 statement test_statement
a ELSE r 1 statement test_statement
a TEST r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a SWITCH r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a INPUT r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a BREAK r 1 statement test_statement
a RETURN r 1 statement test_statement
a GOTO r 1 statement test_statement
s
a ( r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a function_call r 1 statement switch_statement
a ++ r 1 statement switch_statement
a -- r 1 statement switch_statement
a - r 1 statement switch_statement
a ! r 1 statement switch_statement
a ~ r 1 statement switch_statement
a * r 1 statement switch_statement
a & r 1 statement switch_statement
a DO r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a IF r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a TEST r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a GOTO r 1 statement switch_statement
s
a ( r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a function_call r 1 statement jump_statement
a ++ r 1 statement jump_statement
a -- r 1 statement jump_statement
a - r 1 statement jump_statement
a ! r 1 statement jump_statement
a ~ r 1 statement jump_statement
a * r 1 statement jump_statement
a & r 1 statement jump_statement
a DO r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a IF r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a TEST r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a GOTO r 1 statement jump_statement
s
a * s 165
a & s 166
a < s 167
a VAR s 351
a FUNC s 352
s
a block_statements s 334
a { s 148
g block_statements 334
s
a ( s 366
s
a ( s 373
s
a ( s 364
s
a statement s 224
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statement 224
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a ( s 363
s
a statements s 222
a statement_list s 94
a statement s 95
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a } r 0 statements 
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statements 222
g statement_list 94
g statement 95
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a ( s 370
s
a expression s 229
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 229
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 228
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 228
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 365
s
a ; s 369
s
a expression s 226
a ; s 227
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 226
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 375
s
a Ω r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a ! r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
s
a Ω r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a ! r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
s
a ; s 358
a , s 173
s
a Ω r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a ! r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
s
a ; r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ; s 359
a , s 173
s
a ; s 360
a , s 173
s
a ; r 1 unary_expression postfix_expression
a [ s 150
a . s 151
a -> s 152
a ++ s 153
a -- s 154
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ; r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 132
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 309
a unary_operator s 134
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 18
g postfix_expression 132
g unary_expression 309
g unary_operator 134
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 231
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 231
s
a ( r 1 assignment_operator =
a HEX_CONST r 1 assignment_operator =
a OCTAL_CONST r 1 assignment_operator =
a BINARY_CONST r 1 assignment_operator =
a NUMBER_CONST r 1 assignment_operator =
a CHAR_CONST r 1 assignment_operator =
a STRING_CONST r 1 assignment_operator =
a IDENTIFIER r 1 assignment_operator =
a function_call r 1 assignment_operator =
a ++ r 1 assignment_operator =
a -- r 1 assignment_operator =
a - r 1 assignment_operator =
a ! r 1 assignment_operator =
a ~ r 1 assignment_operator =
a * r 1 assignment_operator =
a & r 1 assignment_operator =
s
a ( r 1 assignment_operator *=
a HEX_CONST r 1 assignment_operator *=
a OCTAL_CONST r 1 assignment_operator *=
a BINARY_CONST r 1 assignment_operator *=
a NUMBER_CONST r 1 assignment_operator *=
a CHAR_CONST r 1 assignment_operator *=
a STRING_CONST r 1 assignment_operator *=
a IDENTIFIER r 1 assignment_operator *=
a function_call r 1 assignment_operator *=
a ++ r 1 assignment_operator *=
a -- r 1 assignment_operator *=
a - r 1 assignment_operator *=
a ! r 1 assignment_operator *=
a ~ r 1 assignment_operator *=
a * r 1 assignment_operator *=
a & r 1 assignment_operator *=
s
a ( r 1 assignment_operator /=
a HEX_CONST r 1 assignment_operator /=
a OCTAL_CONST r 1 assignment_operator /=
a BINARY_CONST r 1 assignment_operator /=
a NUMBER_CONST r 1 assignment_operator /=
a CHAR_CONST r 1 assignment_operator /=
a STRING_CONST r 1 assignment_operator /=
a IDENTIFIER r 1 assignment_operator /=
a function_call r 1 assignment_operator /=
a ++ r 1 assignment_operator /=
a -- r 1 assignment_operator /=
a - r 1 assignment_operator /=
a ! r 1 assignment_operator /=
a ~ r 1 assignment_operator /=
a * r 1 assignment_operator /=
a & r 1 assignment_operator /=
s
a ( r 1 assignment_operator %=
a HEX_CONST r 1 assignment_operator %=
a OCTAL_CONST r 1 assignment_operator %=
a BINARY_CONST r 1 assignment_operator %=
a NUMBER_CONST r 1 assignment_operator %=
a CHAR_CONST r 1 assignment_operator %=
a STRING_CONST r 1 assignment_operator %=
a IDENTIFIER r 1 assignment_operator %=
a function_call r 1 assignment_operator %=
a ++ r 1 assignment_operator %=
a -- r 1 assignment_operator %=
a - r 1 assignment_operator %=
a ! r 1 assignment_operator %=
a ~ r 1 assignment_operator %=
a * r 1 assignment_operator %=
a & r 1 assignment_operator %=
s
a ( r 1 assignment_operator +=
a HEX_CONST r 1 assignment_operator +=
a OCTAL_CONST r 1 assignment_operator +=
a BINARY_CONST r 1 assignment_operator +=
a NUMBER_CONST r 1 assignment_operator +=
a CHAR_CONST r 1 assignment_operator +=
a STRING_CONST r 1 assignment_operator +=
a IDENTIFIER r 1 assignment_operator +=
a function_call r 1 assignment_operator +=
a ++ r 1 assignment_operator +=
a -- r 1 assignment_operator +=
a - r 1 assignment_operator +=
a ! r 1 assignment_operator +=
a ~ r 1 assignment_operator +=
a * r 1 assignment_operator +=
a & r 1 assignment_operator +=
s
a ( r 1 assignment_operator -=
a HEX_CONST r 1 assignment_operator -=
a OCTAL_CONST r 1 assignment_operator -=
a BINARY_CONST r 1 assignment_operator -=
a NUMBER_CONST r 1 assignment_operator -=
a CHAR_CONST r 1 assignment_operator -=
a STRING_CONST r 1 assignment_operator -=
a IDENTIFIER r 1 assignment_operator -=
a function_call r 1 assignment_operator -=
a ++ r 1 assignment_operator -=
a -- r 1 assignment_operator -=
a - r 1 assignment_operator -=
a ! r 1 assignment_operator -=
a ~ r 1 assignment_operator -=
a * r 1 assignment_operator -=
a & r 1 assignment_operator -=
s
a ( r 1 assignment_operator <<=
a HEX_CONST r 1 assignment_operator <<=
a OCTAL_CONST r 1 assignment_operator <<=
a BINARY_CONST r 1 assignment_operator <<=
a NUMBER_CONST r 1 assignment_operator <<=
a CHAR_CONST r 1 assignment_operator <<=
a STRING_CONST r 1 assignment_operator <<=
a IDENTIFIER r 1 assignment_operator <<=
a function_call r 1 assignment_operator <<=
a ++ r 1 assignment_operator <<=
a -- r 1 assignment_operator <<=
a - r 1 assignment_operator <<=
a ! r 1 assignment_operator <<=
a ~ r 1 assignment_operator <<=
a * r 1 assignment_operator <<=
a & r 1 assignment_operator <<=
s
a ( r 1 assignment_operator >>=
a HEX_CONST r 1 assignment_operator >>=
a OCTAL_CONST r 1 assignment_operator >>=
a BINARY_CONST r 1 assignment_operator >>=
a NUMBER_CONST r 1 assignment_operator >>=
a CHAR_CONST r 1 assignment_operator >>=
a STRING_CONST r 1 assignment_operator >>=
a IDENTIFIER r 1 assignment_operator >>=
a function_call r 1 assignment_operator >>=
a ++ r 1 assignment_operator >>=
a -- r 1 assignment_operator >>=
a - r 1 assignment_operator >>=
a ! r 1 assignment_operator >>=
a ~ r 1 assignment_operator >>=
a * r 1 assignment_operator >>=
a & r 1 assignment_operator >>=
s
a ( r 1 assignment_operator &=
a HEX_CONST r 1 assignment_operator &=
a OCTAL_CONST r 1 assignment_operator &=
a BINARY_CONST r 1 assignment_operator &=
a NUMBER_CONST r 1 assignment_operator &=
a CHAR_CONST r 1 assignment_operator &=
a STRING_CONST r 1 assignment_operator &=
a IDENTIFIER r 1 assignment_operator &=
a function_call r 1 assignment_operator &=
a ++ r 1 assignment_operator &=
a -- r 1 assignment_operator &=
a - r 1 assignment_operator &=
a ! r 1 assignment_operator &=
a ~ r 1 assignment_operator &=
a * r 1 assignment_operator &=
a & r 1 assignment_operator &=
s
a ( r 1 assignment_operator ^=
a HEX_CONST r 1 assignment_operator ^=
a OCTAL_CONST r 1 assignment_operator ^=
a BINARY_CONST r 1 assignment_operator ^=
a NUMBER_CONST r 1 assignment_operator ^=
a CHAR_CONST r 1 assignment_operator ^=
a STRING_CONST r 1 assignment_operator ^=
a IDENTIFIER r 1 assignment_operator ^=
a function_call r 1 assignment_operator ^=
a ++ r 1 assignment_operator ^=
a -- r 1 assignment_operator ^=
a - r 1 assignment_operator ^=
a ! r 1 assignment_operator ^=
a ~ r 1 assignment_operator ^=
a * r 1 assignment_operator ^=
a & r 1 assignment_operator ^=
s
a ( r 1 assignment_operator |=
a HEX_CONST r 1 assignment_operator |=
a OCTAL_CONST r 1 assignment_operator |=
a BINARY_CONST r 1 assignment_operator |=
a NUMBER_CONST r 1 assignment_operator |=
a CHAR_CONST r 1 assignment_operator |=
a STRING_CONST r 1 assignment_operator |=
a IDENTIFIER r 1 assignment_operator |=
a function_call r 1 assignment_operator |=
a ++ r 1 assignment_operator |=
a -- r 1 assignment_operator |=
a - r 1 assignment_operator |=
a ! r 1 assignment_operator |=
a ~ r 1 assignment_operator |=
a * r 1 assignment_operator |=
a & r 1 assignment_operator |=
s
a WHILE s 376
s
a statements s 223
a statement_list s 94
a statement s 95
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a } r 0 statements 
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statements 223
g statement_list 94
g statement 95
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 311
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 311
s
a expression s 279
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 279
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 379
s
a IDENTIFIER s 380
s
a ; r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ; r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 323
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 232
g postfix_expression 241
g unary_expression 323
g unary_operator 244
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 324
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 232
g postfix_expression 241
g unary_expression 324
g unary_operator 244
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 322
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 232
g postfix_expression 241
g unary_expression 322
g unary_operator 244
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 247
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 247
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 317
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 317
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 315
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 315
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 314
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 314
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 316
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 316
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 318
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 318
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 319
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 319
s
a * r 2 type type *
a & r 2 type type *
a < r 2 type type *
a VAR r 2 type type *
a FUNC r 2 type type *
s
a * r 2 type type &
a & r 2 type type &
a < r 2 type type &
a VAR r 2 type type &
a FUNC r 2 type type &
s
a expression s 249
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 258
a postfix_expression s 259
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 261
a unary_operator s 262
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 272
a logical_or_expression s 273
a conditional_expression s 274
a assignment_expression s 275
a type s 276
a template_params s 277
a template_param s 278
g expression 249
g primary_expression 250
g postfix_expression 259
g unary_expression 261
g unary_operator 262
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 272
g logical_or_expression 273
g conditional_expression 274
g assignment_expression 275
g type 276
g template_params 277
g template_param 278
s
a IDENTIFIER s 331
a variable_inits s 332
a variable_name_and_assign s 333
g variable_inits 332
g variable_name_and_assign 333
s
a IDENTIFIER s 377
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 320
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 320
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 321
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 321
s
a Ω r 2 statement expression ;
a ( r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a function_call r 2 statement expression ;
a ++ r 2 statement expression ;
a -- r 2 statement expression ;
a - r 2 statement expression ;
a ! r 2 statement expression ;
a ~ r 2 statement expression ;
a * r 2 statement expression ;
a & r 2 statement expression ;
a DO r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a IF r 2 statement expression ;
a ELSE r 2 statement expression ;
a TEST r 2 statement expression ;
a { r 2 statement expression ;
a SWITCH r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a INPUT r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a BREAK r 2 statement expression ;
a RETURN r 2 statement expression ;
a GOTO r 2 statement expression ;
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 230
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 230
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 313
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 313
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 312
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 312
s
a expression s 191
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 191
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a expression s 192
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 192
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a Ω r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a ! r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
s
a expression s 193
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 193
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 246
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 246
s
a IDENTIFIER s 326
a type s 327
g type 327
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 248
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 248
s
a Ω r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a ! r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
s
a expression s 194
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 194
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 245
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 245
s
a expression s 195
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 221
g expression 195
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 221
s
a variable_decls s 328
a IDENTIFIER s 329
a type s 330
g variable_decls 328
g type 330
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 243
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 310
g primary_expression 232
g postfix_expression 241
g unary_expression 243
g unary_operator 244
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 310
s
a ; s 381
s
a ) s 509
a , s 356
s
a ) s 510
a , s 356
s
a ) s 511
a , s 356
s
a ) s 512
a , s 356
s
a ) s 513
a , s 356
s
a : s 514
a , s 515
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 382
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 382
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 446
a . s 447
a -> s 448
a ++ s 449
a -- s 450
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a : r 1 multiplicative_expression unary_expression
a assignment_operator s 438
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 438
s
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 412
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 413
a unary_operator s 414
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 196
g postfix_expression 412
g unary_expression 413
g unary_operator 414
s
a - r 1 additive_expression multiplicative_expression
a * s 466
a & r 1 additive_expression multiplicative_expression
a / s 467
a % s 468
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a : r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a - s 503
a & r 1 shift_expression additive_expression
a + s 504
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a : r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a & r 1 relational_expression shift_expression
a << s 490
a >> s 491
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a : r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a & r 1 equality_expression relational_expression
a < s 478
a > s 479
a <= s 480
a >= s 481
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a : r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a & r 1 binary_and_expression equality_expression
a == s 522
a != s 523
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a : r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a & s 443
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a : r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ^ s 547
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a : r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a | s 532
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a : r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a && s 475
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a : r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ^^ s 528
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a : r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a || s 535
a ? s 536
a : r 1 conditional_expression logical_or_expression
a , r 1 conditional_expression logical_or_expression
s
a : r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a : r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a } s 552
s
a } s 553
s
a ( r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a ! r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
s
a ( r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a ! r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
s
a ; s 516
a , s 173
s
a ( r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a ! r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
s
a ; s 517
a , s 173
s
a ; s 518
a , s 173
s
a ; r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a ; r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a ; r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 385
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 385
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ; r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ; r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ; r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ; r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ; r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ; r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ; r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ; r 1 unary_expression postfix_expression
a [ s 461
a . s 462
a -> s 463
a ++ s 464
a -- s 465
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ; r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ; r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 232
a ( s 233
a HEX_CONST s 234
a OCTAL_CONST s 235
a BINARY_CONST s 236
a NUMBER_CONST s 237
a CHAR_CONST s 238
a STRING_CONST s 239
a IDENTIFIER s 240
a postfix_expression s 241
a function_call s 242
a ++ s 29
a -- s 30
a unary_expression s 437
a unary_operator s 244
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 232
g postfix_expression 241
g unary_expression 437
g unary_operator 244
s
a ; r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 180
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a ; r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 158
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a ; r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 182
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ; r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 188
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a > r 1 template_param expression
a , r 1 template_param expression
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 384
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 384
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 type IDENTIFIER
a > r 1 type IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 type IDENTIFIER
a :: s 531
s
a [ s 456
a . s 457
a -> s 458
a ++ s 459
a -- s 460
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 440
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 440
s
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 418
a postfix_expression s 419
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 420
a unary_operator s 421
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 250
g postfix_expression 419
g unary_expression 420
g unary_operator 421
s
a - r 1 additive_expression multiplicative_expression
a * s 472
a & r 1 additive_expression multiplicative_expression
a / s 473
a % s 474
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a - s 507
a & r 1 shift_expression additive_expression
a + s 508
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a & r 1 relational_expression shift_expression
a << s 494
a >> s 495
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a & r 1 equality_expression relational_expression
a < s 486
a > s 487
a <= s 488
a >= s 489
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a & r 1 binary_and_expression equality_expression
a > r 1 binary_and_expression equality_expression
a == s 524
a != s 525
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a & s 444
a > r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a > r 1 binary_or_expression binary_xor_expression
a ^ s 548
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a > r 1 logical_and_expression binary_or_expression
a | s 533
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a > r 1 logical_xor_expression logical_and_expression
a && s 476
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a > r 1 logical_or_expression logical_xor_expression
a ^^ s 529
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a > r 1 conditional_expression logical_or_expression
a || s 537
a ? s 538
a , r 1 conditional_expression logical_or_expression
s
a > r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a > r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a * s 496
a & s 497
a < s 498
a > r 1 template_param type
a , r 1 template_param type
s
a > s 544
a , s 545
s
a > r 1 template_params template_param
a , r 1 template_params template_param
s
a ] s 520
a , s 521
s
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 383
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 383
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 451
a ] r 1 unary_expression postfix_expression
a . s 452
a -> s 453
a ++ s 454
a -- s 455
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ] r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a assignment_operator s 439
a = s 136
a *= s 137
a /= s 138
a %= s 139
a += s 140
a -= s 141
a <<= s 142
a >>= s 143
a &= s 144
a ^= s 145
a |= s 146
a , r 1 multiplicative_expression unary_expression
g assignment_operator 439
s
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 415
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 416
a unary_operator s 417
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 280
g postfix_expression 415
g unary_expression 416
g unary_operator 417
s
a ] r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a * s 469
a & r 1 additive_expression multiplicative_expression
a / s 470
a % s 471
a + r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a != r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
s
a ] r 1 shift_expression additive_expression
a - s 505
a & r 1 shift_expression additive_expression
a + s 506
a << r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a != r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a , r 1 shift_expression additive_expression
s
a ] r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a << s 492
a >> s 493
a < r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a <= r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a != r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
a ? r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
s
a ] r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a < s 482
a > s 483
a <= s 484
a >= s 485
a == r 1 equality_expression relational_expression
a != r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
a ? r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
s
a ] r 1 binary_and_expression equality_expression
a & r 1 binary_and_expression equality_expression
a == s 526
a != s 527
a ^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
s
a ] r 1 binary_xor_expression binary_and_expression
a & s 445
a ^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a && r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
s
a ] r 1 binary_or_expression binary_xor_expression
a ^ s 549
a | r 1 binary_or_expression binary_xor_expression
a && r 1 binary_or_expression binary_xor_expression
a ^^ r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
s
a ] r 1 logical_and_expression binary_or_expression
a | s 534
a && r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a || r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
s
a ] r 1 logical_xor_expression logical_and_expression
a && s 477
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
s
a ] r 1 logical_or_expression logical_xor_expression
a ^^ s 530
a || r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
s
a ] r 1 conditional_expression logical_or_expression
a || s 539
a ? s 540
a , r 1 conditional_expression logical_or_expression
s
a ] r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a ] r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a ) r 1 unary_expression postfix_expression
a [ s 336
a . s 337
a -> s 338
a ++ s 339
a -- s 340
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ) r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 306
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 411
a unary_operator s 308
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 67
g postfix_expression 306
g unary_expression 411
g unary_operator 308
s
a ; r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ; r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a & s 149
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a ; r 3 binary_and_expression binary_and_expression & equality_expression
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 174
a != s 175
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a ; r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a < s 159
a > s 160
a <= s 161
a >= s 162
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a ; r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a < s 159
a > s 160
a <= s 161
a >= s 162
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a ; r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a << s 163
a >> s 164
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a ; r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a << s 163
a >> s 164
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a ; r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a << s 163
a >> s 164
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a ; r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a << s 163
a >> s 164
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a ; r 3 shift_expression shift_expression << additive_expression
a - s 170
a & r 3 shift_expression shift_expression << additive_expression
a + s 171
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a ; r 3 shift_expression shift_expression >> additive_expression
a - s 170
a & r 3 shift_expression shift_expression >> additive_expression
a + s 171
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a ; r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 155
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 156
a % s 157
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a ; r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 155
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 156
a % s 157
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a ; r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a ; r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a ; r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 391
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 391
s
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a < r 1 type IDENTIFIER
a :: s 181
a VAR r 1 type IDENTIFIER
a FUNC r 1 type IDENTIFIER
s
a * r 3 type IDENTIFIER :: type
a & r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
a FUNC r 3 type IDENTIFIER :: type
s
a ; s 559
s
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a < r 1 type IDENTIFIER
a :: s 546
a VAR r 1 type IDENTIFIER
s
a * s 499
a & s 500
a < s 501
a VAR s 502
s
a ; r 1 variable_name_and_assign IDENTIFIER
a = s 543
a , r 1 variable_name_and_assign IDENTIFIER
s
a ; s 541
a , s 542
s
a ; r 1 variable_inits variable_name_and_assign
a , r 1 variable_inits variable_name_and_assign
s
a WHILE s 550
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 423
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 423
s
a expression s 410
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 410
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 554
s
a IDENTIFIER s 555
s
a ) r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ) r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 435
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 392
g postfix_expression 401
g unary_expression 435
g unary_operator 404
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 436
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 392
g postfix_expression 401
g unary_expression 436
g unary_operator 404
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 434
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 392
g postfix_expression 401
g unary_expression 434
g unary_operator 404
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 407
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 407
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 429
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 429
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 427
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 427
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 426
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 426
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 428
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 428
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 430
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 430
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 431
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 431
s
a IDENTIFIER s 331
a variable_inits s 442
a variable_name_and_assign s 333
g variable_inits 442
g variable_name_and_assign 333
s
a IDENTIFIER s 551
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 432
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 432
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 433
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 433
s
a ; r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 390
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 390
s
a ( r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a function_call r 2 statement expression ;
a ++ r 2 statement expression ;
a -- r 2 statement expression ;
a - r 2 statement expression ;
a ! r 2 statement expression ;
a ~ r 2 statement expression ;
a * r 2 statement expression ;
a & r 2 statement expression ;
a DO r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a IF r 2 statement expression ;
a ELSE r 2 statement expression ;
a TEST r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a SWITCH r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a INPUT r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a BREAK r 2 statement expression ;
a RETURN r 2 statement expression ;
a GOTO r 2 statement expression ;
s
a Ω r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a ! r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
s
a Ω r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a ! r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
s
a Ω r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a ! r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 425
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 425
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 424
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 424
s
a expression s 386
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 386
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a expression s 387
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 387
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ( r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a ! r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
s
a expression s 388
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 388
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 406
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 406
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 408
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 408
s
a ( r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a ! r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
s
a expression s 389
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 389
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 405
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 405
s
a expression s 409
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 221
g expression 409
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 221
s
a variable_decls s 441
a IDENTIFIER s 329
a type s 330
g variable_decls 441
g type 330
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 403
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 422
g primary_expression 392
g postfix_expression 401
g unary_expression 403
g unary_operator 404
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 422
s
a ; s 556
s
a ( s 557
s
a ( s 558
s
a Ω r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a - r 3 block_statements { statements }
a ! r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
a * r 3 block_statements { statements }
a & r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a { r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
s
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a Ω r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a ! r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
s
a ) s 696
a , s 356
s
a ) s 697
a , s 356
s
a ) s 698
a , s 356
s
a ) s 699
a , s 356
s
a ) s 700
a , s 356
s
a ) s 701
a , s 356
s
a ) s 702
a , s 356
s
a ) s 703
a , s 356
s
a ) r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a ) r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a ) r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 560
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 560
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a ) r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a ) r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a ) r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a ) r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a ) r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a ) r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a ) r 1 unary_expression postfix_expression
a [ s 691
a . s 692
a -> s 693
a ++ s 694
a -- s 695
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ) r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ) r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 392
a ( s 393
a HEX_CONST s 394
a OCTAL_CONST s 395
a BINARY_CONST s 396
a NUMBER_CONST s 397
a CHAR_CONST s 398
a STRING_CONST s 399
a IDENTIFIER s 400
a postfix_expression s 401
a function_call s 402
a ++ s 29
a -- s 30
a unary_expression s 637
a unary_operator s 404
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 392
g postfix_expression 401
g unary_expression 637
g unary_operator 404
s
a ) r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 367
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a ) r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 344
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a ) r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 368
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ) r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 374
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a : s 704
a , s 515
s
a ] s 705
a , s 521
s
a ) r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a [ s 446
a . s 447
a -> s 448
a ++ s 449
a -- s 450
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 412
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 634
a unary_operator s 414
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 196
g postfix_expression 412
g unary_expression 634
g unary_operator 414
s
a [ s 451
a ] r 1 unary_expression postfix_expression
a . s 452
a -> s 453
a ++ s 454
a -- s 455
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a ] r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 415
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 635
a unary_operator s 417
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 280
g postfix_expression 415
g unary_expression 635
g unary_operator 417
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 456
a . s 457
a -> s 458
a ++ s 459
a -- s 460
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a += r 1 unary_expression postfix_expression
a -= r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 418
a postfix_expression s 419
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 636
a unary_operator s 421
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 250
g postfix_expression 419
g unary_expression 636
g unary_operator 421
s
a ) r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a & s 335
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a ) r 3 binary_and_expression binary_and_expression & equality_expression
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 361
a != s 362
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a ) r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a < s 345
a > s 346
a <= s 347
a >= s 348
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a ) r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a < s 345
a > s 346
a <= s 347
a >= s 348
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a ) r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a << s 349
a >> s 350
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a ) r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a << s 349
a >> s 350
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a ) r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a << s 349
a >> s 350
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a ) r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a << s 349
a >> s 350
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a ) r 3 shift_expression shift_expression << additive_expression
a - s 353
a & r 3 shift_expression shift_expression << additive_expression
a + s 354
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a ) r 3 shift_expression shift_expression >> additive_expression
a - s 353
a & r 3 shift_expression shift_expression >> additive_expression
a + s 354
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a ) r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 341
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 342
a % s 343
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a ) r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 341
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 342
a % s 343
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a ) r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a ) r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a ) r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a ; r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 566
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 566
s
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 616
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 616
s
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 418
a postfix_expression s 259
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 261
a unary_operator s 262
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 272
a logical_or_expression s 273
a conditional_expression s 274
a assignment_expression s 593
g primary_expression 250
g postfix_expression 259
g unary_expression 261
g unary_operator 262
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 272
g logical_or_expression 273
g conditional_expression 274
g assignment_expression 593
s
a ; s 717
s
a ; s 706
a , s 542
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 639
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 639
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 669
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 669
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 654
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 654
s
a expression s 611
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 611
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 707
s
a IDENTIFIER s 711
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 612
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 612
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 708
s
a IDENTIFIER s 712
s
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 613
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 613
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 709
s
a IDENTIFIER s 713
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 614
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 614
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 710
s
a IDENTIFIER s 714
s
a ; r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ; r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 651
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 567
g postfix_expression 576
g unary_expression 651
g unary_operator 579
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 652
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 567
g postfix_expression 576
g unary_expression 652
g unary_operator 579
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 650
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 567
g postfix_expression 576
g unary_expression 650
g unary_operator 579
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 666
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 617
g postfix_expression 626
g unary_expression 666
g unary_operator 629
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 667
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 617
g postfix_expression 626
g unary_expression 667
g unary_operator 629
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 665
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 617
g postfix_expression 626
g unary_expression 665
g unary_operator 629
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 681
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 594
g postfix_expression 603
g unary_expression 681
g unary_operator 606
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 682
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 594
g postfix_expression 603
g unary_expression 682
g unary_operator 606
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 680
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 594
g postfix_expression 603
g unary_expression 680
g unary_operator 606
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 582
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 582
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 609
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 609
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 632
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 632
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 645
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 645
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 643
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 643
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 642
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 642
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 644
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 644
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 660
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 660
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 658
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 658
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 657
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 657
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 659
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 659
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 675
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 675
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 673
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 673
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 672
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 672
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 674
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 674
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 646
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 646
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 647
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 647
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 661
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 661
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 662
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 662
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 676
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 676
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 677
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 677
s
a * r 2 type type *
a & r 2 type type *
a < r 2 type type *
a > r 2 type type *
a , r 2 type type *
s
a * r 2 type type &
a & r 2 type type &
a < r 2 type type &
a > r 2 type type &
a , r 2 type type &
s
a expression s 249
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 258
a postfix_expression s 259
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 261
a unary_operator s 262
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 272
a logical_or_expression s 273
a conditional_expression s 274
a assignment_expression s 275
a type s 276
a template_params s 589
a template_param s 278
g expression 249
g primary_expression 250
g postfix_expression 259
g unary_expression 261
g unary_operator 262
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 272
g logical_or_expression 273
g conditional_expression 274
g assignment_expression 275
g type 276
g template_params 589
g template_param 278
s
a * r 2 type type *
a & r 2 type type *
a < r 2 type type *
a VAR r 2 type type *
s
a * r 2 type type &
a & r 2 type type &
a < r 2 type type &
a VAR r 2 type type &
s
a expression s 249
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 258
a postfix_expression s 259
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 261
a unary_operator s 262
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 272
a logical_or_expression s 273
a conditional_expression s 274
a assignment_expression s 275
a type s 276
a template_params s 590
a template_param s 278
g expression 249
g primary_expression 250
g postfix_expression 259
g unary_expression 261
g unary_operator 262
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 272
g logical_or_expression 273
g conditional_expression 274
g assignment_expression 275
g type 276
g template_params 590
g template_param 278
s
a IDENTIFIER s 331
a variable_inits s 689
a variable_name_and_assign s 333
g variable_inits 689
g variable_name_and_assign 333
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 648
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 648
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 649
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 649
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 663
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 663
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 664
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 664
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 678
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 678
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 679
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 679
s
a ) r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a { s 718
s
a statement s 584
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 584
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a statement s 585
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 585
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a { s 719
s
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 588
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 588
s
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 565
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 565
s
a ( r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a ! r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
s
a ( r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a ! r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
s
a ( r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a ! r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
s
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 418
a postfix_expression s 259
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 261
a unary_operator s 262
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 272
a logical_or_expression s 273
a conditional_expression s 274
a assignment_expression s 592
g primary_expression 250
g postfix_expression 259
g unary_expression 261
g unary_operator 262
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 272
g logical_or_expression 273
g conditional_expression 274
g assignment_expression 592
s
a ; r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 615
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 615
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 641
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 641
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 640
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 640
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 671
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 671
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 670
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 670
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 656
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 656
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 655
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 655
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 581
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 581
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 608
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 608
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 631
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 631
s
a IDENTIFIER s 683
a type s 684
g type 684
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 583
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 583
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 610
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 610
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 633
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 633
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 580
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 580
s
a expression s 562
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 221
g expression 562
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 221
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 607
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 607
s
a expression s 563
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 221
g expression 563
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 221
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 630
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 630
s
a expression s 564
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 221
g expression 564
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 221
s
a Ω r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a ! r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
s
a IDENTIFIER s 331
a variable_name_and_assign s 690
g variable_name_and_assign 690
s
a expression s 586
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 586
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a * r 4 type type < template_params >
a & r 4 type type < template_params >
a < r 4 type type < template_params >
a VAR r 4 type type < template_params >
a FUNC r 4 type type < template_params >
s
a expression s 249
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 258
a postfix_expression s 259
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 261
a unary_operator s 262
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 272
a logical_or_expression s 273
a conditional_expression s 274
a assignment_expression s 275
a type s 276
a template_param s 591
g expression 249
g primary_expression 250
g postfix_expression 259
g unary_expression 261
g unary_operator 262
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 272
g logical_or_expression 273
g conditional_expression 274
g assignment_expression 275
g type 276
g template_param 591
s
a IDENTIFIER s 329
a type s 685
g type 685
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 578
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 638
g primary_expression 567
g postfix_expression 576
g unary_expression 578
g unary_operator 579
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 638
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 605
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 668
g primary_expression 594
g postfix_expression 603
g unary_expression 605
g unary_operator 606
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 668
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 628
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 653
g primary_expression 617
g postfix_expression 626
g unary_expression 628
g unary_operator 629
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 653
s
a ( s 715
s
a ( s 716
s
a ( r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a - r 3 block_statements { statements }
a ! r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
a * r 3 block_statements { statements }
a & r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
s
a WHILE r 3 block_statements { statements }
s
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ( r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a ! r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
s
a expression s 561
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 561
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) s 686
a func_args s 687
a single_variable_decl s 688
g func_args 687
s
a expression s 587
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 587
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ) s 754
a , s 356
s
a ) s 755
a , s 356
s
a : s 756
a , s 515
s
a : s 757
a , s 515
s
a : s 758
a , s 515
s
a : r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a : r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 720
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 720
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 737
a . s 738
a -> s 739
a ++ s 740
a -- s 741
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a : r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 567
a ( s 568
a HEX_CONST s 569
a OCTAL_CONST s 570
a BINARY_CONST s 571
a NUMBER_CONST s 572
a CHAR_CONST s 573
a STRING_CONST s 574
a IDENTIFIER s 575
a postfix_expression s 576
a function_call s 577
a ++ s 29
a -- s 30
a unary_expression s 729
a unary_operator s 579
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 567
g postfix_expression 576
g unary_expression 729
g unary_operator 579
s
a ^^ s 528
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a : r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a && s 475
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a : r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a | s 532
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a : r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ^ s 547
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a : r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a Ω r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a ! r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
s
a Ω r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a ! r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
s
a ; r 3 variable_name_and_assign IDENTIFIER = expression
a , r 3 variable_name_and_assign IDENTIFIER = expression
s
a ; s 759
a , s 173
s
a ; r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a > s 765
a , s 545
s
a > s 766
a , s 545
s
a > r 3 template_params template_params , template_param
a , r 3 template_params template_params , template_param
s
a > r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a > r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a [ r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 722
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 722
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a [ r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 747
a . s 748
a -> s 749
a ++ s 750
a -- s 751
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 594
a ( s 595
a HEX_CONST s 596
a OCTAL_CONST s 597
a BINARY_CONST s 598
a NUMBER_CONST s 599
a CHAR_CONST s 600
a STRING_CONST s 601
a IDENTIFIER s 602
a postfix_expression s 603
a function_call s 604
a ++ s 29
a -- s 30
a unary_expression s 731
a unary_operator s 606
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 594
g postfix_expression 603
g unary_expression 731
g unary_operator 606
s
a > r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 529
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a > r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 476
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a > r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 533
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a > r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 548
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a ] s 760
a , s 521
s
a ] s 761
a , s 521
s
a ] s 762
a , s 521
s
a ] s 763
a , s 521
s
a ] r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a ] r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a != r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
s
a expression s 721
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 721
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a != r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
s
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a != r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
s
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a != r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
s
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a != r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
s
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a != r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
s
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a != r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
s
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a != r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
s
a [ s 742
a ] r 1 unary_expression postfix_expression
a . s 743
a -> s 744
a ++ s 745
a -- s 746
a - r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a / r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a != r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
s
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a != r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
s
a ] r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a != r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
s
a primary_expression s 617
a ( s 618
a HEX_CONST s 619
a OCTAL_CONST s 620
a BINARY_CONST s 621
a NUMBER_CONST s 622
a CHAR_CONST s 623
a STRING_CONST s 624
a IDENTIFIER s 625
a postfix_expression s 626
a function_call s 627
a ++ s 29
a -- s 30
a unary_expression s 730
a unary_operator s 629
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
g primary_expression 617
g postfix_expression 626
g unary_expression 730
g unary_operator 629
s
a ] r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 530
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a ] r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a && s 477
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a ] r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 534
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a ] r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 549
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ] r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ) r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a & s 443
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a : r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 522
a != s 523
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a : r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a & r 3 equality_expression equality_expression != relational_expression
a < s 478
a > s 479
a <= s 480
a >= s 481
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a : r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a & r 3 equality_expression equality_expression == relational_expression
a < s 478
a > s 479
a <= s 480
a >= s 481
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a : r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a & r 3 relational_expression relational_expression <= shift_expression
a << s 490
a >> s 491
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a : r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a & r 3 relational_expression relational_expression > shift_expression
a << s 490
a >> s 491
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a : r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a & r 3 relational_expression relational_expression >= shift_expression
a << s 490
a >> s 491
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a : r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a & r 3 relational_expression relational_expression < shift_expression
a << s 490
a >> s 491
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a : r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a - s 503
a & r 3 shift_expression shift_expression << additive_expression
a + s 504
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a : r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a - s 503
a & r 3 shift_expression shift_expression >> additive_expression
a + s 504
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a : r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 466
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 467
a % s 468
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a : r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 466
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 467
a % s 468
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a : r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a : r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a : r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a : r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a ] r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a & s 445
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a ] r 3 binary_and_expression binary_and_expression & equality_expression
a & r 3 binary_and_expression binary_and_expression & equality_expression
a == s 526
a != s 527
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a ] r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a < s 482
a > s 483
a <= s 484
a >= s 485
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a ] r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a < s 482
a > s 483
a <= s 484
a >= s 485
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a ] r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a << s 492
a >> s 493
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a ] r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a << s 492
a >> s 493
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a ] r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a << s 492
a >> s 493
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a ] r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a << s 492
a >> s 493
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a ] r 3 shift_expression shift_expression << additive_expression
a - s 505
a & r 3 shift_expression shift_expression << additive_expression
a + s 506
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a ] r 3 shift_expression shift_expression >> additive_expression
a - s 505
a & r 3 shift_expression shift_expression >> additive_expression
a + s 506
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a ] r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 469
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 470
a % s 471
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a ] r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 469
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 470
a % s 471
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a ] r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a ] r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a ] r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a & s 444
a > r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a & r 3 binary_and_expression binary_and_expression & equality_expression
a > r 3 binary_and_expression binary_and_expression & equality_expression
a == s 524
a != s 525
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
s
a & r 3 equality_expression equality_expression != relational_expression
a < s 486
a > r 3 equality_expression equality_expression != relational_expression
a <= s 488
a >= s 489
a == r 3 equality_expression equality_expression != relational_expression
a != r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
a ? r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
s
a & r 3 equality_expression equality_expression == relational_expression
a < s 486
a > r 3 equality_expression equality_expression == relational_expression
a <= s 488
a >= s 489
a == r 3 equality_expression equality_expression == relational_expression
a != r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
a ? r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
s
a & r 3 relational_expression relational_expression <= shift_expression
a << s 494
a >> s 495
a < r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a <= r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a != r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
a ? r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
s
a & r 3 relational_expression relational_expression > shift_expression
a << s 494
a >> s 495
a < r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a <= r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a != r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
a ? r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
s
a & r 3 relational_expression relational_expression >= shift_expression
a << s 494
a >> s 495
a < r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a <= r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a != r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
a ? r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
s
a & r 3 relational_expression relational_expression < shift_expression
a << s 494
a >> s 495
a < r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a <= r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a != r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
a ? r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
s
a - s 507
a & r 3 shift_expression shift_expression << additive_expression
a + s 508
a << r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a != r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a , r 3 shift_expression shift_expression << additive_expression
s
a - s 507
a & r 3 shift_expression shift_expression >> additive_expression
a + s 508
a << r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a != r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a , r 3 shift_expression shift_expression >> additive_expression
s
a - r 3 additive_expression additive_expression - multiplicative_expression
a * s 472
a & r 3 additive_expression additive_expression - multiplicative_expression
a / s 473
a % s 474
a + r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a != r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
s
a - r 3 additive_expression additive_expression + multiplicative_expression
a * s 472
a & r 3 additive_expression additive_expression + multiplicative_expression
a / s 473
a % s 474
a + r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a != r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
s
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a * r 1 type IDENTIFIER
a & r 1 type IDENTIFIER
a < r 1 type IDENTIFIER
a > r 1 type IDENTIFIER
a , r 1 type IDENTIFIER
a :: s 531
s
a * r 3 type IDENTIFIER :: type
a & r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a > r 3 type IDENTIFIER :: type
a , r 3 type IDENTIFIER :: type
s
a * r 3 type IDENTIFIER :: type
a & r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
s
a block_statements s 735
a { s 58
g block_statements 735
s
a ) s 752
a , s 753
s
a ) r 1 func_args single_variable_decl
a , r 1 func_args single_variable_decl
s
a ; s 764
a , s 542
s
a ; r 3 variable_inits variable_inits , variable_name_and_assign
a , r 3 variable_inits variable_inits , variable_name_and_assign
s
a expression s 728
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 728
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 767
s
a IDENTIFIER s 768
s
a ) r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a ) r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a ; r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a { s 769
s
a statement s 725
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statement 725
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a statement s 726
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statement 726
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a { s 770
s
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 724
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 724
s
a ) r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a ( r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a ! r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a expression s 723
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 723
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) s 732
a func_args s 733
a single_variable_decl s 688
g func_args 733
s
a expression s 727
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 727
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 736
a } r 0 test_case_statements 
g test_case_statements 736
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 734
g switch_case_statements 734
s
a ) s 790
a , s 356
s
a ) s 791
a , s 356
s
a ) s 792
a , s 356
s
a ) s 793
a , s 356
s
a ) r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ( r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a ! r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
s
a ( r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a ! r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
s
a ; s 794
a , s 173
s
a ] s 795
a , s 521
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a ] r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a - r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a != r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
s
a block_statements s 782
a { s 117
g block_statements 782
s
a ) s 789
a , s 753
s
a CASE s 779
a } s 780
a switch_case_statement s 781
g switch_case_statement 781
s
a Ω r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a test_case_statement s 785
a CASE s 786
a DEFAULT s 787
a } s 788
g test_case_statement 785
s
a expression s 774
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 774
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 797
s
a IDENTIFIER s 800
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 775
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 775
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 798
s
a IDENTIFIER s 801
s
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a expression s 776
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 305
g expression 776
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 305
s
a IDENTIFIER s 799
s
a IDENTIFIER s 802
s
a [ r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a != r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
s
a [ r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a != r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
s
a block_statements s 783
a { s 58
g block_statements 783
s
a single_variable_decl s 796
s
a ) r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a ; s 803
s
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 772
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 772
s
a primary_expression s 250
a ( s 251
a HEX_CONST s 252
a OCTAL_CONST s 253
a BINARY_CONST s 254
a NUMBER_CONST s 255
a CHAR_CONST s 256
a STRING_CONST s 257
a IDENTIFIER s 418
a postfix_expression s 259
a function_call s 260
a ++ s 29
a -- s 30
a unary_expression s 261
a unary_operator s 262
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 263
a additive_expression s 264
a shift_expression s 265
a relational_expression s 266
a equality_expression s 267
a binary_and_expression s 268
a binary_xor_expression s 269
a binary_or_expression s 270
a logical_and_expression s 271
a logical_xor_expression s 272
a logical_or_expression s 273
a conditional_expression s 274
a assignment_expression s 773
g primary_expression 250
g postfix_expression 259
g unary_expression 261
g unary_operator 262
g multiplicative_expression 263
g additive_expression 264
g shift_expression 265
g relational_expression 266
g equality_expression 267
g binary_and_expression 268
g binary_xor_expression 269
g binary_or_expression 270
g logical_and_expression 271
g logical_xor_expression 272
g logical_or_expression 273
g conditional_expression 274
g assignment_expression 773
s
a primary_expression s 280
a ( s 281
a HEX_CONST s 282
a OCTAL_CONST s 283
a BINARY_CONST s 284
a NUMBER_CONST s 285
a CHAR_CONST s 286
a STRING_CONST s 287
a IDENTIFIER s 288
a postfix_expression s 289
a function_call s 290
a ++ s 29
a -- s 30
a unary_expression s 291
a unary_operator s 292
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 293
a additive_expression s 294
a shift_expression s 295
a relational_expression s 296
a equality_expression s 297
a binary_and_expression s 298
a binary_xor_expression s 299
a binary_or_expression s 300
a logical_and_expression s 301
a logical_xor_expression s 302
a logical_or_expression s 303
a conditional_expression s 304
a assignment_expression s 777
g primary_expression 280
g postfix_expression 289
g unary_expression 291
g unary_operator 292
g multiplicative_expression 293
g additive_expression 294
g shift_expression 295
g relational_expression 296
g equality_expression 297
g binary_and_expression 298
g binary_xor_expression 299
g binary_or_expression 300
g logical_and_expression 301
g logical_xor_expression 302
g logical_or_expression 303
g conditional_expression 304
g assignment_expression 777
s
a expression s 771
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 771
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a ; r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a ; r 4 variable_decls type VAR variable_inits ;
s
a * r 4 type type < template_params >
a & r 4 type type < template_params >
a < r 4 type type < template_params >
a > r 4 type type < template_params >
a , r 4 type type < template_params >
s
a * r 4 type type < template_params >
a & r 4 type type < template_params >
a < r 4 type type < template_params >
a VAR r 4 type type < template_params >
s
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 784
a } r 0 test_case_statements 
g test_case_statements 784
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 778
g switch_case_statements 778
s
a ) s 839
a , s 356
s
a : r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a > r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ] s 840
a , s 521
s
a ] s 841
a , s 521
s
a ] s 842
a , s 521
s
a ] r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a CASE s 779
a } s 836
a switch_case_statement s 781
g switch_case_statement 781
s
a expression s 805
a primary_expression s 196
a ( s 197
a HEX_CONST s 198
a OCTAL_CONST s 199
a BINARY_CONST s 200
a NUMBER_CONST s 201
a CHAR_CONST s 202
a STRING_CONST s 203
a IDENTIFIER s 204
a postfix_expression s 205
a function_call s 206
a ++ s 29
a -- s 30
a unary_expression s 207
a unary_operator s 208
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 209
a additive_expression s 210
a shift_expression s 211
a relational_expression s 212
a equality_expression s 213
a binary_and_expression s 214
a binary_xor_expression s 215
a binary_or_expression s 216
a logical_and_expression s 217
a logical_xor_expression s 218
a logical_or_expression s 219
a conditional_expression s 220
a assignment_expression s 221
g expression 805
g primary_expression 196
g postfix_expression 205
g unary_expression 207
g unary_operator 208
g multiplicative_expression 209
g additive_expression 210
g shift_expression 211
g relational_expression 212
g equality_expression 213
g binary_and_expression 214
g binary_xor_expression 215
g binary_or_expression 216
g logical_and_expression 217
g logical_xor_expression 218
g logical_or_expression 219
g conditional_expression 220
g assignment_expression 221
s
a Ω r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a CASE r 2 switch_case_statements switch_case_statements switch_case_statement
a } r 2 switch_case_statements switch_case_statements switch_case_statement
s
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a Ω r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a test_case_statement s 785
a CASE s 786
a DEFAULT s 787
a } s 838
g test_case_statement 785
s
a CASE r 2 test_case_statements test_case_statements test_case_statement
a DEFAULT r 2 test_case_statements test_case_statements test_case_statement
a } r 2 test_case_statements test_case_statements test_case_statement
s
a ( s 843
s
a statement s 806
a expression s 807
a block_statements s 808
a variable_decls s 809
a function_decl s 810
a output_statement s 811
a input_statement s 812
a while_loop s 813
a do_while_loop s 814
a for_loop s 815
a if_statement s 816
a else_statement s 817
a test_statement s 818
a switch_statement s 819
a jump_statement s 820
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 821
a DO s 822
a WHILE s 823
a for s 824
a IF s 825
a ELSE s 826
a TEST s 827
a { s 828
a SWITCH s 829
a OUTPUT s 830
a INPUT s 831
a CONTINUE s 832
a BREAK s 833
a RETURN s 834
a GOTO s 835
g statement 806
g expression 807
g block_statements 808
g variable_decls 809
g function_decl 810
g output_statement 811
g input_statement 812
g while_loop 813
g do_while_loop 814
g for_loop 815
g if_statement 816
g else_statement 817
g test_statement 818
g switch_statement 819
g jump_statement 820
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 821
s
a Ω r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
s
a block_statements s 837
a { s 117
g block_statements 837
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a [ r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a != r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
s
a ; s 844
s
a expression s 804
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 804
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a ) r 3 func_args func_args , single_variable_decl
a , r 3 func_args func_args , single_variable_decl
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a Ω r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ) s 856
a , s 356
s
a : s 857
a , s 515
s
a CASE r 2 test_case_statement DEFAULT statement
a DEFAULT r 2 test_case_statement DEFAULT statement
a } r 2 test_case_statement DEFAULT statement
s
a ; s 858
a , s 173
s
a CASE r 1 statement block_statements
a DEFAULT r 1 statement block_statements
a } r 1 statement block_statements
s
a CASE r 1 statement variable_decls
a DEFAULT r 1 statement variable_decls
a } r 1 statement variable_decls
s
a CASE r 1 statement function_decl
a DEFAULT r 1 statement function_decl
a } r 1 statement function_decl
s
a CASE r 1 statement output_statement
a DEFAULT r 1 statement output_statement
a } r 1 statement output_statement
s
a CASE r 1 statement input_statement
a DEFAULT r 1 statement input_statement
a } r 1 statement input_statement
s
a CASE r 1 statement while_loop
a DEFAULT r 1 statement while_loop
a } r 1 statement while_loop
s
a CASE r 1 statement do_while_loop
a DEFAULT r 1 statement do_while_loop
a } r 1 statement do_while_loop
s
a CASE r 1 statement for_loop
a DEFAULT r 1 statement for_loop
a } r 1 statement for_loop
s
a CASE r 1 statement if_statement
a DEFAULT r 1 statement if_statement
a } r 1 statement if_statement
s
a CASE r 1 statement else_statement
a DEFAULT r 1 statement else_statement
a } r 1 statement else_statement
s
a CASE r 1 statement test_statement
a DEFAULT r 1 statement test_statement
a } r 1 statement test_statement
s
a CASE r 1 statement switch_statement
a DEFAULT r 1 statement switch_statement
a } r 1 statement switch_statement
s
a CASE r 1 statement jump_statement
a DEFAULT r 1 statement jump_statement
a } r 1 statement jump_statement
s
a * s 165
a & s 166
a < s 167
a VAR s 854
a FUNC s 855
s
a block_statements s 853
a { s 148
g block_statements 853
s
a ( s 862
s
a ( s 865
s
a ( s 860
s
a statement s 848
a expression s 807
a block_statements s 808
a variable_decls s 809
a function_decl s 810
a output_statement s 811
a input_statement s 812
a while_loop s 813
a do_while_loop s 814
a for_loop s 815
a if_statement s 816
a else_statement s 817
a test_statement s 818
a switch_statement s 819
a jump_statement s 820
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 821
a DO s 822
a WHILE s 823
a for s 824
a IF s 825
a ELSE s 826
a TEST s 827
a { s 828
a SWITCH s 829
a OUTPUT s 830
a INPUT s 831
a CONTINUE s 832
a BREAK s 833
a RETURN s 834
a GOTO s 835
g statement 848
g expression 807
g block_statements 808
g variable_decls 809
g function_decl 810
g output_statement 811
g input_statement 812
g while_loop 813
g do_while_loop 814
g for_loop 815
g if_statement 816
g else_statement 817
g test_statement 818
g switch_statement 819
g jump_statement 820
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 821
s
a ( s 859
s
a statements s 846
a statement_list s 94
a statement s 95
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a } r 0 statements 
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statements 846
g statement_list 94
g statement 95
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a ( s 864
s
a expression s 852
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 852
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 851
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 851
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 861
s
a ; s 863
s
a expression s 849
a ; s 850
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 849
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 866
s
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
s
a statement s 847
a expression s 4
a block_statements s 5
a variable_decls s 6
a function_decl s 7
a output_statement s 8
a input_statement s 9
a while_loop s 10
a do_while_loop s 11
a for_loop s 12
a if_statement s 13
a else_statement s 14
a test_statement s 15
a switch_statement s 16
a jump_statement s 17
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 51
a DO s 52
a WHILE s 53
a for s 54
a IF s 55
a ELSE s 56
a TEST s 57
a { s 58
a SWITCH s 59
a OUTPUT s 60
a INPUT s 61
a CONTINUE s 62
a BREAK s 63
a RETURN s 64
a GOTO s 65
g statement 847
g expression 4
g block_statements 5
g variable_decls 6
g function_decl 7
g output_statement 8
g input_statement 9
g while_loop 10
g do_while_loop 11
g for_loop 12
g if_statement 13
g else_statement 14
g test_statement 15
g switch_statement 16
g jump_statement 17
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 51
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a [ r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a != r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
s
a expression s 845
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 845
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ) s 906
a , s 356
s
a } s 912
s
a Ω r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a CASE r 2 else_statement ELSE statement
a DEFAULT r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
s
a ; s 907
a , s 173
s
a CASE r 2 jump_statement RETURN ;
a DEFAULT r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
s
a ; s 908
a , s 173
s
a ; s 909
a , s 173
s
a WHILE s 910
s
a IDENTIFIER s 331
a variable_inits s 905
a variable_name_and_assign s 333
g variable_inits 905
g variable_name_and_assign 333
s
a IDENTIFIER s 911
s
a statement s 903
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statement 903
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a statements s 871
a statement_list s 872
a statement s 873
a expression s 874
a block_statements s 875
a variable_decls s 876
a function_decl s 877
a output_statement s 878
a input_statement s 879
a while_loop s 880
a do_while_loop s 881
a for_loop s 882
a if_statement s 883
a else_statement s 884
a test_statement s 885
a switch_statement s 886
a jump_statement s 887
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 888
a DO s 889
a WHILE s 890
a for s 891
a IF s 892
a ELSE s 893
a CASE r 0 statements 
a TEST s 894
a { s 895
a } r 0 statements 
a SWITCH s 896
a OUTPUT s 897
a INPUT s 898
a CONTINUE s 899
a BREAK s 900
a RETURN s 901
a GOTO s 902
g statements 871
g statement_list 872
g statement 873
g expression 874
g block_statements 875
g variable_decls 876
g function_decl 877
g output_statement 878
g input_statement 879
g while_loop 880
g do_while_loop 881
g for_loop 882
g if_statement 883
g else_statement 884
g test_statement 885
g switch_statement 886
g jump_statement 887
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 888
s
a CASE r 2 statement expression ;
a DEFAULT r 2 statement expression ;
a } r 2 statement expression ;
s
a expression s 867
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 867
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a expression s 868
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 868
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a CASE r 2 jump_statement CONTINUE ;
a DEFAULT r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
s
a expression s 869
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 869
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a CASE r 2 jump_statement BREAK ;
a DEFAULT r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
s
a expression s 870
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 870
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a variable_decls s 904
a IDENTIFIER s 329
a type s 330
g variable_decls 904
g type 330
s
a ; s 913
s
a ) s 925
a , s 356
s
a ) s 926
a , s 356
s
a ) s 927
a , s 356
s
a ) s 928
a , s 356
s
a CASE r 4 switch_case_statement CASE expression : statements
a } r 4 switch_case_statement CASE expression : statements
s
a statement s 915
a expression s 874
a block_statements s 875
a variable_decls s 876
a function_decl s 877
a output_statement s 878
a input_statement s 879
a while_loop s 880
a do_while_loop s 881
a for_loop s 882
a if_statement s 883
a else_statement s 884
a test_statement s 885
a switch_statement s 886
a jump_statement s 887
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 888
a DO s 889
a WHILE s 890
a for s 891
a IF s 892
a ELSE s 893
a CASE r 1 statements statement_list
a TEST s 894
a { s 895
a } r 1 statements statement_list
a SWITCH s 896
a OUTPUT s 897
a INPUT s 898
a CONTINUE s 899
a BREAK s 900
a RETURN s 901
a GOTO s 902
g statement 915
g expression 874
g block_statements 875
g variable_decls 876
g function_decl 877
g output_statement 878
g input_statement 879
g while_loop 880
g do_while_loop 881
g for_loop 882
g if_statement 883
g else_statement 884
g test_statement 885
g switch_statement 886
g jump_statement 887
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 888
s
a ( r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a function_call r 1 statement_list statement
a ++ r 1 statement_list statement
a -- r 1 statement_list statement
a - r 1 statement_list statement
a ! r 1 statement_list statement
a ~ r 1 statement_list statement
a * r 1 statement_list statement
a & r 1 statement_list statement
a DO r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a IF r 1 statement_list statement
a ELSE r 1 statement_list statement
a CASE r 1 statement_list statement
a TEST r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a SWITCH r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a INPUT r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a BREAK r 1 statement_list statement
a RETURN r 1 statement_list statement
a GOTO r 1 statement_list statement
s
a ; s 929
a , s 173
s
a ( r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a function_call r 1 statement block_statements
a ++ r 1 statement block_statements
a -- r 1 statement block_statements
a - r 1 statement block_statements
a ! r 1 statement block_statements
a ~ r 1 statement block_statements
a * r 1 statement block_statements
a & r 1 statement block_statements
a DO r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a IF r 1 statement block_statements
a ELSE r 1 statement block_statements
a CASE r 1 statement block_statements
a TEST r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a SWITCH r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a INPUT r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a BREAK r 1 statement block_statements
a RETURN r 1 statement block_statements
a GOTO r 1 statement block_statements
s
a ( r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a function_call r 1 statement variable_decls
a ++ r 1 statement variable_decls
a -- r 1 statement variable_decls
a - r 1 statement variable_decls
a ! r 1 statement variable_decls
a ~ r 1 statement variable_decls
a * r 1 statement variable_decls
a & r 1 statement variable_decls
a DO r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a IF r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a CASE r 1 statement variable_decls
a TEST r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a GOTO r 1 statement variable_decls
s
a ( r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a function_call r 1 statement function_decl
a ++ r 1 statement function_decl
a -- r 1 statement function_decl
a - r 1 statement function_decl
a ! r 1 statement function_decl
a ~ r 1 statement function_decl
a * r 1 statement function_decl
a & r 1 statement function_decl
a DO r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a IF r 1 statement function_decl
a ELSE r 1 statement function_decl
a CASE r 1 statement function_decl
a TEST r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a SWITCH r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a INPUT r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a BREAK r 1 statement function_decl
a RETURN r 1 statement function_decl
a GOTO r 1 statement function_decl
s
a ( r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a function_call r 1 statement output_statement
a ++ r 1 statement output_statement
a -- r 1 statement output_statement
a - r 1 statement output_statement
a ! r 1 statement output_statement
a ~ r 1 statement output_statement
a * r 1 statement output_statement
a & r 1 statement output_statement
a DO r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a IF r 1 statement output_statement
a ELSE r 1 statement output_statement
a CASE r 1 statement output_statement
a TEST r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a SWITCH r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a INPUT r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a BREAK r 1 statement output_statement
a RETURN r 1 statement output_statement
a GOTO r 1 statement output_statement
s
a ( r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a function_call r 1 statement input_statement
a ++ r 1 statement input_statement
a -- r 1 statement input_statement
a - r 1 statement input_statement
a ! r 1 statement input_statement
a ~ r 1 statement input_statement
a * r 1 statement input_statement
a & r 1 statement input_statement
a DO r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a IF r 1 statement input_statement
a ELSE r 1 statement input_statement
a CASE r 1 statement input_statement
a TEST r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a SWITCH r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a INPUT r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a BREAK r 1 statement input_statement
a RETURN r 1 statement input_statement
a GOTO r 1 statement input_statement
s
a ( r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a function_call r 1 statement while_loop
a ++ r 1 statement while_loop
a -- r 1 statement while_loop
a - r 1 statement while_loop
a ! r 1 statement while_loop
a ~ r 1 statement while_loop
a * r 1 statement while_loop
a & r 1 statement while_loop
a DO r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a IF r 1 statement while_loop
a ELSE r 1 statement while_loop
a CASE r 1 statement while_loop
a TEST r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a SWITCH r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a INPUT r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a BREAK r 1 statement while_loop
a RETURN r 1 statement while_loop
a GOTO r 1 statement while_loop
s
a ( r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a - r 1 statement do_while_loop
a ! r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
a * r 1 statement do_while_loop
a & r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a CASE r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
s
a ( r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a function_call r 1 statement for_loop
a ++ r 1 statement for_loop
a -- r 1 statement for_loop
a - r 1 statement for_loop
a ! r 1 statement for_loop
a ~ r 1 statement for_loop
a * r 1 statement for_loop
a & r 1 statement for_loop
a DO r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a IF r 1 statement for_loop
a ELSE r 1 statement for_loop
a CASE r 1 statement for_loop
a TEST r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a SWITCH r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a INPUT r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a BREAK r 1 statement for_loop
a RETURN r 1 statement for_loop
a GOTO r 1 statement for_loop
s
a ( r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a function_call r 1 statement if_statement
a ++ r 1 statement if_statement
a -- r 1 statement if_statement
a - r 1 statement if_statement
a ! r 1 statement if_statement
a ~ r 1 statement if_statement
a * r 1 statement if_statement
a & r 1 statement if_statement
a DO r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a IF r 1 statement if_statement
a ELSE r 1 statement if_statement
a CASE r 1 statement if_statement
a TEST r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a SWITCH r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a INPUT r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a BREAK r 1 statement if_statement
a RETURN r 1 statement if_statement
a GOTO r 1 statement if_statement
s
a ( r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a function_call r 1 statement else_statement
a ++ r 1 statement else_statement
a -- r 1 statement else_statement
a - r 1 statement else_statement
a ! r 1 statement else_statement
a ~ r 1 statement else_statement
a * r 1 statement else_statement
a & r 1 statement else_statement
a DO r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a IF r 1 statement else_statement
a ELSE r 1 statement else_statement
a CASE r 1 statement else_statement
a TEST r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a SWITCH r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a INPUT r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a BREAK r 1 statement else_statement
a RETURN r 1 statement else_statement
a GOTO r 1 statement else_statement
s
a ( r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a function_call r 1 statement test_statement
a ++ r 1 statement test_statement
a -- r 1 statement test_statement
a - r 1 statement test_statement
a ! r 1 statement test_statement
a ~ r 1 statement test_statement
a * r 1 statement test_statement
a & r 1 statement test_statement
a DO r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a IF r 1 statement test_statement
a ELSE r 1 statement test_statement
a CASE r 1 statement test_statement
a TEST r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a SWITCH r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a INPUT r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a BREAK r 1 statement test_statement
a RETURN r 1 statement test_statement
a GOTO r 1 statement test_statement
s
a ( r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a function_call r 1 statement switch_statement
a ++ r 1 statement switch_statement
a -- r 1 statement switch_statement
a - r 1 statement switch_statement
a ! r 1 statement switch_statement
a ~ r 1 statement switch_statement
a * r 1 statement switch_statement
a & r 1 statement switch_statement
a DO r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a IF r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a CASE r 1 statement switch_statement
a TEST r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a GOTO r 1 statement switch_statement
s
a ( r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a function_call r 1 statement jump_statement
a ++ r 1 statement jump_statement
a -- r 1 statement jump_statement
a - r 1 statement jump_statement
a ! r 1 statement jump_statement
a ~ r 1 statement jump_statement
a * r 1 statement jump_statement
a & r 1 statement jump_statement
a DO r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a IF r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a CASE r 1 statement jump_statement
a TEST r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a GOTO r 1 statement jump_statement
s
a * s 165
a & s 166
a < s 167
a VAR s 923
a FUNC s 924
s
a block_statements s 922
a { s 148
g block_statements 922
s
a ( s 933
s
a ( s 937
s
a ( s 931
s
a statement s 914
a expression s 874
a block_statements s 875
a variable_decls s 876
a function_decl s 877
a output_statement s 878
a input_statement s 879
a while_loop s 880
a do_while_loop s 881
a for_loop s 882
a if_statement s 883
a else_statement s 884
a test_statement s 885
a switch_statement s 886
a jump_statement s 887
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 888
a DO s 889
a WHILE s 890
a for s 891
a IF s 892
a ELSE s 893
a TEST s 894
a { s 895
a SWITCH s 896
a OUTPUT s 897
a INPUT s 898
a CONTINUE s 899
a BREAK s 900
a RETURN s 901
a GOTO s 902
g statement 914
g expression 874
g block_statements 875
g variable_decls 876
g function_decl 877
g output_statement 878
g input_statement 879
g while_loop 880
g do_while_loop 881
g for_loop 882
g if_statement 883
g else_statement 884
g test_statement 885
g switch_statement 886
g jump_statement 887
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 888
s
a ( s 930
s
a statements s 916
a statement_list s 94
a statement s 95
a expression s 96
a block_statements s 97
a variable_decls s 98
a function_decl s 99
a output_statement s 100
a input_statement s 101
a while_loop s 102
a do_while_loop s 103
a for_loop s 104
a if_statement s 105
a else_statement s 106
a test_statement s 107
a switch_statement s 108
a jump_statement s 109
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 110
a DO s 111
a WHILE s 112
a for s 113
a IF s 114
a ELSE s 115
a TEST s 116
a { s 117
a } r 0 statements 
a SWITCH s 118
a OUTPUT s 119
a INPUT s 120
a CONTINUE s 121
a BREAK s 122
a RETURN s 123
a GOTO s 124
g statements 916
g statement_list 94
g statement 95
g expression 96
g block_statements 97
g variable_decls 98
g function_decl 99
g output_statement 100
g input_statement 101
g while_loop 102
g do_while_loop 103
g for_loop 104
g if_statement 105
g else_statement 106
g test_statement 107
g switch_statement 108
g jump_statement 109
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 110
s
a ( s 935
s
a expression s 921
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 921
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a expression s 920
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 920
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ; s 932
s
a ; s 934
s
a expression s 918
a ; s 919
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 918
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a IDENTIFIER s 938
s
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ; s 941
s
a ; s 936
a , s 542
s
a statement s 917
a expression s 807
a block_statements s 808
a variable_decls s 809
a function_decl s 810
a output_statement s 811
a input_statement s 812
a while_loop s 813
a do_while_loop s 814
a for_loop s 815
a if_statement s 816
a else_statement s 817
a test_statement s 818
a switch_statement s 819
a jump_statement s 820
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 821
a DO s 822
a WHILE s 823
a for s 824
a IF s 825
a ELSE s 826
a TEST s 827
a { s 828
a SWITCH s 829
a OUTPUT s 830
a INPUT s 831
a CONTINUE s 832
a BREAK s 833
a RETURN s 834
a GOTO s 835
g statement 917
g expression 807
g block_statements 808
g variable_decls 809
g function_decl 810
g output_statement 811
g input_statement 812
g while_loop 813
g do_while_loop 814
g for_loop 815
g if_statement 816
g else_statement 817
g test_statement 818
g switch_statement 819
g jump_statement 820
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 821
s
a CASE r 3 jump_statement RETURN expression ;
a DEFAULT r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
s
a CASE r 3 input_statement INPUT expression ;
a DEFAULT r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
s
a CASE r 3 output_statement OUTPUT expression ;
a DEFAULT r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
s
a ( s 939
s
a ( s 940
s
a CASE r 3 block_statements { statements }
a DEFAULT r 3 block_statements { statements }
a } r 3 block_statements { statements }
s
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a DEFAULT r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
s
a ( r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a ! r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a CASE r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
s
a ( r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a ! r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a CASE r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
s
a } s 959
s
a CASE r 5 test_case_statement CASE ( expression ) statement
a DEFAULT r 5 test_case_statement CASE ( expression ) statement
a } r 5 test_case_statement CASE ( expression ) statement
s
a ; s 954
a , s 173
s
a ( r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a ! r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a CASE r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
s
a ; s 955
a , s 173
s
a ; s 956
a , s 173
s
a WHILE s 957
s
a IDENTIFIER s 331
a variable_inits s 953
a variable_name_and_assign s 333
g variable_inits 953
g variable_name_and_assign 333
s
a IDENTIFIER s 958
s
a { s 961
s
a statement s 947
a expression s 807
a block_statements s 808
a variable_decls s 809
a function_decl s 810
a output_statement s 811
a input_statement s 812
a while_loop s 813
a do_while_loop s 814
a for_loop s 815
a if_statement s 816
a else_statement s 817
a test_statement s 818
a switch_statement s 819
a jump_statement s 820
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 821
a DO s 822
a WHILE s 823
a for s 824
a IF s 825
a ELSE s 826
a TEST s 827
a { s 828
a SWITCH s 829
a OUTPUT s 830
a INPUT s 831
a CONTINUE s 832
a BREAK s 833
a RETURN s 834
a GOTO s 835
g statement 947
g expression 807
g block_statements 808
g variable_decls 809
g function_decl 810
g output_statement 811
g input_statement 812
g while_loop 813
g do_while_loop 814
g for_loop 815
g if_statement 816
g else_statement 817
g test_statement 818
g switch_statement 819
g jump_statement 820
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 821
s
a statement s 948
a expression s 807
a block_statements s 808
a variable_decls s 809
a function_decl s 810
a output_statement s 811
a input_statement s 812
a while_loop s 813
a do_while_loop s 814
a for_loop s 815
a if_statement s 816
a else_statement s 817
a test_statement s 818
a switch_statement s 819
a jump_statement s 820
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 821
a DO s 822
a WHILE s 823
a for s 824
a IF s 825
a ELSE s 826
a TEST s 827
a { s 828
a SWITCH s 829
a OUTPUT s 830
a INPUT s 831
a CONTINUE s 832
a BREAK s 833
a RETURN s 834
a GOTO s 835
g statement 948
g expression 807
g block_statements 808
g variable_decls 809
g function_decl 810
g output_statement 811
g input_statement 812
g while_loop 813
g do_while_loop 814
g for_loop 815
g if_statement 816
g else_statement 817
g test_statement 818
g switch_statement 819
g jump_statement 820
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 821
s
a { s 962
s
a ( r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a function_call r 2 statement expression ;
a ++ r 2 statement expression ;
a -- r 2 statement expression ;
a - r 2 statement expression ;
a ! r 2 statement expression ;
a ~ r 2 statement expression ;
a * r 2 statement expression ;
a & r 2 statement expression ;
a DO r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a IF r 2 statement expression ;
a ELSE r 2 statement expression ;
a CASE r 2 statement expression ;
a TEST r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a SWITCH r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a INPUT r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a BREAK r 2 statement expression ;
a RETURN r 2 statement expression ;
a GOTO r 2 statement expression ;
s
a expression s 942
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 942
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a expression s 943
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 943
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ( r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a ! r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a CASE r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
s
a expression s 944
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 944
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ( r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a ! r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a CASE r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
s
a expression s 945
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 945
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a CASE r 4 variable_decls type VAR variable_inits ;
a DEFAULT r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
s
a variable_decls s 950
a IDENTIFIER s 329
a type s 330
g variable_decls 950
g type 330
s
a ; s 960
s
a expression s 946
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 946
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) s 951
a func_args s 952
a single_variable_decl s 688
g func_args 952
s
a expression s 949
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 949
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ) s 967
a , s 356
s
a ) s 968
a , s 356
s
a ) s 969
a , s 356
s
a ) s 970
a , s 356
s
a ) s 971
a , s 356
s
a CASE r 5 if_statement IF ( expression ) statement
a DEFAULT r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
s
a CASE r 5 while_loop WHILE ( expression ) statement
a DEFAULT r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
s
a ; s 972
a , s 173
s
a ; s 976
s
a block_statements s 964
a { s 828
g block_statements 964
s
a ) s 966
a , s 753
s
a ; s 973
a , s 542
s
a ( r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a ! r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a CASE r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
s
a ( r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a ! r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a CASE r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
s
a ( r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a ! r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a CASE r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
s
a ( s 974
s
a ( s 975
s
a ( r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a - r 3 block_statements { statements }
a ! r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
a * r 3 block_statements { statements }
a & r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a CASE r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
s
a ( r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a ! r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 965
a } r 0 test_case_statements 
g test_case_statements 965
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 963
g switch_case_statements 963
s
a CASE s 779
a } s 984
a switch_case_statement s 781
g switch_case_statement 781
s
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DEFAULT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a test_case_statement s 785
a CASE s 786
a DEFAULT s 787
a } s 986
g test_case_statement 785
s
a block_statements s 985
a { s 828
g block_statements 985
s
a { s 987
s
a statement s 979
a expression s 874
a block_statements s 875
a variable_decls s 876
a function_decl s 877
a output_statement s 878
a input_statement s 879
a while_loop s 880
a do_while_loop s 881
a for_loop s 882
a if_statement s 883
a else_statement s 884
a test_statement s 885
a switch_statement s 886
a jump_statement s 887
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 888
a DO s 889
a WHILE s 890
a for s 891
a IF s 892
a ELSE s 893
a TEST s 894
a { s 895
a SWITCH s 896
a OUTPUT s 897
a INPUT s 898
a CONTINUE s 899
a BREAK s 900
a RETURN s 901
a GOTO s 902
g statement 979
g expression 874
g block_statements 875
g variable_decls 876
g function_decl 877
g output_statement 878
g input_statement 879
g while_loop 880
g do_while_loop 881
g for_loop 882
g if_statement 883
g else_statement 884
g test_statement 885
g switch_statement 886
g jump_statement 887
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 888
s
a statement s 980
a expression s 874
a block_statements s 875
a variable_decls s 876
a function_decl s 877
a output_statement s 878
a input_statement s 879
a while_loop s 880
a do_while_loop s 881
a for_loop s 882
a if_statement s 883
a else_statement s 884
a test_statement s 885
a switch_statement s 886
a jump_statement s 887
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 888
a DO s 889
a WHILE s 890
a for s 891
a IF s 892
a ELSE s 893
a TEST s 894
a { s 895
a SWITCH s 896
a OUTPUT s 897
a INPUT s 898
a CONTINUE s 899
a BREAK s 900
a RETURN s 901
a GOTO s 902
g statement 980
g expression 874
g block_statements 875
g variable_decls 876
g function_decl 877
g output_statement 878
g input_statement 879
g while_loop 880
g do_while_loop 881
g for_loop 882
g if_statement 883
g else_statement 884
g test_statement 885
g switch_statement 886
g jump_statement 887
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 888
s
a { s 988
s
a ; s 989
s
a expression s 978
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 978
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ( r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a ! r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a CASE r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
s
a expression s 977
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 977
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) s 982
a func_args s 983
a single_variable_decl s 688
g func_args 983
s
a expression s 981
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 129
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
g expression 981
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
s
a ) s 994
a , s 356
s
a ) s 995
a , s 356
s
a ( r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a ! r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a CASE r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
s
a ( r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a ! r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a CASE r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
s
a ; s 996
a , s 173
s
a block_statements s 991
a { s 895
g block_statements 991
s
a ) s 993
a , s 753
s
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DEFAULT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DEFAULT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a DEFAULT r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 992
a } r 0 test_case_statements 
g test_case_statements 992
s
a CASE r 0 switch_case_statements 
a } r 0 switch_case_statements 
a switch_case_statements s 990
g switch_case_statements 990
s
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DEFAULT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a CASE s 779
a } s 999
a switch_case_statement s 781
g switch_case_statement 781
s
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a test_case_statement s 785
a CASE s 786
a DEFAULT s 787
a } s 1001
g test_case_statement 785
s
a block_statements s 1000
a { s 895
g block_statements 1000
s
a ; s 1002
s
a statement s 998
a expression s 807
a block_statements s 808
a variable_decls s 809
a function_decl s 810
a output_statement s 811
a input_statement s 812
a while_loop s 813
a do_while_loop s 814
a for_loop s 815
a if_statement s 816
a else_statement s 817
a test_statement s 818
a switch_statement s 819
a jump_statement s 820
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 821
a DO s 822
a WHILE s 823
a for s 824
a IF s 825
a ELSE s 826
a TEST s 827
a { s 828
a SWITCH s 829
a OUTPUT s 830
a INPUT s 831
a CONTINUE s 832
a BREAK s 833
a RETURN s 834
a GOTO s 835
g statement 998
g expression 807
g block_statements 808
g variable_decls 809
g function_decl 810
g output_statement 811
g input_statement 812
g while_loop 813
g do_while_loop 814
g for_loop 815
g if_statement 816
g else_statement 817
g test_statement 818
g switch_statement 819
g jump_statement 820
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 821
s
a expression s 997
a primary_expression s 67
a ( s 68
a HEX_CONST s 69
a OCTAL_CONST s 70
a BINARY_CONST s 71
a NUMBER_CONST s 72
a CHAR_CONST s 73
a STRING_CONST s 74
a IDENTIFIER s 75
a postfix_expression s 76
a function_call s 77
a ++ s 29
a -- s 30
a unary_expression s 78
a unary_operator s 79
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 80
a additive_expression s 81
a shift_expression s 82
a relational_expression s 83
a equality_expression s 84
a binary_and_expression s 85
a binary_xor_expression s 86
a binary_or_expression s 87
a logical_and_expression s 88
a logical_xor_expression s 89
a logical_or_expression s 90
a conditional_expression s 91
a assignment_expression s 92
g expression 997
g primary_expression 67
g postfix_expression 76
g unary_expression 78
g unary_operator 79
g multiplicative_expression 80
g additive_expression 81
g shift_expression 82
g relational_expression 83
g equality_expression 84
g binary_and_expression 85
g binary_xor_expression 86
g binary_or_expression 87
g logical_and_expression 88
g logical_xor_expression 89
g logical_or_expression 90
g conditional_expression 91
g assignment_expression 92
s
a ) s 1003
a , s 356
s
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DEFAULT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a statement s 1004
a expression s 874
a block_statements s 875
a variable_decls s 876
a function_decl s 877
a output_statement s 878
a input_statement s 879
a while_loop s 880
a do_while_loop s 881
a for_loop s 882
a if_statement s 883
a else_statement s 884
a test_statement s 885
a switch_statement s 886
a jump_statement s 887
a primary_expression s 18
a ( s 19
a HEX_CONST s 20
a OCTAL_CONST s 21
a BINARY_CONST s 22
a NUMBER_CONST s 23
a CHAR_CONST s 24
a STRING_CONST s 25
a IDENTIFIER s 26
a postfix_expression s 27
a function_call s 28
a ++ s 29
a -- s 30
a unary_expression s 31
a unary_operator s 32
a - s 33
a ! s 34
a ~ s 35
a * s 36
a & s 37
a multiplicative_expression s 38
a additive_expression s 39
a shift_expression s 40
a relational_expression s 41
a equality_expression s 42
a binary_and_expression s 43
a binary_xor_expression s 44
a binary_or_expression s 45
a logical_and_expression s 46
a logical_xor_expression s 47
a logical_or_expression s 48
a conditional_expression s 49
a assignment_expression s 50
a type s 888
a DO s 889
a WHILE s 890
a for s 891
a IF s 892
a ELSE s 893
a TEST s 894
a { s 895
a SWITCH s 896
a OUTPUT s 897
a INPUT s 898
a CONTINUE s 899
a BREAK s 900
a RETURN s 901
a GOTO s 902
g statement 1004
g expression 874
g block_statements 875
g variable_decls 876
g function_decl 877
g output_statement 878
g input_statement 879
g while_loop 880
g do_while_loop 881
g for_loop 882
g if_statement 883
g else_statement 884
g test_statement 885
g switch_statement 886
g jump_statement 887
g primary_expression 18
g postfix_expression 27
g unary_expression 31
g unary_operator 32
g multiplicative_expression 38
g additive_expression 39
g shift_expression 40
g relational_expression 41
g equality_expression 42
g binary_and_expression 43
g binary_xor_expression 44
g binary_or_expression 45
g logical_and_expression 46
g logical_xor_expression 47
g logical_or_expression 48
g conditional_expression 49
g assignment_expression 50
g type 888
s
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s