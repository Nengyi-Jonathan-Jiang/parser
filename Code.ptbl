1005
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 9
a CHAR_CONST s 10
a CONTINUE s 11
a DO s 12
a ELSE s 13
a GOTO s 14
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 17
a INPUT s 18
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 21
a RETURN s 22
a STRING_CONST s 23
a SWITCH s 24
a TEST s 25
a WHILE s 26
a __END__ r 0 statements 
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 32
a conditional_expression s 33
a do_while_loop s 34
a else_statement s 35
a equality_expression s 36
a expression s 37
a for s 38
a for_loop s 39
a function_call s 40
a function_decl s 41
a if_statement s 42
a input_statement s 43
a jump_statement s 44
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 49
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 54
a statement_list s 55
a statements s 56
a switch_statement s 57
a test_statement s 58
a type s 59
a unary_expression s 60
a unary_operator s 61
a variable_decls s 62
a while_loop s 63
a { s 64
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 32
g conditional_expression 33
g do_while_loop 34
g else_statement 35
g equality_expression 36
g expression 37
g for_loop 39
g function_decl 41
g if_statement 42
g input_statement 43
g jump_statement 44
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 49
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 54
g statement_list 55
g statements 56
g switch_statement 57
g test_statement 58
g type 59
g unary_expression 60
g unary_operator 61
g variable_decls 62
g while_loop 63
s
a ! r 1 unary_operator !
a & r 1 unary_operator !
a ( r 1 unary_operator !
a * r 1 unary_operator !
a ++ r 1 unary_operator !
a - r 1 unary_operator !
a -- r 1 unary_operator !
a BINARY_CONST r 1 unary_operator !
a CHAR_CONST r 1 unary_operator !
a HEX_CONST r 1 unary_operator !
a IDENTIFIER r 1 unary_operator !
a NUMBER_CONST r 1 unary_operator !
a OCTAL_CONST r 1 unary_operator !
a STRING_CONST r 1 unary_operator !
a function_call r 1 unary_operator !
a ~ r 1 unary_operator !
s
a ! r 1 unary_operator &
a & r 1 unary_operator &
a ( r 1 unary_operator &
a * r 1 unary_operator &
a ++ r 1 unary_operator &
a - r 1 unary_operator &
a -- r 1 unary_operator &
a BINARY_CONST r 1 unary_operator &
a CHAR_CONST r 1 unary_operator &
a HEX_CONST r 1 unary_operator &
a IDENTIFIER r 1 unary_operator &
a NUMBER_CONST r 1 unary_operator &
a OCTAL_CONST r 1 unary_operator &
a STRING_CONST r 1 unary_operator &
a function_call r 1 unary_operator &
a ~ r 1 unary_operator &
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 81
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 81
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! r 1 unary_operator *
a & r 1 unary_operator *
a ( r 1 unary_operator *
a * r 1 unary_operator *
a ++ r 1 unary_operator *
a - r 1 unary_operator *
a -- r 1 unary_operator *
a BINARY_CONST r 1 unary_operator *
a CHAR_CONST r 1 unary_operator *
a HEX_CONST r 1 unary_operator *
a IDENTIFIER r 1 unary_operator *
a NUMBER_CONST r 1 unary_operator *
a OCTAL_CONST r 1 unary_operator *
a STRING_CONST r 1 unary_operator *
a function_call r 1 unary_operator *
a ~ r 1 unary_operator *
s
a ! r 1 unary_operator ++
a & r 1 unary_operator ++
a ( r 1 unary_operator ++
a * r 1 unary_operator ++
a ++ r 1 unary_operator ++
a - r 1 unary_operator ++
a -- r 1 unary_operator ++
a BINARY_CONST r 1 unary_operator ++
a CHAR_CONST r 1 unary_operator ++
a HEX_CONST r 1 unary_operator ++
a IDENTIFIER r 1 unary_operator ++
a NUMBER_CONST r 1 unary_operator ++
a OCTAL_CONST r 1 unary_operator ++
a STRING_CONST r 1 unary_operator ++
a function_call r 1 unary_operator ++
a ~ r 1 unary_operator ++
s
a ! r 1 unary_operator -
a & r 1 unary_operator -
a ( r 1 unary_operator -
a * r 1 unary_operator -
a ++ r 1 unary_operator -
a - r 1 unary_operator -
a -- r 1 unary_operator -
a BINARY_CONST r 1 unary_operator -
a CHAR_CONST r 1 unary_operator -
a HEX_CONST r 1 unary_operator -
a IDENTIFIER r 1 unary_operator -
a NUMBER_CONST r 1 unary_operator -
a OCTAL_CONST r 1 unary_operator -
a STRING_CONST r 1 unary_operator -
a function_call r 1 unary_operator -
a ~ r 1 unary_operator -
s
a ! r 1 unary_operator --
a & r 1 unary_operator --
a ( r 1 unary_operator --
a * r 1 unary_operator --
a ++ r 1 unary_operator --
a - r 1 unary_operator --
a -- r 1 unary_operator --
a BINARY_CONST r 1 unary_operator --
a CHAR_CONST r 1 unary_operator --
a HEX_CONST r 1 unary_operator --
a IDENTIFIER r 1 unary_operator --
a NUMBER_CONST r 1 unary_operator --
a OCTAL_CONST r 1 unary_operator --
a STRING_CONST r 1 unary_operator --
a function_call r 1 unary_operator --
a ~ r 1 unary_operator --
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a ; r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a ; s 174
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a ; r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a ; s 185
s
a block_statements s 147
a { s 148
g block_statements 147
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 9
a CHAR_CONST s 10
a CONTINUE s 11
a DO s 12
a ELSE s 13
a GOTO s 14
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 17
a INPUT s 18
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 21
a RETURN s 22
a STRING_CONST s 23
a SWITCH s 24
a TEST s 25
a WHILE s 26
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 32
a conditional_expression s 33
a do_while_loop s 34
a else_statement s 35
a equality_expression s 36
a expression s 37
a for s 38
a for_loop s 39
a function_call s 40
a function_decl s 41
a if_statement s 42
a input_statement s 43
a jump_statement s 44
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 49
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 94
a switch_statement s 57
a test_statement s 58
a type s 59
a unary_expression s 60
a unary_operator s 61
a variable_decls s 62
a while_loop s 63
a { s 64
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 32
g conditional_expression 33
g do_while_loop 34
g else_statement 35
g equality_expression 36
g expression 37
g for_loop 39
g function_decl 41
g if_statement 42
g input_statement 43
g jump_statement 44
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 49
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 94
g switch_statement 57
g test_statement 58
g type 59
g unary_expression 60
g unary_operator 61
g variable_decls 62
g while_loop 63
s
a IDENTIFIER s 179
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a ; r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a :: s 167
a ; r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a FUNC r 1 type IDENTIFIER
a VAR r 1 type IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a ( s 166
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 131
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 131
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a ; r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a ; r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 128
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 128
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a ; s 129
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 130
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 130
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a ; r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a ( s 184
s
a ( s 188
s
a ( s 189
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 182
a , r 1 shift_expression additive_expression
a - s 183
a ; r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a , r 1 expression assignment_expression
a ; r 1 expression assignment_expression
s
a & s 149
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a ; r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a ; r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 187
a || r 1 logical_and_expression binary_or_expression
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a ; r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 170
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a ! r 1 statement block_statements
a & r 1 statement block_statements
a ( r 1 statement block_statements
a * r 1 statement block_statements
a ++ r 1 statement block_statements
a - r 1 statement block_statements
a -- r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a BREAK r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a DO r 1 statement block_statements
a ELSE r 1 statement block_statements
a GOTO r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a IF r 1 statement block_statements
a INPUT r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a RETURN r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a SWITCH r 1 statement block_statements
a TEST r 1 statement block_statements
a WHILE r 1 statement block_statements
a __END__ r 1 statement block_statements
a for r 1 statement block_statements
a function_call r 1 statement block_statements
a { r 1 statement block_statements
a ~ r 1 statement block_statements
s
a , r 1 assignment_expression conditional_expression
a ; r 1 assignment_expression conditional_expression
s
a ! r 1 statement do_while_loop
a & r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a * r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a - r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a __END__ r 1 statement do_while_loop
a for r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a { r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
s
a ! r 1 statement else_statement
a & r 1 statement else_statement
a ( r 1 statement else_statement
a * r 1 statement else_statement
a ++ r 1 statement else_statement
a - r 1 statement else_statement
a -- r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a BREAK r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a DO r 1 statement else_statement
a ELSE r 1 statement else_statement
a GOTO r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a IF r 1 statement else_statement
a INPUT r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a RETURN r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a SWITCH r 1 statement else_statement
a TEST r 1 statement else_statement
a WHILE r 1 statement else_statement
a __END__ r 1 statement else_statement
a for r 1 statement else_statement
a function_call r 1 statement else_statement
a { r 1 statement else_statement
a ~ r 1 statement else_statement
s
a != s 168
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a ; r 1 binary_and_expression equality_expression
a == s 169
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a , s 150
a ; s 151
s
a ( s 171
s
a ! r 1 statement for_loop
a & r 1 statement for_loop
a ( r 1 statement for_loop
a * r 1 statement for_loop
a ++ r 1 statement for_loop
a - r 1 statement for_loop
a -- r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a BREAK r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a DO r 1 statement for_loop
a ELSE r 1 statement for_loop
a GOTO r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a IF r 1 statement for_loop
a INPUT r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a RETURN r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a SWITCH r 1 statement for_loop
a TEST r 1 statement for_loop
a WHILE r 1 statement for_loop
a __END__ r 1 statement for_loop
a for r 1 statement for_loop
a function_call r 1 statement for_loop
a { r 1 statement for_loop
a ~ r 1 statement for_loop
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a ; r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a ! r 1 statement function_decl
a & r 1 statement function_decl
a ( r 1 statement function_decl
a * r 1 statement function_decl
a ++ r 1 statement function_decl
a - r 1 statement function_decl
a -- r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a BREAK r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a DO r 1 statement function_decl
a ELSE r 1 statement function_decl
a GOTO r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a IF r 1 statement function_decl
a INPUT r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a RETURN r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a SWITCH r 1 statement function_decl
a TEST r 1 statement function_decl
a WHILE r 1 statement function_decl
a __END__ r 1 statement function_decl
a for r 1 statement function_decl
a function_call r 1 statement function_decl
a { r 1 statement function_decl
a ~ r 1 statement function_decl
s
a ! r 1 statement if_statement
a & r 1 statement if_statement
a ( r 1 statement if_statement
a * r 1 statement if_statement
a ++ r 1 statement if_statement
a - r 1 statement if_statement
a -- r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a BREAK r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a DO r 1 statement if_statement
a ELSE r 1 statement if_statement
a GOTO r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a IF r 1 statement if_statement
a INPUT r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a RETURN r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a SWITCH r 1 statement if_statement
a TEST r 1 statement if_statement
a WHILE r 1 statement if_statement
a __END__ r 1 statement if_statement
a for r 1 statement if_statement
a function_call r 1 statement if_statement
a { r 1 statement if_statement
a ~ r 1 statement if_statement
s
a ! r 1 statement input_statement
a & r 1 statement input_statement
a ( r 1 statement input_statement
a * r 1 statement input_statement
a ++ r 1 statement input_statement
a - r 1 statement input_statement
a -- r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a BREAK r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a DO r 1 statement input_statement
a ELSE r 1 statement input_statement
a GOTO r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a IF r 1 statement input_statement
a INPUT r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a RETURN r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a SWITCH r 1 statement input_statement
a TEST r 1 statement input_statement
a WHILE r 1 statement input_statement
a __END__ r 1 statement input_statement
a for r 1 statement input_statement
a function_call r 1 statement input_statement
a { r 1 statement input_statement
a ~ r 1 statement input_statement
s
a ! r 1 statement jump_statement
a & r 1 statement jump_statement
a ( r 1 statement jump_statement
a * r 1 statement jump_statement
a ++ r 1 statement jump_statement
a - r 1 statement jump_statement
a -- r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a DO r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a GOTO r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a IF r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a TEST r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a __END__ r 1 statement jump_statement
a for r 1 statement jump_statement
a function_call r 1 statement jump_statement
a { r 1 statement jump_statement
a ~ r 1 statement jump_statement
s
a && s 186
a , r 1 logical_xor_expression logical_and_expression
a ; r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a , r 1 conditional_expression logical_or_expression
a ; r 1 conditional_expression logical_or_expression
a ? s 172
a || s 173
s
a , r 1 logical_or_expression logical_xor_expression
a ; r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 157
a || r 1 logical_or_expression logical_xor_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 158
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 159
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 160
a ; r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a ! r 1 statement output_statement
a & r 1 statement output_statement
a ( r 1 statement output_statement
a * r 1 statement output_statement
a ++ r 1 statement output_statement
a - r 1 statement output_statement
a -- r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a BREAK r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a DO r 1 statement output_statement
a ELSE r 1 statement output_statement
a GOTO r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a IF r 1 statement output_statement
a INPUT r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a RETURN r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a SWITCH r 1 statement output_statement
a TEST r 1 statement output_statement
a WHILE r 1 statement output_statement
a __END__ r 1 statement output_statement
a for r 1 statement output_statement
a function_call r 1 statement output_statement
a { r 1 statement output_statement
a ~ r 1 statement output_statement
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 161
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 162
a -= r 1 unary_expression postfix_expression
a -> s 163
a . s 164
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a ; r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 165
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a ; r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a ; r 1 equality_expression relational_expression
a < s 175
a <= s 176
a == r 1 equality_expression relational_expression
a > s 177
a >= s 178
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a ; r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 180
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 181
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a ! r 1 statement_list statement
a & r 1 statement_list statement
a ( r 1 statement_list statement
a * r 1 statement_list statement
a ++ r 1 statement_list statement
a - r 1 statement_list statement
a -- r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a BREAK r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a DO r 1 statement_list statement
a ELSE r 1 statement_list statement
a GOTO r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a IF r 1 statement_list statement
a INPUT r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a RETURN r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a SWITCH r 1 statement_list statement
a TEST r 1 statement_list statement
a WHILE r 1 statement_list statement
a __END__ r 1 statement_list statement
a for r 1 statement_list statement
a function_call r 1 statement_list statement
a { r 1 statement_list statement
a ~ r 1 statement_list statement
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 9
a CHAR_CONST s 10
a CONTINUE s 11
a DO s 12
a ELSE s 13
a GOTO s 14
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 17
a INPUT s 18
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 21
a RETURN s 22
a STRING_CONST s 23
a SWITCH s 24
a TEST s 25
a WHILE s 26
a __END__ r 1 statements statement_list
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 32
a conditional_expression s 33
a do_while_loop s 34
a else_statement s 35
a equality_expression s 36
a expression s 37
a for s 38
a for_loop s 39
a function_call s 40
a function_decl s 41
a if_statement s 42
a input_statement s 43
a jump_statement s 44
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 49
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 93
a switch_statement s 57
a test_statement s 58
a type s 59
a unary_expression s 60
a unary_operator s 61
a variable_decls s 62
a while_loop s 63
a { s 64
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 32
g conditional_expression 33
g do_while_loop 34
g else_statement 35
g equality_expression 36
g expression 37
g for_loop 39
g function_decl 41
g if_statement 42
g input_statement 43
g jump_statement 44
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 49
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 93
g switch_statement 57
g test_statement 58
g type 59
g unary_expression 60
g unary_operator 61
g variable_decls 62
g while_loop 63
s
a __END__ a 
s
a ! r 1 statement switch_statement
a & r 1 statement switch_statement
a ( r 1 statement switch_statement
a * r 1 statement switch_statement
a ++ r 1 statement switch_statement
a - r 1 statement switch_statement
a -- r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a DO r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a GOTO r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a IF r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a TEST r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a __END__ r 1 statement switch_statement
a for r 1 statement switch_statement
a function_call r 1 statement switch_statement
a { r 1 statement switch_statement
a ~ r 1 statement switch_statement
s
a ! r 1 statement test_statement
a & r 1 statement test_statement
a ( r 1 statement test_statement
a * r 1 statement test_statement
a ++ r 1 statement test_statement
a - r 1 statement test_statement
a -- r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a BREAK r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a DO r 1 statement test_statement
a ELSE r 1 statement test_statement
a GOTO r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a IF r 1 statement test_statement
a INPUT r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a RETURN r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a SWITCH r 1 statement test_statement
a TEST r 1 statement test_statement
a WHILE r 1 statement test_statement
a __END__ r 1 statement test_statement
a for r 1 statement test_statement
a function_call r 1 statement test_statement
a { r 1 statement test_statement
a ~ r 1 statement test_statement
s
a & s 152
a * s 153
a < s 154
a FUNC s 155
a VAR s 156
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 132
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 133
a * r 1 multiplicative_expression unary_expression
a *= s 134
a + r 1 multiplicative_expression unary_expression
a += s 135
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 136
a / r 1 multiplicative_expression unary_expression
a /= s 137
a ; r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 138
a <= r 1 multiplicative_expression unary_expression
a = s 139
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 140
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 141
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 142
a | r 1 multiplicative_expression unary_expression
a |= s 143
a || r 1 multiplicative_expression unary_expression
g assignment_operator 142
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a function_call s 40
a postfix_expression s 144
a primary_expression s 51
a unary_expression s 145
a unary_operator s 146
a ~ s 65
g postfix_expression 144
g primary_expression 51
g unary_expression 145
g unary_operator 146
s
a ! r 1 statement variable_decls
a & r 1 statement variable_decls
a ( r 1 statement variable_decls
a * r 1 statement variable_decls
a ++ r 1 statement variable_decls
a - r 1 statement variable_decls
a -- r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a DO r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a GOTO r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a IF r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a TEST r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a __END__ r 1 statement variable_decls
a for r 1 statement variable_decls
a function_call r 1 statement variable_decls
a { r 1 statement variable_decls
a ~ r 1 statement variable_decls
s
a ! r 1 statement while_loop
a & r 1 statement while_loop
a ( r 1 statement while_loop
a * r 1 statement while_loop
a ++ r 1 statement while_loop
a - r 1 statement while_loop
a -- r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a BREAK r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a DO r 1 statement while_loop
a ELSE r 1 statement while_loop
a GOTO r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a IF r 1 statement while_loop
a INPUT r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a RETURN r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a SWITCH r 1 statement while_loop
a TEST r 1 statement while_loop
a WHILE r 1 statement while_loop
a __END__ r 1 statement while_loop
a for r 1 statement while_loop
a function_call r 1 statement while_loop
a { r 1 statement while_loop
a ~ r 1 statement while_loop
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 118
a statement_list s 119
a statements s 120
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a } r 0 statements 
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 118
g statement_list 119
g statements 120
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a ! r 1 unary_operator ~
a & r 1 unary_operator ~
a ( r 1 unary_operator ~
a * r 1 unary_operator ~
a ++ r 1 unary_operator ~
a - r 1 unary_operator ~
a -- r 1 unary_operator ~
a BINARY_CONST r 1 unary_operator ~
a CHAR_CONST r 1 unary_operator ~
a HEX_CONST r 1 unary_operator ~
a IDENTIFIER r 1 unary_operator ~
a NUMBER_CONST r 1 unary_operator ~
a OCTAL_CONST r 1 unary_operator ~
a STRING_CONST r 1 unary_operator ~
a function_call r 1 unary_operator ~
a ~ r 1 unary_operator ~
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 220
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 220
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ) r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ) r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ) r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ) r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ) r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ) r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ) r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ) r 1 shift_expression additive_expression
a + s 363
a , r 1 shift_expression additive_expression
a - s 364
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a ) r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a & s 335
a && r 1 binary_xor_expression binary_and_expression
a ) r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a && r 1 logical_and_expression binary_or_expression
a ) r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 373
a || r 1 logical_and_expression binary_or_expression
s
a && r 1 binary_or_expression binary_xor_expression
a ) r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 351
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a ) r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a != s 349
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ) r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a == s 350
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a ) s 365
a , s 366
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ) r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a && s 372
a ) r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a ) r 1 conditional_expression logical_or_expression
a , r 1 conditional_expression logical_or_expression
a ? s 353
a || s 354
s
a ) r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 339
a || r 1 logical_or_expression logical_xor_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 340
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ) r 1 additive_expression multiplicative_expression
a * s 341
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 342
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ) r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 343
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 344
a -= r 1 unary_expression postfix_expression
a -> s 345
a . s 346
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 347
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ) r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ) r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a < s 356
a <= s 357
a == r 1 equality_expression relational_expression
a > s 358
a >= s 359
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ) r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 361
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 362
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 132
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 133
a ) r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a *= s 134
a + r 1 multiplicative_expression unary_expression
a += s 135
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 136
a / r 1 multiplicative_expression unary_expression
a /= s 137
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 138
a <= r 1 multiplicative_expression unary_expression
a = s 139
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 140
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 141
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 306
a | r 1 multiplicative_expression unary_expression
a |= s 143
a || r 1 multiplicative_expression unary_expression
g assignment_operator 306
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a function_call s 82
a postfix_expression s 317
a primary_expression s 88
a unary_expression s 318
a unary_operator s 319
a ~ s 65
g postfix_expression 317
g primary_expression 88
g unary_expression 318
g unary_operator 319
s
a ! r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a __END__ r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
s
a ! r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a __END__ r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
s
a ; s 355
s
a ; s 371
s
a block_statements s 334
a { s 148
g block_statements 334
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 255
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 255
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a IDENTIFIER s 360
s
a ( s 348
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 259
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 259
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 256
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 256
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a ; s 257
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 258
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 258
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ( s 370
s
a ( s 374
s
a ( s 375
s
a ! r 1 statement block_statements
a & r 1 statement block_statements
a ( r 1 statement block_statements
a * r 1 statement block_statements
a ++ r 1 statement block_statements
a - r 1 statement block_statements
a -- r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a BREAK r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a DO r 1 statement block_statements
a ELSE r 1 statement block_statements
a GOTO r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a IF r 1 statement block_statements
a INPUT r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a RETURN r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a SWITCH r 1 statement block_statements
a TEST r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a function_call r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a ~ r 1 statement block_statements
s
a ! r 1 statement do_while_loop
a & r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a * r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a - r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
s
a ! r 1 statement else_statement
a & r 1 statement else_statement
a ( r 1 statement else_statement
a * r 1 statement else_statement
a ++ r 1 statement else_statement
a - r 1 statement else_statement
a -- r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a BREAK r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a DO r 1 statement else_statement
a ELSE r 1 statement else_statement
a GOTO r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a IF r 1 statement else_statement
a INPUT r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a RETURN r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a SWITCH r 1 statement else_statement
a TEST r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a function_call r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a ~ r 1 statement else_statement
s
a , s 150
a ; s 336
s
a ( s 352
s
a ! r 1 statement for_loop
a & r 1 statement for_loop
a ( r 1 statement for_loop
a * r 1 statement for_loop
a ++ r 1 statement for_loop
a - r 1 statement for_loop
a -- r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a BREAK r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a DO r 1 statement for_loop
a ELSE r 1 statement for_loop
a GOTO r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a IF r 1 statement for_loop
a INPUT r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a RETURN r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a SWITCH r 1 statement for_loop
a TEST r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a function_call r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a ~ r 1 statement for_loop
s
a ! r 1 statement function_decl
a & r 1 statement function_decl
a ( r 1 statement function_decl
a * r 1 statement function_decl
a ++ r 1 statement function_decl
a - r 1 statement function_decl
a -- r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a BREAK r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a DO r 1 statement function_decl
a ELSE r 1 statement function_decl
a GOTO r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a IF r 1 statement function_decl
a INPUT r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a RETURN r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a SWITCH r 1 statement function_decl
a TEST r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a function_call r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a ~ r 1 statement function_decl
s
a ! r 1 statement if_statement
a & r 1 statement if_statement
a ( r 1 statement if_statement
a * r 1 statement if_statement
a ++ r 1 statement if_statement
a - r 1 statement if_statement
a -- r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a BREAK r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a DO r 1 statement if_statement
a ELSE r 1 statement if_statement
a GOTO r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a IF r 1 statement if_statement
a INPUT r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a RETURN r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a SWITCH r 1 statement if_statement
a TEST r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a function_call r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a ~ r 1 statement if_statement
s
a ! r 1 statement input_statement
a & r 1 statement input_statement
a ( r 1 statement input_statement
a * r 1 statement input_statement
a ++ r 1 statement input_statement
a - r 1 statement input_statement
a -- r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a BREAK r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a DO r 1 statement input_statement
a ELSE r 1 statement input_statement
a GOTO r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a IF r 1 statement input_statement
a INPUT r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a RETURN r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a SWITCH r 1 statement input_statement
a TEST r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a function_call r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a ~ r 1 statement input_statement
s
a ! r 1 statement jump_statement
a & r 1 statement jump_statement
a ( r 1 statement jump_statement
a * r 1 statement jump_statement
a ++ r 1 statement jump_statement
a - r 1 statement jump_statement
a -- r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a DO r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a GOTO r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a IF r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a TEST r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a function_call r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a ~ r 1 statement jump_statement
s
a ! r 1 statement output_statement
a & r 1 statement output_statement
a ( r 1 statement output_statement
a * r 1 statement output_statement
a ++ r 1 statement output_statement
a - r 1 statement output_statement
a -- r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a BREAK r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a DO r 1 statement output_statement
a ELSE r 1 statement output_statement
a GOTO r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a IF r 1 statement output_statement
a INPUT r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a RETURN r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a SWITCH r 1 statement output_statement
a TEST r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a function_call r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a ~ r 1 statement output_statement
s
a ! r 1 statement_list statement
a & r 1 statement_list statement
a ( r 1 statement_list statement
a * r 1 statement_list statement
a ++ r 1 statement_list statement
a - r 1 statement_list statement
a -- r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a BREAK r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a DO r 1 statement_list statement
a ELSE r 1 statement_list statement
a GOTO r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a IF r 1 statement_list statement
a INPUT r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a RETURN r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a SWITCH r 1 statement_list statement
a TEST r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a function_call r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a ~ r 1 statement_list statement
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 254
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a } r 1 statements statement_list
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 254
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a } s 380
s
a ! r 1 statement switch_statement
a & r 1 statement switch_statement
a ( r 1 statement switch_statement
a * r 1 statement switch_statement
a ++ r 1 statement switch_statement
a - r 1 statement switch_statement
a -- r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a DO r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a GOTO r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a IF r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a TEST r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a function_call r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a ~ r 1 statement switch_statement
s
a ! r 1 statement test_statement
a & r 1 statement test_statement
a ( r 1 statement test_statement
a * r 1 statement test_statement
a ++ r 1 statement test_statement
a - r 1 statement test_statement
a -- r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a BREAK r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a DO r 1 statement test_statement
a ELSE r 1 statement test_statement
a GOTO r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a IF r 1 statement test_statement
a INPUT r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a RETURN r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a SWITCH r 1 statement test_statement
a TEST r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a function_call r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a ~ r 1 statement test_statement
s
a & s 152
a * s 153
a < s 154
a FUNC s 337
a VAR s 338
s
a ! r 1 statement variable_decls
a & r 1 statement variable_decls
a ( r 1 statement variable_decls
a * r 1 statement variable_decls
a ++ r 1 statement variable_decls
a - r 1 statement variable_decls
a -- r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a DO r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a GOTO r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a IF r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a TEST r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a function_call r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a ~ r 1 statement variable_decls
s
a ! r 1 statement while_loop
a & r 1 statement while_loop
a ( r 1 statement while_loop
a * r 1 statement while_loop
a ++ r 1 statement while_loop
a - r 1 statement while_loop
a -- r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a BREAK r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a DO r 1 statement while_loop
a ELSE r 1 statement while_loop
a GOTO r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a IF r 1 statement while_loop
a INPUT r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a RETURN r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a SWITCH r 1 statement while_loop
a TEST r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a function_call r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a ~ r 1 statement while_loop
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 118
a statement_list s 119
a statements s 252
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a } r 0 statements 
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 118
g statement_list 119
g statements 252
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a ; r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a , s 150
a ; s 367
s
a ! r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a __END__ r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
s
a , s 150
a ; s 368
s
a , s 150
a ; s 369
s
a ! r 1 assignment_operator %=
a & r 1 assignment_operator %=
a ( r 1 assignment_operator %=
a * r 1 assignment_operator %=
a ++ r 1 assignment_operator %=
a - r 1 assignment_operator %=
a -- r 1 assignment_operator %=
a BINARY_CONST r 1 assignment_operator %=
a CHAR_CONST r 1 assignment_operator %=
a HEX_CONST r 1 assignment_operator %=
a IDENTIFIER r 1 assignment_operator %=
a NUMBER_CONST r 1 assignment_operator %=
a OCTAL_CONST r 1 assignment_operator %=
a STRING_CONST r 1 assignment_operator %=
a function_call r 1 assignment_operator %=
a ~ r 1 assignment_operator %=
s
a ! r 1 assignment_operator &=
a & r 1 assignment_operator &=
a ( r 1 assignment_operator &=
a * r 1 assignment_operator &=
a ++ r 1 assignment_operator &=
a - r 1 assignment_operator &=
a -- r 1 assignment_operator &=
a BINARY_CONST r 1 assignment_operator &=
a CHAR_CONST r 1 assignment_operator &=
a HEX_CONST r 1 assignment_operator &=
a IDENTIFIER r 1 assignment_operator &=
a NUMBER_CONST r 1 assignment_operator &=
a OCTAL_CONST r 1 assignment_operator &=
a STRING_CONST r 1 assignment_operator &=
a function_call r 1 assignment_operator &=
a ~ r 1 assignment_operator &=
s
a ! r 1 assignment_operator *=
a & r 1 assignment_operator *=
a ( r 1 assignment_operator *=
a * r 1 assignment_operator *=
a ++ r 1 assignment_operator *=
a - r 1 assignment_operator *=
a -- r 1 assignment_operator *=
a BINARY_CONST r 1 assignment_operator *=
a CHAR_CONST r 1 assignment_operator *=
a HEX_CONST r 1 assignment_operator *=
a IDENTIFIER r 1 assignment_operator *=
a NUMBER_CONST r 1 assignment_operator *=
a OCTAL_CONST r 1 assignment_operator *=
a STRING_CONST r 1 assignment_operator *=
a function_call r 1 assignment_operator *=
a ~ r 1 assignment_operator *=
s
a ! r 1 assignment_operator +=
a & r 1 assignment_operator +=
a ( r 1 assignment_operator +=
a * r 1 assignment_operator +=
a ++ r 1 assignment_operator +=
a - r 1 assignment_operator +=
a -- r 1 assignment_operator +=
a BINARY_CONST r 1 assignment_operator +=
a CHAR_CONST r 1 assignment_operator +=
a HEX_CONST r 1 assignment_operator +=
a IDENTIFIER r 1 assignment_operator +=
a NUMBER_CONST r 1 assignment_operator +=
a OCTAL_CONST r 1 assignment_operator +=
a STRING_CONST r 1 assignment_operator +=
a function_call r 1 assignment_operator +=
a ~ r 1 assignment_operator +=
s
a ! r 1 assignment_operator -=
a & r 1 assignment_operator -=
a ( r 1 assignment_operator -=
a * r 1 assignment_operator -=
a ++ r 1 assignment_operator -=
a - r 1 assignment_operator -=
a -- r 1 assignment_operator -=
a BINARY_CONST r 1 assignment_operator -=
a CHAR_CONST r 1 assignment_operator -=
a HEX_CONST r 1 assignment_operator -=
a IDENTIFIER r 1 assignment_operator -=
a NUMBER_CONST r 1 assignment_operator -=
a OCTAL_CONST r 1 assignment_operator -=
a STRING_CONST r 1 assignment_operator -=
a function_call r 1 assignment_operator -=
a ~ r 1 assignment_operator -=
s
a ! r 1 assignment_operator /=
a & r 1 assignment_operator /=
a ( r 1 assignment_operator /=
a * r 1 assignment_operator /=
a ++ r 1 assignment_operator /=
a - r 1 assignment_operator /=
a -- r 1 assignment_operator /=
a BINARY_CONST r 1 assignment_operator /=
a CHAR_CONST r 1 assignment_operator /=
a HEX_CONST r 1 assignment_operator /=
a IDENTIFIER r 1 assignment_operator /=
a NUMBER_CONST r 1 assignment_operator /=
a OCTAL_CONST r 1 assignment_operator /=
a STRING_CONST r 1 assignment_operator /=
a function_call r 1 assignment_operator /=
a ~ r 1 assignment_operator /=
s
a ! r 1 assignment_operator <<=
a & r 1 assignment_operator <<=
a ( r 1 assignment_operator <<=
a * r 1 assignment_operator <<=
a ++ r 1 assignment_operator <<=
a - r 1 assignment_operator <<=
a -- r 1 assignment_operator <<=
a BINARY_CONST r 1 assignment_operator <<=
a CHAR_CONST r 1 assignment_operator <<=
a HEX_CONST r 1 assignment_operator <<=
a IDENTIFIER r 1 assignment_operator <<=
a NUMBER_CONST r 1 assignment_operator <<=
a OCTAL_CONST r 1 assignment_operator <<=
a STRING_CONST r 1 assignment_operator <<=
a function_call r 1 assignment_operator <<=
a ~ r 1 assignment_operator <<=
s
a ! r 1 assignment_operator =
a & r 1 assignment_operator =
a ( r 1 assignment_operator =
a * r 1 assignment_operator =
a ++ r 1 assignment_operator =
a - r 1 assignment_operator =
a -- r 1 assignment_operator =
a BINARY_CONST r 1 assignment_operator =
a CHAR_CONST r 1 assignment_operator =
a HEX_CONST r 1 assignment_operator =
a IDENTIFIER r 1 assignment_operator =
a NUMBER_CONST r 1 assignment_operator =
a OCTAL_CONST r 1 assignment_operator =
a STRING_CONST r 1 assignment_operator =
a function_call r 1 assignment_operator =
a ~ r 1 assignment_operator =
s
a ! r 1 assignment_operator >>=
a & r 1 assignment_operator >>=
a ( r 1 assignment_operator >>=
a * r 1 assignment_operator >>=
a ++ r 1 assignment_operator >>=
a - r 1 assignment_operator >>=
a -- r 1 assignment_operator >>=
a BINARY_CONST r 1 assignment_operator >>=
a CHAR_CONST r 1 assignment_operator >>=
a HEX_CONST r 1 assignment_operator >>=
a IDENTIFIER r 1 assignment_operator >>=
a NUMBER_CONST r 1 assignment_operator >>=
a OCTAL_CONST r 1 assignment_operator >>=
a STRING_CONST r 1 assignment_operator >>=
a function_call r 1 assignment_operator >>=
a ~ r 1 assignment_operator >>=
s
a ! r 1 assignment_operator ^=
a & r 1 assignment_operator ^=
a ( r 1 assignment_operator ^=
a * r 1 assignment_operator ^=
a ++ r 1 assignment_operator ^=
a - r 1 assignment_operator ^=
a -- r 1 assignment_operator ^=
a BINARY_CONST r 1 assignment_operator ^=
a CHAR_CONST r 1 assignment_operator ^=
a HEX_CONST r 1 assignment_operator ^=
a IDENTIFIER r 1 assignment_operator ^=
a NUMBER_CONST r 1 assignment_operator ^=
a OCTAL_CONST r 1 assignment_operator ^=
a STRING_CONST r 1 assignment_operator ^=
a function_call r 1 assignment_operator ^=
a ~ r 1 assignment_operator ^=
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 260
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 260
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! r 1 assignment_operator |=
a & r 1 assignment_operator |=
a ( r 1 assignment_operator |=
a * r 1 assignment_operator |=
a ++ r 1 assignment_operator |=
a - r 1 assignment_operator |=
a -- r 1 assignment_operator |=
a BINARY_CONST r 1 assignment_operator |=
a CHAR_CONST r 1 assignment_operator |=
a HEX_CONST r 1 assignment_operator |=
a IDENTIFIER r 1 assignment_operator |=
a NUMBER_CONST r 1 assignment_operator |=
a OCTAL_CONST r 1 assignment_operator |=
a STRING_CONST r 1 assignment_operator |=
a function_call r 1 assignment_operator |=
a ~ r 1 assignment_operator |=
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 161
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 162
a -= r 1 unary_expression postfix_expression
a -> s 163
a . s 164
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a ; r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 165
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a ; r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a function_call s 40
a postfix_expression s 144
a primary_expression s 51
a unary_expression s 320
a unary_operator s 146
a ~ s 65
g postfix_expression 144
g primary_expression 51
g unary_expression 320
g unary_operator 146
s
a WHILE s 379
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 118
a statement_list s 119
a statements s 253
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a } r 0 statements 
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 118
g statement_list 119
g statements 253
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a equality_expression s 308
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 52
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g equality_expression 308
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 52
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 261
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 261
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! r 2 statement expression ;
a & r 2 statement expression ;
a ( r 2 statement expression ;
a * r 2 statement expression ;
a ++ r 2 statement expression ;
a - r 2 statement expression ;
a -- r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a BREAK r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a DO r 2 statement expression ;
a ELSE r 2 statement expression ;
a GOTO r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a IF r 2 statement expression ;
a INPUT r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a RETURN r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a SWITCH r 2 statement expression ;
a TEST r 2 statement expression ;
a WHILE r 2 statement expression ;
a __END__ r 2 statement expression ;
a for r 2 statement expression ;
a function_call r 2 statement expression ;
a { r 2 statement expression ;
a ~ r 2 statement expression ;
s
a & r 2 type type &
a * r 2 type type &
a < r 2 type type &
a FUNC r 2 type type &
a VAR r 2 type type &
s
a & r 2 type type *
a * r 2 type type *
a < r 2 type type *
a FUNC r 2 type type *
a VAR r 2 type type *
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 194
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a additive_expression s 198
a assignment_expression s 199
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a conditional_expression s 203
a equality_expression s 204
a expression s 205
a function_call s 206
a logical_and_expression s 207
a logical_or_expression s 208
a logical_xor_expression s 209
a multiplicative_expression s 210
a postfix_expression s 211
a primary_expression s 212
a relational_expression s 213
a shift_expression s 214
a template_param s 215
a template_params s 216
a type s 217
a unary_expression s 218
a unary_operator s 219
a ~ s 65
g additive_expression 198
g assignment_expression 199
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g conditional_expression 203
g equality_expression 204
g expression 205
g logical_and_expression 207
g logical_or_expression 208
g logical_xor_expression 209
g multiplicative_expression 210
g postfix_expression 211
g primary_expression 212
g relational_expression 213
g shift_expression 214
g template_param 215
g template_params 216
g type 217
g unary_expression 218
g unary_operator 219
s
a IDENTIFIER s 376
s
a IDENTIFIER s 331
a variable_inits s 332
a variable_name_and_assign s 333
g variable_inits 332
g variable_name_and_assign 333
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a equality_expression s 36
a function_call s 270
a logical_and_expression s 276
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 52
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g equality_expression 36
g logical_and_expression 276
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 52
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a function_call s 270
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 325
a unary_operator s 275
a ~ s 65
g postfix_expression 272
g primary_expression 273
g unary_expression 325
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a function_call s 270
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 324
a unary_operator s 275
a ~ s 65
g postfix_expression 272
g primary_expression 273
g unary_expression 324
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a function_call s 270
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 323
a unary_operator s 275
a ~ s 65
g postfix_expression 272
g primary_expression 273
g unary_expression 323
g unary_operator 275
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a ; r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a ; r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 377
s
a IDENTIFIER s 381
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 294
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 294
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 221
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 221
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a IDENTIFIER s 326
a type s 327
g type 327
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 310
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 310
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 309
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 309
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a binary_and_expression s 307
a equality_expression s 36
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 52
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g binary_and_expression 307
g equality_expression 36
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 52
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a IDENTIFIER s 328
a type s 329
a variable_decls s 330
g type 329
g variable_decls 330
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 234
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a expression s 240
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 234
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g expression 240
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a equality_expression s 36
a function_call s 270
a logical_and_expression s 45
a logical_xor_expression s 271
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 52
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g equality_expression 36
g logical_and_expression 45
g logical_xor_expression 271
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 52
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a ! r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a __END__ r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a shift_expression s 313
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g shift_expression 313
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a shift_expression s 311
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g shift_expression 311
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a shift_expression s 312
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g shift_expression 312
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a shift_expression s 314
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g shift_expression 314
g unary_expression 274
g unary_operator 275
s
a ; s 378
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 315
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 315
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 316
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 316
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a function_call s 270
a multiplicative_expression s 321
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g multiplicative_expression 321
g postfix_expression 272
g primary_expression 273
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a function_call s 270
a multiplicative_expression s 322
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g multiplicative_expression 322
g postfix_expression 272
g primary_expression 273
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 222
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 222
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a __END__ r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a binary_and_expression s 29
a binary_or_expression s 277
a binary_xor_expression s 31
a equality_expression s 36
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 52
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g binary_and_expression 29
g binary_or_expression 277
g binary_xor_expression 31
g equality_expression 36
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 52
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a additive_expression s 27
a binary_and_expression s 29
a binary_xor_expression s 278
a equality_expression s 36
a function_call s 270
a multiplicative_expression s 48
a postfix_expression s 272
a primary_expression s 273
a relational_expression s 52
a shift_expression s 53
a unary_expression s 274
a unary_operator s 275
a ~ s 65
g additive_expression 27
g binary_and_expression 29
g binary_xor_expression 278
g equality_expression 36
g multiplicative_expression 48
g postfix_expression 272
g primary_expression 273
g relational_expression 52
g shift_expression 53
g unary_expression 274
g unary_operator 275
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 223
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 223
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 224
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 224
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 384
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 384
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a :: s 481
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 525
a , r 1 shift_expression additive_expression
a - s 526
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a , r 1 expression assignment_expression
a > r 1 expression assignment_expression
s
a & s 447
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a > r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a > r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 545
a || r 1 logical_and_expression binary_or_expression
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a > r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 490
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a , r 1 assignment_expression conditional_expression
a > r 1 assignment_expression conditional_expression
s
a != s 485
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a == s 486
a > r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a , s 492
a > r 1 template_param expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a && s 542
a , r 1 logical_xor_expression logical_and_expression
a > r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a , r 1 conditional_expression logical_or_expression
a > r 1 conditional_expression logical_or_expression
a ? s 499
a || s 500
s
a , r 1 logical_or_expression logical_xor_expression
a > r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 450
a || r 1 logical_or_expression logical_xor_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 458
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 459
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 460
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 471
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 472
a -= r 1 unary_expression postfix_expression
a -> s 473
a . s 474
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 475
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a < s 507
a <= s 508
a == r 1 equality_expression relational_expression
a > s 509
a >= s 510
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 519
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 520
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a , r 1 template_params template_param
a > r 1 template_params template_param
s
a , s 548
a > s 549
s
a & s 443
a * s 444
a , r 1 template_param type
a < s 445
a > r 1 template_param type
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 132
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 133
a * r 1 multiplicative_expression unary_expression
a *= s 134
a + r 1 multiplicative_expression unary_expression
a += s 135
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 136
a / r 1 multiplicative_expression unary_expression
a /= s 137
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 138
a <= r 1 multiplicative_expression unary_expression
a = s 139
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 140
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 141
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 412
a | r 1 multiplicative_expression unary_expression
a |= s 143
a || r 1 multiplicative_expression unary_expression
g assignment_operator 412
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 431
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a function_call s 206
a postfix_expression s 432
a primary_expression s 212
a unary_expression s 433
a unary_operator s 434
a ~ s 65
g postfix_expression 432
g primary_expression 212
g unary_expression 433
g unary_operator 434
s
a ) s 529
a , s 366
s
a ) s 530
a , s 366
s
a ) s 531
a , s 366
s
a ) s 532
a , s 366
s
a ) s 533
a , s 366
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 382
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 382
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 521
a , r 1 shift_expression additive_expression
a - s 522
a : r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a , r 1 expression assignment_expression
a : r 1 expression assignment_expression
s
a & s 446
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a : r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a : r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 544
a || r 1 logical_and_expression binary_or_expression
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a : r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 489
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a , r 1 assignment_expression conditional_expression
a : r 1 assignment_expression conditional_expression
s
a != s 483
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a : r 1 binary_and_expression equality_expression
a == s 484
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a , s 534
a : s 535
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a && s 541
a , r 1 logical_xor_expression logical_and_expression
a : r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a , r 1 conditional_expression logical_or_expression
a : r 1 conditional_expression logical_or_expression
a ? s 497
a || s 498
s
a , r 1 logical_or_expression logical_xor_expression
a : r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 449
a || r 1 logical_or_expression logical_xor_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 452
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 453
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 454
a : r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 461
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 462
a -= r 1 unary_expression postfix_expression
a -> s 463
a . s 464
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 465
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a : r 1 equality_expression relational_expression
a < s 503
a <= s 504
a == r 1 equality_expression relational_expression
a > s 505
a >= s 506
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a : r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 515
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 516
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 132
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 133
a * r 1 multiplicative_expression unary_expression
a *= s 134
a + r 1 multiplicative_expression unary_expression
a += s 135
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 136
a / r 1 multiplicative_expression unary_expression
a /= s 137
a : r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 138
a <= r 1 multiplicative_expression unary_expression
a = s 139
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 140
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 141
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 411
a | r 1 multiplicative_expression unary_expression
a |= s 143
a || r 1 multiplicative_expression unary_expression
g assignment_operator 411
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a function_call s 241
a postfix_expression s 425
a primary_expression s 247
a unary_expression s 426
a unary_operator s 427
a ~ s 65
g postfix_expression 425
g primary_expression 247
g unary_expression 426
g unary_operator 427
s
a } s 554
s
a } s 555
s
a ! r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
s
a ! r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
s
a , s 150
a ; s 536
s
a ! r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
s
a , s 150
a ; s 537
s
a , s 150
a ; s 538
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a ; r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a , r 3 expression expression , assignment_expression
a ; r 3 expression expression , assignment_expression
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 385
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 385
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a ; r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a ; r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a ; r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a ; r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a ; r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a ; r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a ; r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a ; r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ; r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 157
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 476
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 477
a -> s 478
a . s 479
a / r 1 unary_expression postfix_expression
a ; r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 480
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a ; r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a ; r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a ! s 1
a & s 2
a ( s 262
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 263
a CHAR_CONST s 264
a HEX_CONST s 265
a IDENTIFIER s 266
a NUMBER_CONST s 267
a OCTAL_CONST s 268
a STRING_CONST s 269
a function_call s 270
a postfix_expression s 272
a primary_expression s 273
a unary_expression s 440
a unary_operator s 275
a ~ s 65
g postfix_expression 272
g primary_expression 273
g unary_expression 440
g unary_operator 275
s
a && s 186
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ; r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a ; r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 187
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ; r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 170
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 383
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 383
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 523
a , r 1 shift_expression additive_expression
a - s 524
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ] r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a , r 1 expression assignment_expression
a ] r 1 expression assignment_expression
s
a & s 448
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ] r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ] r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 546
a || r 1 logical_and_expression binary_or_expression
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ] r 1 binary_or_expression binary_xor_expression
a ^ s 491
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a , r 1 assignment_expression conditional_expression
a ] r 1 assignment_expression conditional_expression
s
a != s 487
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a == s 488
a ? r 1 binary_and_expression equality_expression
a ] r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a , s 539
a ] s 540
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a && s 543
a , r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ] r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a , r 1 conditional_expression logical_or_expression
a ? s 501
a ] r 1 conditional_expression logical_or_expression
a || s 502
s
a , r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ] r 1 logical_or_expression logical_xor_expression
a ^^ s 451
a || r 1 logical_or_expression logical_xor_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 455
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 456
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 457
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ] r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 466
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 467
a -= r 1 unary_expression postfix_expression
a -> s 468
a . s 469
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 470
a ] r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a < s 511
a <= s 512
a == r 1 equality_expression relational_expression
a > s 513
a >= s 514
a ? r 1 equality_expression relational_expression
a ] r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 517
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 518
a ? r 1 relational_expression shift_expression
a ] r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 132
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 133
a * r 1 multiplicative_expression unary_expression
a *= s 134
a + r 1 multiplicative_expression unary_expression
a += s 135
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 136
a / r 1 multiplicative_expression unary_expression
a /= s 137
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 138
a <= r 1 multiplicative_expression unary_expression
a = s 139
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 140
a ? r 1 multiplicative_expression unary_expression
a ] r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 141
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 413
a | r 1 multiplicative_expression unary_expression
a |= s 143
a || r 1 multiplicative_expression unary_expression
g assignment_operator 413
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a function_call s 295
a postfix_expression s 428
a primary_expression s 301
a unary_expression s 429
a unary_operator s 430
a ~ s 65
g postfix_expression 428
g primary_expression 301
g unary_expression 429
g unary_operator 430
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 390
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 390
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a & s 149
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ; r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 168
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a ; r 3 binary_and_expression binary_and_expression & equality_expression
a == s 169
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a ; r 3 equality_expression equality_expression == relational_expression
a < s 175
a <= s 176
a == r 3 equality_expression equality_expression == relational_expression
a > s 177
a >= s 178
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a ; r 3 equality_expression equality_expression != relational_expression
a < s 175
a <= s 176
a == r 3 equality_expression equality_expression != relational_expression
a > s 177
a >= s 178
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a ; r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 180
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 181
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a ; r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 180
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 181
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a ; r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 180
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 181
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a ; r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 180
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 181
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 182
a , r 3 shift_expression shift_expression << additive_expression
a - s 183
a ; r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 182
a , r 3 shift_expression shift_expression >> additive_expression
a - s 183
a ; r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ) r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 343
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 344
a -= r 1 unary_expression postfix_expression
a -> s 345
a . s 346
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 347
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ) r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a function_call s 82
a postfix_expression s 317
a primary_expression s 88
a unary_expression s 424
a unary_operator s 319
a ~ s 65
g postfix_expression 317
g primary_expression 88
g unary_expression 424
g unary_operator 319
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a ; r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 158
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 159
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 160
a ; r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 158
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 159
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 160
a ; r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a ; r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a ; r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a ; r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a & r 1 type IDENTIFIER
a * r 1 type IDENTIFIER
a :: s 167
a < r 1 type IDENTIFIER
a FUNC r 1 type IDENTIFIER
a VAR r 1 type IDENTIFIER
s
a & r 3 type IDENTIFIER :: type
a * r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a FUNC r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
s
a & r 1 type IDENTIFIER
a * r 1 type IDENTIFIER
a :: s 482
a < r 1 type IDENTIFIER
a VAR r 1 type IDENTIFIER
s
a & s 493
a * s 494
a < s 495
a VAR s 496
s
a ; s 558
s
a , r 1 variable_name_and_assign IDENTIFIER
a ; r 1 variable_name_and_assign IDENTIFIER
a = s 547
s
a , s 527
a ; s 528
s
a , r 1 variable_inits variable_name_and_assign
a ; r 1 variable_inits variable_name_and_assign
s
a WHILE s 553
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a equality_expression s 415
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 89
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g equality_expression 415
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 89
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a ! r 2 statement expression ;
a & r 2 statement expression ;
a ( r 2 statement expression ;
a * r 2 statement expression ;
a ++ r 2 statement expression ;
a - r 2 statement expression ;
a -- r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a BREAK r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a DO r 2 statement expression ;
a ELSE r 2 statement expression ;
a GOTO r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a IF r 2 statement expression ;
a INPUT r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a RETURN r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a SWITCH r 2 statement expression ;
a TEST r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a function_call r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a ~ r 2 statement expression ;
s
a IDENTIFIER s 550
s
a IDENTIFIER s 331
a variable_inits s 442
a variable_name_and_assign s 333
g variable_inits 442
g variable_name_and_assign 333
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a equality_expression s 80
a function_call s 400
a logical_and_expression s 406
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 89
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g equality_expression 80
g logical_and_expression 406
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 89
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a function_call s 400
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 439
a unary_operator s 405
a ~ s 65
g postfix_expression 402
g primary_expression 403
g unary_expression 439
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a function_call s 400
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 438
a unary_operator s 405
a ~ s 65
g postfix_expression 402
g primary_expression 403
g unary_expression 438
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a function_call s 400
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 437
a unary_operator s 405
a ~ s 65
g postfix_expression 402
g primary_expression 403
g unary_expression 437
g unary_operator 405
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ) r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ) r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 551
s
a IDENTIFIER s 556
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 410
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 410
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 386
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 386
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 417
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 417
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 416
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 416
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a binary_and_expression s 414
a equality_expression s 80
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 89
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g binary_and_expression 414
g equality_expression 80
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 89
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a IDENTIFIER s 328
a type s 329
a variable_decls s 441
g type 329
g variable_decls 441
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 234
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a expression s 409
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 234
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g expression 409
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a equality_expression s 80
a function_call s 400
a logical_and_expression s 83
a logical_xor_expression s 401
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 89
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g equality_expression 80
g logical_and_expression 83
g logical_xor_expression 401
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 89
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a ! r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a shift_expression s 420
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g shift_expression 420
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a shift_expression s 418
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g shift_expression 418
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a shift_expression s 419
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g shift_expression 419
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a shift_expression s 421
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g shift_expression 421
g unary_expression 404
g unary_operator 405
s
a ; s 552
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 422
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 422
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 423
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 423
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a function_call s 400
a multiplicative_expression s 435
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g multiplicative_expression 435
g postfix_expression 402
g primary_expression 403
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a function_call s 400
a multiplicative_expression s 436
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g multiplicative_expression 436
g postfix_expression 402
g primary_expression 403
g unary_expression 404
g unary_operator 405
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a ; r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 391
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 391
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a __END__ r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
s
a ! r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a __END__ r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
s
a ! r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a __END__ r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 387
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 387
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a binary_and_expression s 76
a binary_or_expression s 407
a binary_xor_expression s 78
a equality_expression s 80
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 89
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g binary_and_expression 76
g binary_or_expression 407
g binary_xor_expression 78
g equality_expression 80
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 89
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a additive_expression s 74
a binary_and_expression s 76
a binary_xor_expression s 408
a equality_expression s 80
a function_call s 400
a multiplicative_expression s 86
a postfix_expression s 402
a primary_expression s 403
a relational_expression s 89
a shift_expression s 90
a unary_expression s 404
a unary_operator s 405
a ~ s 65
g additive_expression 74
g binary_and_expression 76
g binary_xor_expression 408
g equality_expression 80
g multiplicative_expression 86
g postfix_expression 402
g primary_expression 403
g relational_expression 89
g shift_expression 90
g unary_expression 404
g unary_operator 405
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 388
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 388
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 389
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 389
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ( s 557
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ! r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a __END__ r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 559
s
a ! r 3 block_statements { statements }
a & r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a * r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a - r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a __END__ r 3 block_statements { statements }
a for r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a { r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ) s 697
a , s 366
s
a ) s 698
a , s 366
s
a ) s 699
a , s 366
s
a ) s 700
a , s 366
s
a ) s 701
a , s 366
s
a ) s 702
a , s 366
s
a ) s 703
a , s 366
s
a ) s 704
a , s 366
s
a ) r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a ) r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 563
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 563
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ) r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ) r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ) r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ) r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ) r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ) r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ) r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ) r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a ) r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 339
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ) r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 691
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 692
a -> s 693
a . s 694
a / r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 695
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ) r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ) r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a ! s 1
a & s 2
a ( s 392
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 393
a CHAR_CONST s 394
a HEX_CONST s 395
a IDENTIFIER s 396
a NUMBER_CONST s 397
a OCTAL_CONST s 398
a STRING_CONST s 399
a function_call s 400
a postfix_expression s 402
a primary_expression s 403
a unary_expression s 667
a unary_operator s 405
a ~ s 65
g postfix_expression 402
g primary_expression 403
g unary_expression 667
g unary_operator 405
s
a && s 372
a ) r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ) r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 373
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ) r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 351
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a , s 534
a : s 705
s
a , s 539
a ] s 706
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 568
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 568
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 431
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a additive_expression s 198
a assignment_expression s 592
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a conditional_expression s 203
a equality_expression s 204
a function_call s 206
a logical_and_expression s 207
a logical_or_expression s 208
a logical_xor_expression s 209
a multiplicative_expression s 210
a postfix_expression s 211
a primary_expression s 212
a relational_expression s 213
a shift_expression s 214
a unary_expression s 218
a unary_operator s 219
a ~ s 65
g additive_expression 198
g assignment_expression 592
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g conditional_expression 203
g equality_expression 204
g logical_and_expression 207
g logical_or_expression 208
g logical_xor_expression 209
g multiplicative_expression 210
g postfix_expression 211
g primary_expression 212
g relational_expression 213
g shift_expression 214
g unary_expression 218
g unary_operator 219
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 615
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 615
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a & s 335
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ) r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 349
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ) r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a == s 350
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ) r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a < s 356
a <= s 357
a == r 3 equality_expression equality_expression == relational_expression
a > s 358
a >= s 359
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ) r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a < s 356
a <= s 357
a == r 3 equality_expression equality_expression != relational_expression
a > s 358
a >= s 359
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ) r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 361
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 362
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ) r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 361
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 362
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ) r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 361
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 362
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ) r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 361
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 362
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ) r 3 shift_expression shift_expression << additive_expression
a + s 363
a , r 3 shift_expression shift_expression << additive_expression
a - s 364
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ) r 3 shift_expression shift_expression >> additive_expression
a + s 363
a , r 3 shift_expression shift_expression >> additive_expression
a - s 364
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ) r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 461
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 462
a -= r 1 unary_expression postfix_expression
a -> s 463
a . s 464
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 465
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a function_call s 241
a postfix_expression s 425
a primary_expression s 247
a unary_expression s 664
a unary_operator s 427
a ~ s 65
g postfix_expression 425
g primary_expression 247
g unary_expression 664
g unary_operator 427
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 466
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 467
a -= r 1 unary_expression postfix_expression
a -> s 468
a . s 469
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 470
a ] r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ] r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a function_call s 295
a postfix_expression s 428
a primary_expression s 301
a unary_expression s 665
a unary_operator s 430
a ~ s 65
g postfix_expression 428
g primary_expression 301
g unary_expression 665
g unary_operator 430
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 471
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 472
a -= r 1 unary_expression postfix_expression
a -> s 473
a . s 474
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 475
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 431
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a function_call s 206
a postfix_expression s 432
a primary_expression s 212
a unary_expression s 666
a unary_operator s 434
a ~ s 65
g postfix_expression 432
g primary_expression 212
g unary_expression 666
g unary_operator 434
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 340
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ) r 3 additive_expression additive_expression + multiplicative_expression
a * s 341
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 342
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 340
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ) r 3 additive_expression additive_expression - multiplicative_expression
a * s 341
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 342
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ) r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ) r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ) r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a ; r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ; s 716
s
a , s 527
a ; s 696
s
a & r 2 type type &
a * r 2 type type &
a , r 2 type type &
a < r 2 type type &
a > r 2 type type &
s
a & r 2 type type *
a * r 2 type type *
a , r 2 type type *
a < r 2 type type *
a > r 2 type type *
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 194
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a additive_expression s 198
a assignment_expression s 199
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a conditional_expression s 203
a equality_expression s 204
a expression s 205
a function_call s 206
a logical_and_expression s 207
a logical_or_expression s 208
a logical_xor_expression s 209
a multiplicative_expression s 210
a postfix_expression s 211
a primary_expression s 212
a relational_expression s 213
a shift_expression s 214
a template_param s 215
a template_params s 560
a type s 217
a unary_expression s 218
a unary_operator s 219
a ~ s 65
g additive_expression 198
g assignment_expression 199
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g conditional_expression 203
g equality_expression 204
g expression 205
g logical_and_expression 207
g logical_or_expression 208
g logical_xor_expression 209
g multiplicative_expression 210
g postfix_expression 211
g primary_expression 212
g relational_expression 213
g shift_expression 214
g template_param 215
g template_params 560
g type 217
g unary_expression 218
g unary_operator 219
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a equality_expression s 635
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 248
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g equality_expression 635
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 248
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a equality_expression s 655
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 213
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g equality_expression 655
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 213
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a equality_expression s 645
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 302
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g equality_expression 645
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 302
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a equality_expression s 239
a function_call s 578
a logical_and_expression s 584
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 248
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g equality_expression 239
g logical_and_expression 584
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 248
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a equality_expression s 204
a function_call s 602
a logical_and_expression s 608
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 213
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g equality_expression 204
g logical_and_expression 608
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 213
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a equality_expression s 293
a function_call s 625
a logical_and_expression s 631
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 302
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g equality_expression 293
g logical_and_expression 631
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 302
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a function_call s 578
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 672
a unary_operator s 583
a ~ s 65
g postfix_expression 580
g primary_expression 581
g unary_expression 672
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a function_call s 578
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 671
a unary_operator s 583
a ~ s 65
g postfix_expression 580
g primary_expression 581
g unary_expression 671
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a function_call s 578
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 670
a unary_operator s 583
a ~ s 65
g postfix_expression 580
g primary_expression 581
g unary_expression 670
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a function_call s 625
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 677
a unary_operator s 630
a ~ s 65
g postfix_expression 627
g primary_expression 628
g unary_expression 677
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a function_call s 625
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 676
a unary_operator s 630
a ~ s 65
g postfix_expression 627
g primary_expression 628
g unary_expression 676
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a function_call s 625
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 675
a unary_operator s 630
a ~ s 65
g postfix_expression 627
g primary_expression 628
g unary_expression 675
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a function_call s 602
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 682
a unary_operator s 607
a ~ s 65
g postfix_expression 604
g primary_expression 605
g unary_expression 682
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a function_call s 602
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 681
a unary_operator s 607
a ~ s 65
g postfix_expression 604
g primary_expression 605
g unary_expression 681
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a function_call s 602
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 680
a unary_operator s 607
a ~ s 65
g postfix_expression 604
g primary_expression 605
g unary_expression 680
g unary_operator 607
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 707
s
a IDENTIFIER s 711
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 611
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 611
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 708
s
a IDENTIFIER s 712
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 612
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 612
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 709
s
a IDENTIFIER s 713
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 613
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 613
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a ; r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a ; r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 710
s
a IDENTIFIER s 714
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 614
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 614
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a IDENTIFIER s 683
a type s 684
g type 684
s
a IDENTIFIER s 328
a type s 685
g type 685
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 637
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 637
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 636
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 636
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 657
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 657
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 656
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 656
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 647
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 647
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 646
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 646
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a binary_and_expression s 634
a equality_expression s 239
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 248
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g binary_and_expression 634
g equality_expression 239
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 248
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a binary_and_expression s 654
a equality_expression s 204
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 213
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g binary_and_expression 654
g equality_expression 204
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 213
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a binary_and_expression s 644
a equality_expression s 293
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 302
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g binary_and_expression 644
g equality_expression 293
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 302
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 431
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a additive_expression s 198
a assignment_expression s 593
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a conditional_expression s 203
a equality_expression s 204
a function_call s 206
a logical_and_expression s 207
a logical_or_expression s 208
a logical_xor_expression s 209
a multiplicative_expression s 210
a postfix_expression s 211
a primary_expression s 212
a relational_expression s 213
a shift_expression s 214
a unary_expression s 218
a unary_operator s 219
a ~ s 65
g additive_expression 198
g assignment_expression 593
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g conditional_expression 203
g equality_expression 204
g logical_and_expression 207
g logical_or_expression 208
g logical_xor_expression 209
g multiplicative_expression 210
g postfix_expression 211
g primary_expression 212
g relational_expression 213
g shift_expression 214
g unary_expression 218
g unary_operator 219
s
a & r 2 type type &
a * r 2 type type &
a < r 2 type type &
a VAR r 2 type type &
s
a & r 2 type type *
a * r 2 type type *
a < r 2 type type *
a VAR r 2 type type *
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 194
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a additive_expression s 198
a assignment_expression s 199
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a conditional_expression s 203
a equality_expression s 204
a expression s 205
a function_call s 206
a logical_and_expression s 207
a logical_or_expression s 208
a logical_xor_expression s 209
a multiplicative_expression s 210
a postfix_expression s 211
a primary_expression s 212
a relational_expression s 213
a shift_expression s 214
a template_param s 215
a template_params s 561
a type s 217
a unary_expression s 218
a unary_operator s 219
a ~ s 65
g additive_expression 198
g assignment_expression 199
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g conditional_expression 203
g equality_expression 204
g expression 205
g logical_and_expression 207
g logical_or_expression 208
g logical_xor_expression 209
g multiplicative_expression 210
g postfix_expression 211
g primary_expression 212
g relational_expression 213
g shift_expression 214
g template_param 215
g template_params 561
g type 217
g unary_expression 218
g unary_operator 219
s
a IDENTIFIER s 331
a variable_inits s 686
a variable_name_and_assign s 333
g variable_inits 686
g variable_name_and_assign 333
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 234
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a expression s 565
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 234
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g expression 565
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a equality_expression s 239
a function_call s 578
a logical_and_expression s 242
a logical_xor_expression s 579
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 248
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g equality_expression 239
g logical_and_expression 242
g logical_xor_expression 579
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 248
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 234
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a expression s 566
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 234
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g expression 566
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a equality_expression s 204
a function_call s 602
a logical_and_expression s 207
a logical_xor_expression s 603
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 213
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g equality_expression 204
g logical_and_expression 207
g logical_xor_expression 603
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 213
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 234
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a expression s 567
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 234
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g expression 567
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a equality_expression s 293
a function_call s 625
a logical_and_expression s 296
a logical_xor_expression s 626
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 302
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g equality_expression 293
g logical_and_expression 296
g logical_xor_expression 626
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 302
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a shift_expression s 640
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g shift_expression 640
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a shift_expression s 638
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g shift_expression 638
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a shift_expression s 639
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g shift_expression 639
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a shift_expression s 641
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g shift_expression 641
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a shift_expression s 660
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g shift_expression 660
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a shift_expression s 658
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g shift_expression 658
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a shift_expression s 659
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g shift_expression 659
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a shift_expression s 661
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g shift_expression 661
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a shift_expression s 650
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g shift_expression 650
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a shift_expression s 648
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g shift_expression 648
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a shift_expression s 649
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g shift_expression 649
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a shift_expression s 651
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g shift_expression 651
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 642
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 642
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 643
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 643
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 652
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 652
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 653
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 653
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 662
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 662
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 663
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 663
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a function_call s 578
a multiplicative_expression s 668
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g multiplicative_expression 668
g postfix_expression 580
g primary_expression 581
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a function_call s 578
a multiplicative_expression s 669
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g multiplicative_expression 669
g postfix_expression 580
g primary_expression 581
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a function_call s 625
a multiplicative_expression s 673
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g multiplicative_expression 673
g postfix_expression 627
g primary_expression 628
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a function_call s 625
a multiplicative_expression s 674
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g multiplicative_expression 674
g postfix_expression 627
g primary_expression 628
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a function_call s 602
a multiplicative_expression s 678
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g multiplicative_expression 678
g postfix_expression 604
g primary_expression 605
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a function_call s 602
a multiplicative_expression s 679
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g multiplicative_expression 679
g postfix_expression 604
g primary_expression 605
g unary_expression 606
g unary_operator 607
s
a IDENTIFIER s 331
a variable_name_and_assign s 690
g variable_name_and_assign 690
s
a ! r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a __END__ r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ) r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 9
a CHAR_CONST s 10
a CONTINUE s 11
a DO s 12
a ELSE s 13
a GOTO s 14
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 17
a INPUT s 18
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 21
a RETURN s 22
a STRING_CONST s 23
a SWITCH s 24
a TEST s 25
a WHILE s 26
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 32
a conditional_expression s 33
a do_while_loop s 34
a else_statement s 35
a equality_expression s 36
a expression s 37
a for s 38
a for_loop s 39
a function_call s 40
a function_decl s 41
a if_statement s 42
a input_statement s 43
a jump_statement s 44
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 49
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 587
a switch_statement s 57
a test_statement s 58
a type s 59
a unary_expression s 60
a unary_operator s 61
a variable_decls s 62
a while_loop s 63
a { s 64
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 32
g conditional_expression 33
g do_while_loop 34
g else_statement 35
g equality_expression 36
g expression 37
g for_loop 39
g function_decl 41
g if_statement 42
g input_statement 43
g jump_statement 44
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 49
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 587
g switch_statement 57
g test_statement 58
g type 59
g unary_expression 60
g unary_operator 61
g variable_decls 62
g while_loop 63
s
a { s 718
s
a { s 719
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 9
a CHAR_CONST s 10
a CONTINUE s 11
a DO s 12
a ELSE s 13
a GOTO s 14
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 17
a INPUT s 18
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 21
a RETURN s 22
a STRING_CONST s 23
a SWITCH s 24
a TEST s 25
a WHILE s 26
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 32
a conditional_expression s 33
a do_while_loop s 34
a else_statement s 35
a equality_expression s 36
a expression s 37
a for s 38
a for_loop s 39
a function_call s 40
a function_decl s 41
a if_statement s 42
a input_statement s 43
a jump_statement s 44
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 49
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 588
a switch_statement s 57
a test_statement s 58
a type s 59
a unary_expression s 60
a unary_operator s 61
a variable_decls s 62
a while_loop s 63
a { s 64
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 32
g conditional_expression 33
g do_while_loop 34
g else_statement 35
g equality_expression 36
g expression 37
g for_loop 39
g function_decl 41
g if_statement 42
g input_statement 43
g jump_statement 44
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 49
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 588
g switch_statement 57
g test_statement 58
g type 59
g unary_expression 60
g unary_operator 61
g variable_decls 62
g while_loop 63
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 569
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 569
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 591
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 591
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
s
a ! r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
s
a ! r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 616
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 616
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a ; r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a binary_and_expression s 235
a binary_or_expression s 585
a binary_xor_expression s 237
a equality_expression s 239
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 248
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g binary_and_expression 235
g binary_or_expression 585
g binary_xor_expression 237
g equality_expression 239
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 248
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a binary_and_expression s 200
a binary_or_expression s 609
a binary_xor_expression s 202
a equality_expression s 204
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 213
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g binary_and_expression 200
g binary_or_expression 609
g binary_xor_expression 202
g equality_expression 204
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 213
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a binary_and_expression s 289
a binary_or_expression s 632
a binary_xor_expression s 291
a equality_expression s 293
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 302
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g binary_and_expression 289
g binary_or_expression 632
g binary_xor_expression 291
g equality_expression 293
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 302
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a additive_expression s 233
a binary_and_expression s 235
a binary_xor_expression s 586
a equality_expression s 239
a function_call s 578
a multiplicative_expression s 245
a postfix_expression s 580
a primary_expression s 581
a relational_expression s 248
a shift_expression s 249
a unary_expression s 582
a unary_operator s 583
a ~ s 65
g additive_expression 233
g binary_and_expression 235
g binary_xor_expression 586
g equality_expression 239
g multiplicative_expression 245
g postfix_expression 580
g primary_expression 581
g relational_expression 248
g shift_expression 249
g unary_expression 582
g unary_operator 583
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a additive_expression s 198
a binary_and_expression s 200
a binary_xor_expression s 610
a equality_expression s 204
a function_call s 602
a multiplicative_expression s 210
a postfix_expression s 604
a primary_expression s 605
a relational_expression s 213
a shift_expression s 214
a unary_expression s 606
a unary_operator s 607
a ~ s 65
g additive_expression 198
g binary_and_expression 200
g binary_xor_expression 610
g equality_expression 204
g multiplicative_expression 210
g postfix_expression 604
g primary_expression 605
g relational_expression 213
g shift_expression 214
g unary_expression 606
g unary_operator 607
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a additive_expression s 287
a binary_and_expression s 289
a binary_xor_expression s 633
a equality_expression s 293
a function_call s 625
a multiplicative_expression s 299
a postfix_expression s 627
a primary_expression s 628
a relational_expression s 302
a shift_expression s 303
a unary_expression s 629
a unary_operator s 630
a ~ s 65
g additive_expression 287
g binary_and_expression 289
g binary_xor_expression 633
g equality_expression 293
g multiplicative_expression 299
g postfix_expression 627
g primary_expression 628
g relational_expression 302
g shift_expression 303
g unary_expression 629
g unary_operator 630
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 589
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 589
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 194
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a additive_expression s 198
a assignment_expression s 199
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a conditional_expression s 203
a equality_expression s 204
a expression s 205
a function_call s 206
a logical_and_expression s 207
a logical_or_expression s 208
a logical_xor_expression s 209
a multiplicative_expression s 210
a postfix_expression s 211
a primary_expression s 212
a relational_expression s 213
a shift_expression s 214
a template_param s 562
a type s 217
a unary_expression s 218
a unary_operator s 219
a ~ s 65
g additive_expression 198
g assignment_expression 199
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g conditional_expression 203
g equality_expression 204
g expression 205
g logical_and_expression 207
g logical_or_expression 208
g logical_xor_expression 209
g multiplicative_expression 210
g postfix_expression 211
g primary_expression 212
g relational_expression 213
g shift_expression 214
g template_param 562
g type 217
g unary_expression 218
g unary_operator 219
s
a & r 4 type type < template_params >
a * r 4 type type < template_params >
a < r 4 type type < template_params >
a FUNC r 4 type type < template_params >
a VAR r 4 type type < template_params >
s
a ( s 715
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ! r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 717
s
a ! r 3 block_statements { statements }
a & r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a * r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a - r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
s
a WHILE r 3 block_statements { statements }
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ) s 687
a func_args s 688
a single_variable_decl s 689
g func_args 688
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 590
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 590
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 564
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 564
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a , s 548
a > s 765
s
a , s 548
a > s 766
s
a , r 3 template_params template_params , template_param
a > r 3 template_params template_params , template_param
s
a ) s 753
a , s 366
s
a ) s 754
a , s 366
s
a , s 534
a : s 755
s
a , s 534
a : s 756
s
a , s 534
a : s 757
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a : r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a , r 3 expression expression , assignment_expression
a : r 3 expression expression , assignment_expression
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 720
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 720
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a : r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 449
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 737
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 738
a -> s 739
a . s 740
a / r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 741
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a : r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a ! s 1
a & s 2
a ( s 570
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 571
a CHAR_CONST s 572
a HEX_CONST s 573
a IDENTIFIER s 574
a NUMBER_CONST s 575
a OCTAL_CONST s 576
a STRING_CONST s 577
a function_call s 578
a postfix_expression s 580
a primary_expression s 581
a unary_expression s 729
a unary_operator s 583
a ~ s 65
g postfix_expression 580
g primary_expression 581
g unary_expression 729
g unary_operator 583
s
a && s 541
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a : r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a : r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 544
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a : r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 489
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a ! r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a __END__ r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
s
a ! r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a __END__ r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
s
a , r 3 variable_name_and_assign IDENTIFIER = expression
a ; r 3 variable_name_and_assign IDENTIFIER = expression
s
a , s 150
a ; s 758
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a ; r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a > r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a , r 3 expression expression , assignment_expression
a > r 3 expression expression , assignment_expression
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 722
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 722
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a > r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 450
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 747
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 748
a -> s 749
a . s 750
a / r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 751
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a ! s 1
a & s 2
a ( s 594
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 595
a CHAR_CONST s 596
a HEX_CONST s 597
a IDENTIFIER s 598
a NUMBER_CONST s 599
a OCTAL_CONST s 600
a STRING_CONST s 601
a function_call s 602
a postfix_expression s 604
a primary_expression s 605
a unary_expression s 731
a unary_operator s 607
a ~ s 65
g postfix_expression 604
g primary_expression 605
g unary_expression 731
g unary_operator 607
s
a && s 542
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a > r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a > r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 545
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a > r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 490
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a , s 539
a ] s 759
s
a , s 539
a ] s 760
s
a , s 539
a ] s 761
s
a , s 539
a ] s 762
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a ] r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a , r 3 expression expression , assignment_expression
a ] r 3 expression expression , assignment_expression
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 721
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 721
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ] r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 451
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 742
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 743
a -> s 744
a . s 745
a / r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 746
a ] r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ] r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a ! s 1
a & s 2
a ( s 617
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 618
a CHAR_CONST s 619
a HEX_CONST s 620
a IDENTIFIER s 621
a NUMBER_CONST s 622
a OCTAL_CONST s 623
a STRING_CONST s 624
a function_call s 625
a postfix_expression s 627
a primary_expression s 628
a unary_expression s 730
a unary_operator s 630
a ~ s 65
g postfix_expression 627
g primary_expression 628
g unary_expression 730
g unary_operator 630
s
a && s 543
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ] r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ] r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 546
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ] r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 491
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 446
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a : r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 483
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a : r 3 binary_and_expression binary_and_expression & equality_expression
a == s 484
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a : r 3 equality_expression equality_expression == relational_expression
a < s 503
a <= s 504
a == r 3 equality_expression equality_expression == relational_expression
a > s 505
a >= s 506
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a : r 3 equality_expression equality_expression != relational_expression
a < s 503
a <= s 504
a == r 3 equality_expression equality_expression != relational_expression
a > s 505
a >= s 506
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a : r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 515
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 516
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a : r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 515
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 516
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a : r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 515
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 516
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a : r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 515
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 516
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 521
a , r 3 shift_expression shift_expression << additive_expression
a - s 522
a : r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 521
a , r 3 shift_expression shift_expression >> additive_expression
a - s 522
a : r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a & s 448
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ] r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 487
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a == s 488
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ] r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a < s 511
a <= s 512
a == r 3 equality_expression equality_expression == relational_expression
a > s 513
a >= s 514
a ? r 3 equality_expression equality_expression == relational_expression
a ] r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a < s 511
a <= s 512
a == r 3 equality_expression equality_expression != relational_expression
a > s 513
a >= s 514
a ? r 3 equality_expression equality_expression != relational_expression
a ] r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 517
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 518
a ? r 3 relational_expression relational_expression <= shift_expression
a ] r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 517
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 518
a ? r 3 relational_expression relational_expression > shift_expression
a ] r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 517
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 518
a ? r 3 relational_expression relational_expression < shift_expression
a ] r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 517
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 518
a ? r 3 relational_expression relational_expression >= shift_expression
a ] r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 523
a , r 3 shift_expression shift_expression << additive_expression
a - s 524
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ] r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 523
a , r 3 shift_expression shift_expression >> additive_expression
a - s 524
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ] r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a & s 447
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a > r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 485
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a == s 486
a > r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a < s 507
a <= s 508
a == r 3 equality_expression equality_expression == relational_expression
a > r 3 equality_expression equality_expression == relational_expression
a >= s 510
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a < s 507
a <= s 508
a == r 3 equality_expression equality_expression != relational_expression
a > r 3 equality_expression equality_expression != relational_expression
a >= s 510
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 519
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 520
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 519
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 520
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 519
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 520
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 519
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 520
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 525
a , r 3 shift_expression shift_expression << additive_expression
a - s 526
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 525
a , r 3 shift_expression shift_expression >> additive_expression
a - s 526
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ] r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ) r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 452
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 453
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 454
a : r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 452
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 453
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 454
a : r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a : r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a : r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a : r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 455
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 456
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 457
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ] r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 455
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 456
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 457
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ] r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ] r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ] r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ] r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 458
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 459
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 460
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 458
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 459
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 460
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a & r 1 type IDENTIFIER
a * r 1 type IDENTIFIER
a , r 1 type IDENTIFIER
a :: s 481
a < r 1 type IDENTIFIER
a > r 1 type IDENTIFIER
s
a & r 3 type IDENTIFIER :: type
a * r 3 type IDENTIFIER :: type
a , r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a > r 3 type IDENTIFIER :: type
s
a & r 3 type IDENTIFIER :: type
a * r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
s
a , s 527
a ; s 752
s
a block_statements s 735
a { s 64
g block_statements 735
s
a ) s 763
a , s 764
s
a ) r 1 func_args single_variable_decl
a , r 1 func_args single_variable_decl
s
a , r 3 variable_inits variable_inits , variable_name_and_assign
a ; r 3 variable_inits variable_inits , variable_name_and_assign
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ) r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ) r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 767
s
a IDENTIFIER s 768
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 728
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 728
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a ! r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a ; r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 725
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 725
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a { s 769
s
a { s 770
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 726
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 726
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 724
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 724
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ) r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ) s 733
a func_args s 734
a single_variable_decl s 689
g func_args 734
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 727
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 727
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 723
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 723
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 732
a } r 0 switch_case_statements 
g switch_case_statements 732
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 736
a } r 0 test_case_statements 
g test_case_statements 736
s
a ) s 789
a , s 366
s
a ) s 790
a , s 366
s
a ) s 791
a , s 366
s
a ) s 792
a , s 366
s
a ) r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ! r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
s
a ! r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
s
a , s 150
a ; s 793
s
a , s 539
a ] s 794
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ] r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a CASE s 778
a switch_case_statement s 779
a } s 780
g switch_case_statement 779
s
a block_statements s 787
a { s 126
g block_statements 787
s
a ) s 795
a , s 764
s
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a __END__ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a CASE s 782
a DEFAULT s 783
a test_case_statement s 784
a } s 785
g test_case_statement 784
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 796
s
a IDENTIFIER s 800
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 774
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 774
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 797
s
a IDENTIFIER s 801
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 775
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 775
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 798
s
a IDENTIFIER s 802
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 288
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a expression s 776
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 288
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g expression 776
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a ; r 4 variable_decls type VAR variable_inits ;
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ) r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ; s 803
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 772
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 772
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a ! s 1
a & s 2
a ( s 190
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 191
a CHAR_CONST s 192
a HEX_CONST s 193
a IDENTIFIER s 431
a NUMBER_CONST s 195
a OCTAL_CONST s 196
a STRING_CONST s 197
a additive_expression s 198
a assignment_expression s 773
a binary_and_expression s 200
a binary_or_expression s 201
a binary_xor_expression s 202
a conditional_expression s 203
a equality_expression s 204
a function_call s 206
a logical_and_expression s 207
a logical_or_expression s 208
a logical_xor_expression s 209
a multiplicative_expression s 210
a postfix_expression s 211
a primary_expression s 212
a relational_expression s 213
a shift_expression s 214
a unary_expression s 218
a unary_operator s 219
a ~ s 65
g additive_expression 198
g assignment_expression 773
g binary_and_expression 200
g binary_or_expression 201
g binary_xor_expression 202
g conditional_expression 203
g equality_expression 204
g logical_and_expression 207
g logical_or_expression 208
g logical_xor_expression 209
g multiplicative_expression 210
g postfix_expression 211
g primary_expression 212
g relational_expression 213
g shift_expression 214
g unary_expression 218
g unary_operator 219
s
a ! s 1
a & s 2
a ( s 279
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 280
a CHAR_CONST s 281
a HEX_CONST s 282
a IDENTIFIER s 283
a NUMBER_CONST s 284
a OCTAL_CONST s 285
a STRING_CONST s 286
a additive_expression s 287
a assignment_expression s 777
a binary_and_expression s 289
a binary_or_expression s 290
a binary_xor_expression s 291
a conditional_expression s 292
a equality_expression s 293
a function_call s 295
a logical_and_expression s 296
a logical_or_expression s 297
a logical_xor_expression s 298
a multiplicative_expression s 299
a postfix_expression s 300
a primary_expression s 301
a relational_expression s 302
a shift_expression s 303
a unary_expression s 304
a unary_operator s 305
a ~ s 65
g additive_expression 287
g assignment_expression 777
g binary_and_expression 289
g binary_or_expression 290
g binary_xor_expression 291
g conditional_expression 292
g equality_expression 293
g logical_and_expression 296
g logical_or_expression 297
g logical_xor_expression 298
g multiplicative_expression 299
g postfix_expression 300
g primary_expression 301
g relational_expression 302
g shift_expression 303
g unary_expression 304
g unary_operator 305
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 771
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 771
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a ; r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a block_statements s 786
a { s 64
g block_statements 786
s
a single_variable_decl s 799
s
a & r 4 type type < template_params >
a * r 4 type type < template_params >
a , r 4 type type < template_params >
a < r 4 type type < template_params >
a > r 4 type type < template_params >
s
a & r 4 type type < template_params >
a * r 4 type type < template_params >
a < r 4 type type < template_params >
a VAR r 4 type type < template_params >
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 781
a } r 0 switch_case_statements 
g switch_case_statements 781
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 788
a } r 0 test_case_statements 
g test_case_statements 788
s
a ) s 839
a , s 366
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a : r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a > r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a , s 539
a ] s 840
s
a , s 539
a ] s 841
s
a , s 539
a ] s 842
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a ] r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ! s 1
a & s 2
a ( s 225
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 226
a CHAR_CONST s 227
a HEX_CONST s 228
a IDENTIFIER s 229
a NUMBER_CONST s 230
a OCTAL_CONST s 231
a STRING_CONST s 232
a additive_expression s 233
a assignment_expression s 234
a binary_and_expression s 235
a binary_or_expression s 236
a binary_xor_expression s 237
a conditional_expression s 238
a equality_expression s 239
a expression s 805
a function_call s 241
a logical_and_expression s 242
a logical_or_expression s 243
a logical_xor_expression s 244
a multiplicative_expression s 245
a postfix_expression s 246
a primary_expression s 247
a relational_expression s 248
a shift_expression s 249
a unary_expression s 250
a unary_operator s 251
a ~ s 65
g additive_expression 233
g assignment_expression 234
g binary_and_expression 235
g binary_or_expression 236
g binary_xor_expression 237
g conditional_expression 238
g equality_expression 239
g expression 805
g logical_and_expression 242
g logical_or_expression 243
g logical_xor_expression 244
g multiplicative_expression 245
g postfix_expression 246
g primary_expression 247
g relational_expression 248
g shift_expression 249
g unary_expression 250
g unary_operator 251
s
a CASE r 2 switch_case_statements switch_case_statements switch_case_statement
a } r 2 switch_case_statements switch_case_statements switch_case_statement
s
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a __END__ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a CASE s 778
a switch_case_statement s 779
a } s 836
g switch_case_statement 779
s
a ( s 843
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 806
a CHAR_CONST s 10
a CONTINUE s 807
a DO s 808
a ELSE s 809
a GOTO s 810
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 811
a INPUT s 812
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 813
a RETURN s 814
a STRING_CONST s 23
a SWITCH s 815
a TEST s 816
a WHILE s 817
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 818
a conditional_expression s 33
a do_while_loop s 819
a else_statement s 820
a equality_expression s 36
a expression s 821
a for s 822
a for_loop s 823
a function_call s 40
a function_decl s 824
a if_statement s 825
a input_statement s 826
a jump_statement s 827
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 828
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 829
a switch_statement s 830
a test_statement s 831
a type s 832
a unary_expression s 60
a unary_operator s 61
a variable_decls s 833
a while_loop s 834
a { s 835
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 818
g conditional_expression 33
g do_while_loop 819
g else_statement 820
g equality_expression 36
g expression 821
g for_loop 823
g function_decl 824
g if_statement 825
g input_statement 826
g jump_statement 827
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 828
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 829
g switch_statement 830
g test_statement 831
g type 832
g unary_expression 60
g unary_operator 61
g variable_decls 833
g while_loop 834
s
a CASE r 2 test_case_statements test_case_statements test_case_statement
a DEFAULT r 2 test_case_statements test_case_statements test_case_statement
a } r 2 test_case_statements test_case_statements test_case_statement
s
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a __END__ r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a __END__ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a CASE s 782
a DEFAULT s 783
a test_case_statement s 784
a } s 837
g test_case_statement 784
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ; s 844
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 804
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 804
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ) r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a block_statements s 838
a { s 126
g block_statements 838
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ) r 3 func_args func_args , single_variable_decl
a , r 3 func_args func_args , single_variable_decl
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a __END__ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ) s 861
a , s 366
s
a , s 534
a : s 862
s
a ; s 859
s
a ; s 864
s
a block_statements s 853
a { s 148
g block_statements 853
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 806
a CHAR_CONST s 10
a CONTINUE s 807
a DO s 808
a ELSE s 809
a GOTO s 810
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 811
a INPUT s 812
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 813
a RETURN s 814
a STRING_CONST s 23
a SWITCH s 815
a TEST s 816
a WHILE s 817
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 818
a conditional_expression s 33
a do_while_loop s 819
a else_statement s 820
a equality_expression s 36
a expression s 821
a for s 822
a for_loop s 823
a function_call s 40
a function_decl s 824
a if_statement s 825
a input_statement s 826
a jump_statement s 827
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 828
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 848
a switch_statement s 830
a test_statement s 831
a type s 832
a unary_expression s 60
a unary_operator s 61
a variable_decls s 833
a while_loop s 834
a { s 835
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 818
g conditional_expression 33
g do_while_loop 819
g else_statement 820
g equality_expression 36
g expression 821
g for_loop 823
g function_decl 824
g if_statement 825
g input_statement 826
g jump_statement 827
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 828
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 848
g switch_statement 830
g test_statement 831
g type 832
g unary_expression 60
g unary_operator 61
g variable_decls 833
g while_loop 834
s
a IDENTIFIER s 860
s
a ( s 857
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 852
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 852
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 849
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 849
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a ; s 850
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 851
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 851
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ( s 863
s
a ( s 865
s
a ( s 866
s
a CASE r 1 statement block_statements
a DEFAULT r 1 statement block_statements
a } r 1 statement block_statements
s
a CASE r 1 statement do_while_loop
a DEFAULT r 1 statement do_while_loop
a } r 1 statement do_while_loop
s
a CASE r 1 statement else_statement
a DEFAULT r 1 statement else_statement
a } r 1 statement else_statement
s
a , s 150
a ; s 854
s
a ( s 858
s
a CASE r 1 statement for_loop
a DEFAULT r 1 statement for_loop
a } r 1 statement for_loop
s
a CASE r 1 statement function_decl
a DEFAULT r 1 statement function_decl
a } r 1 statement function_decl
s
a CASE r 1 statement if_statement
a DEFAULT r 1 statement if_statement
a } r 1 statement if_statement
s
a CASE r 1 statement input_statement
a DEFAULT r 1 statement input_statement
a } r 1 statement input_statement
s
a CASE r 1 statement jump_statement
a DEFAULT r 1 statement jump_statement
a } r 1 statement jump_statement
s
a CASE r 1 statement output_statement
a DEFAULT r 1 statement output_statement
a } r 1 statement output_statement
s
a CASE r 2 test_case_statement DEFAULT statement
a DEFAULT r 2 test_case_statement DEFAULT statement
a } r 2 test_case_statement DEFAULT statement
s
a CASE r 1 statement switch_statement
a DEFAULT r 1 statement switch_statement
a } r 1 statement switch_statement
s
a CASE r 1 statement test_statement
a DEFAULT r 1 statement test_statement
a } r 1 statement test_statement
s
a & s 152
a * s 153
a < s 154
a FUNC s 855
a VAR s 856
s
a CASE r 1 statement variable_decls
a DEFAULT r 1 statement variable_decls
a } r 1 statement variable_decls
s
a CASE r 1 statement while_loop
a DEFAULT r 1 statement while_loop
a } r 1 statement while_loop
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 118
a statement_list s 119
a statements s 847
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a } r 0 statements 
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 118
g statement_list 119
g statements 847
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 9
a CHAR_CONST s 10
a CONTINUE s 11
a DO s 12
a ELSE s 13
a GOTO s 14
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 17
a INPUT s 18
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 21
a RETURN s 22
a STRING_CONST s 23
a SWITCH s 24
a TEST s 25
a WHILE s 26
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 32
a conditional_expression s 33
a do_while_loop s 34
a else_statement s 35
a equality_expression s 36
a expression s 37
a for s 38
a for_loop s 39
a function_call s 40
a function_decl s 41
a if_statement s 42
a input_statement s 43
a jump_statement s 44
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 49
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 846
a switch_statement s 57
a test_statement s 58
a type s 59
a unary_expression s 60
a unary_operator s 61
a variable_decls s 62
a while_loop s 63
a { s 64
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 32
g conditional_expression 33
g do_while_loop 34
g else_statement 35
g equality_expression 36
g expression 37
g for_loop 39
g function_decl 41
g if_statement 42
g input_statement 43
g jump_statement 44
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 49
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 846
g switch_statement 57
g test_statement 58
g type 59
g unary_expression 60
g unary_operator 61
g variable_decls 62
g while_loop 63
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 845
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 845
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ) s 906
a , s 366
s
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a __END__ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a } s 913
s
a CASE r 2 else_statement ELSE statement
a DEFAULT r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
s
a , s 150
a ; s 907
s
a CASE r 2 jump_statement RETURN ;
a DEFAULT r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
s
a , s 150
a ; s 908
s
a , s 150
a ; s 909
s
a WHILE s 912
s
a CASE r 2 statement expression ;
a DEFAULT r 2 statement expression ;
a } r 2 statement expression ;
s
a IDENTIFIER s 910
s
a IDENTIFIER s 331
a variable_inits s 905
a variable_name_and_assign s 333
g variable_inits 905
g variable_name_and_assign 333
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 867
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 867
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a IDENTIFIER s 328
a type s 329
a variable_decls s 904
g type 329
g variable_decls 904
s
a CASE r 2 jump_statement BREAK ;
a DEFAULT r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
s
a ; s 911
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 903
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 903
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 871
a CASE r 0 statements 
a CHAR_CONST s 10
a CONTINUE s 872
a DO s 873
a ELSE s 874
a GOTO s 875
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 876
a INPUT s 877
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 878
a RETURN s 879
a STRING_CONST s 23
a SWITCH s 880
a TEST s 881
a WHILE s 882
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 883
a conditional_expression s 33
a do_while_loop s 884
a else_statement s 885
a equality_expression s 36
a expression s 886
a for s 887
a for_loop s 888
a function_call s 40
a function_decl s 889
a if_statement s 890
a input_statement s 891
a jump_statement s 892
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 893
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 894
a statement_list s 895
a statements s 896
a switch_statement s 897
a test_statement s 898
a type s 899
a unary_expression s 60
a unary_operator s 61
a variable_decls s 900
a while_loop s 901
a { s 902
a } r 0 statements 
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 883
g conditional_expression 33
g do_while_loop 884
g else_statement 885
g equality_expression 36
g expression 886
g for_loop 888
g function_decl 889
g if_statement 890
g input_statement 891
g jump_statement 892
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 893
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 894
g statement_list 895
g statements 896
g switch_statement 897
g test_statement 898
g type 899
g unary_expression 60
g unary_operator 61
g variable_decls 900
g while_loop 901
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 868
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 868
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a CASE r 2 jump_statement CONTINUE ;
a DEFAULT r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 869
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 869
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 870
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 870
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ) s 931
a , s 366
s
a ) s 932
a , s 366
s
a ) s 933
a , s 366
s
a ) s 934
a , s 366
s
a ; s 928
s
a ; s 936
s
a block_statements s 922
a { s 148
g block_statements 922
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 871
a CHAR_CONST s 10
a CONTINUE s 872
a DO s 873
a ELSE s 874
a GOTO s 875
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 876
a INPUT s 877
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 878
a RETURN s 879
a STRING_CONST s 23
a SWITCH s 880
a TEST s 881
a WHILE s 882
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 883
a conditional_expression s 33
a do_while_loop s 884
a else_statement s 885
a equality_expression s 36
a expression s 886
a for s 887
a for_loop s 888
a function_call s 40
a function_decl s 889
a if_statement s 890
a input_statement s 891
a jump_statement s 892
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 893
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 915
a switch_statement s 897
a test_statement s 898
a type s 899
a unary_expression s 60
a unary_operator s 61
a variable_decls s 900
a while_loop s 901
a { s 902
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 883
g conditional_expression 33
g do_while_loop 884
g else_statement 885
g equality_expression 36
g expression 886
g for_loop 888
g function_decl 889
g if_statement 890
g input_statement 891
g jump_statement 892
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 893
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 915
g switch_statement 897
g test_statement 898
g type 899
g unary_expression 60
g unary_operator 61
g variable_decls 900
g while_loop 901
s
a IDENTIFIER s 929
s
a ( s 926
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 921
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 921
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 918
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 918
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a ; s 919
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 920
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 920
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ( s 935
s
a ( s 937
s
a ( s 938
s
a ! r 1 statement block_statements
a & r 1 statement block_statements
a ( r 1 statement block_statements
a * r 1 statement block_statements
a ++ r 1 statement block_statements
a - r 1 statement block_statements
a -- r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a BREAK r 1 statement block_statements
a CASE r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a DO r 1 statement block_statements
a ELSE r 1 statement block_statements
a GOTO r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a IF r 1 statement block_statements
a INPUT r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a RETURN r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a SWITCH r 1 statement block_statements
a TEST r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a function_call r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a ~ r 1 statement block_statements
s
a ! r 1 statement do_while_loop
a & r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a * r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a - r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a CASE r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
s
a ! r 1 statement else_statement
a & r 1 statement else_statement
a ( r 1 statement else_statement
a * r 1 statement else_statement
a ++ r 1 statement else_statement
a - r 1 statement else_statement
a -- r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a BREAK r 1 statement else_statement
a CASE r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a DO r 1 statement else_statement
a ELSE r 1 statement else_statement
a GOTO r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a IF r 1 statement else_statement
a INPUT r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a RETURN r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a SWITCH r 1 statement else_statement
a TEST r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a function_call r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a ~ r 1 statement else_statement
s
a , s 150
a ; s 923
s
a ( s 927
s
a ! r 1 statement for_loop
a & r 1 statement for_loop
a ( r 1 statement for_loop
a * r 1 statement for_loop
a ++ r 1 statement for_loop
a - r 1 statement for_loop
a -- r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a BREAK r 1 statement for_loop
a CASE r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a DO r 1 statement for_loop
a ELSE r 1 statement for_loop
a GOTO r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a IF r 1 statement for_loop
a INPUT r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a RETURN r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a SWITCH r 1 statement for_loop
a TEST r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a function_call r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a ~ r 1 statement for_loop
s
a ! r 1 statement function_decl
a & r 1 statement function_decl
a ( r 1 statement function_decl
a * r 1 statement function_decl
a ++ r 1 statement function_decl
a - r 1 statement function_decl
a -- r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a BREAK r 1 statement function_decl
a CASE r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a DO r 1 statement function_decl
a ELSE r 1 statement function_decl
a GOTO r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a IF r 1 statement function_decl
a INPUT r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a RETURN r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a SWITCH r 1 statement function_decl
a TEST r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a function_call r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a ~ r 1 statement function_decl
s
a ! r 1 statement if_statement
a & r 1 statement if_statement
a ( r 1 statement if_statement
a * r 1 statement if_statement
a ++ r 1 statement if_statement
a - r 1 statement if_statement
a -- r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a BREAK r 1 statement if_statement
a CASE r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a DO r 1 statement if_statement
a ELSE r 1 statement if_statement
a GOTO r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a IF r 1 statement if_statement
a INPUT r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a RETURN r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a SWITCH r 1 statement if_statement
a TEST r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a function_call r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a ~ r 1 statement if_statement
s
a ! r 1 statement input_statement
a & r 1 statement input_statement
a ( r 1 statement input_statement
a * r 1 statement input_statement
a ++ r 1 statement input_statement
a - r 1 statement input_statement
a -- r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a BREAK r 1 statement input_statement
a CASE r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a DO r 1 statement input_statement
a ELSE r 1 statement input_statement
a GOTO r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a IF r 1 statement input_statement
a INPUT r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a RETURN r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a SWITCH r 1 statement input_statement
a TEST r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a function_call r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a ~ r 1 statement input_statement
s
a ! r 1 statement jump_statement
a & r 1 statement jump_statement
a ( r 1 statement jump_statement
a * r 1 statement jump_statement
a ++ r 1 statement jump_statement
a - r 1 statement jump_statement
a -- r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a CASE r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a DO r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a GOTO r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a IF r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a TEST r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a function_call r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a ~ r 1 statement jump_statement
s
a ! r 1 statement output_statement
a & r 1 statement output_statement
a ( r 1 statement output_statement
a * r 1 statement output_statement
a ++ r 1 statement output_statement
a - r 1 statement output_statement
a -- r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a BREAK r 1 statement output_statement
a CASE r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a DO r 1 statement output_statement
a ELSE r 1 statement output_statement
a GOTO r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a IF r 1 statement output_statement
a INPUT r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a RETURN r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a SWITCH r 1 statement output_statement
a TEST r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a function_call r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a ~ r 1 statement output_statement
s
a ! r 1 statement_list statement
a & r 1 statement_list statement
a ( r 1 statement_list statement
a * r 1 statement_list statement
a ++ r 1 statement_list statement
a - r 1 statement_list statement
a -- r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a BREAK r 1 statement_list statement
a CASE r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a DO r 1 statement_list statement
a ELSE r 1 statement_list statement
a GOTO r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a IF r 1 statement_list statement
a INPUT r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a RETURN r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a SWITCH r 1 statement_list statement
a TEST r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a function_call r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a ~ r 1 statement_list statement
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 871
a CASE r 1 statements statement_list
a CHAR_CONST s 10
a CONTINUE s 872
a DO s 873
a ELSE s 874
a GOTO s 875
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 876
a INPUT s 877
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 878
a RETURN s 879
a STRING_CONST s 23
a SWITCH s 880
a TEST s 881
a WHILE s 882
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 883
a conditional_expression s 33
a do_while_loop s 884
a else_statement s 885
a equality_expression s 36
a expression s 886
a for s 887
a for_loop s 888
a function_call s 40
a function_decl s 889
a if_statement s 890
a input_statement s 891
a jump_statement s 892
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 893
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 914
a switch_statement s 897
a test_statement s 898
a type s 899
a unary_expression s 60
a unary_operator s 61
a variable_decls s 900
a while_loop s 901
a { s 902
a } r 1 statements statement_list
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 883
g conditional_expression 33
g do_while_loop 884
g else_statement 885
g equality_expression 36
g expression 886
g for_loop 888
g function_decl 889
g if_statement 890
g input_statement 891
g jump_statement 892
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 893
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 914
g switch_statement 897
g test_statement 898
g type 899
g unary_expression 60
g unary_operator 61
g variable_decls 900
g while_loop 901
s
a CASE r 4 switch_case_statement CASE expression : statements
a } r 4 switch_case_statement CASE expression : statements
s
a ! r 1 statement switch_statement
a & r 1 statement switch_statement
a ( r 1 statement switch_statement
a * r 1 statement switch_statement
a ++ r 1 statement switch_statement
a - r 1 statement switch_statement
a -- r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a CASE r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a DO r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a GOTO r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a IF r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a TEST r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a function_call r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a ~ r 1 statement switch_statement
s
a ! r 1 statement test_statement
a & r 1 statement test_statement
a ( r 1 statement test_statement
a * r 1 statement test_statement
a ++ r 1 statement test_statement
a - r 1 statement test_statement
a -- r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a BREAK r 1 statement test_statement
a CASE r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a DO r 1 statement test_statement
a ELSE r 1 statement test_statement
a GOTO r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a IF r 1 statement test_statement
a INPUT r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a RETURN r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a SWITCH r 1 statement test_statement
a TEST r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a function_call r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a ~ r 1 statement test_statement
s
a & s 152
a * s 153
a < s 154
a FUNC s 924
a VAR s 925
s
a ! r 1 statement variable_decls
a & r 1 statement variable_decls
a ( r 1 statement variable_decls
a * r 1 statement variable_decls
a ++ r 1 statement variable_decls
a - r 1 statement variable_decls
a -- r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a CASE r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a DO r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a GOTO r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a IF r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a TEST r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a function_call r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a ~ r 1 statement variable_decls
s
a ! r 1 statement while_loop
a & r 1 statement while_loop
a ( r 1 statement while_loop
a * r 1 statement while_loop
a ++ r 1 statement while_loop
a - r 1 statement while_loop
a -- r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a BREAK r 1 statement while_loop
a CASE r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a DO r 1 statement while_loop
a ELSE r 1 statement while_loop
a GOTO r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a IF r 1 statement while_loop
a INPUT r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a RETURN r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a SWITCH r 1 statement while_loop
a TEST r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a function_call r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a ~ r 1 statement while_loop
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 95
a CHAR_CONST s 10
a CONTINUE s 96
a DO s 97
a ELSE s 98
a GOTO s 99
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 100
a INPUT s 101
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 102
a RETURN s 103
a STRING_CONST s 23
a SWITCH s 104
a TEST s 105
a WHILE s 106
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 107
a conditional_expression s 33
a do_while_loop s 108
a else_statement s 109
a equality_expression s 36
a expression s 110
a for s 111
a for_loop s 112
a function_call s 40
a function_decl s 113
a if_statement s 114
a input_statement s 115
a jump_statement s 116
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 117
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 118
a statement_list s 119
a statements s 916
a switch_statement s 121
a test_statement s 122
a type s 123
a unary_expression s 60
a unary_operator s 61
a variable_decls s 124
a while_loop s 125
a { s 126
a } r 0 statements 
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 107
g conditional_expression 33
g do_while_loop 108
g else_statement 109
g equality_expression 36
g expression 110
g for_loop 112
g function_decl 113
g if_statement 114
g input_statement 115
g jump_statement 116
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 117
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 118
g statement_list 119
g statements 916
g switch_statement 121
g test_statement 122
g type 123
g unary_expression 60
g unary_operator 61
g variable_decls 124
g while_loop 125
s
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ; s 940
s
a , s 527
a ; s 930
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 806
a CHAR_CONST s 10
a CONTINUE s 807
a DO s 808
a ELSE s 809
a GOTO s 810
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 811
a INPUT s 812
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 813
a RETURN s 814
a STRING_CONST s 23
a SWITCH s 815
a TEST s 816
a WHILE s 817
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 818
a conditional_expression s 33
a do_while_loop s 819
a else_statement s 820
a equality_expression s 36
a expression s 821
a for s 822
a for_loop s 823
a function_call s 40
a function_decl s 824
a if_statement s 825
a input_statement s 826
a jump_statement s 827
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 828
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 917
a switch_statement s 830
a test_statement s 831
a type s 832
a unary_expression s 60
a unary_operator s 61
a variable_decls s 833
a while_loop s 834
a { s 835
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 818
g conditional_expression 33
g do_while_loop 819
g else_statement 820
g equality_expression 36
g expression 821
g for_loop 823
g function_decl 824
g if_statement 825
g input_statement 826
g jump_statement 827
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 828
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 917
g switch_statement 830
g test_statement 831
g type 832
g unary_expression 60
g unary_operator 61
g variable_decls 833
g while_loop 834
s
a CASE r 3 output_statement OUTPUT expression ;
a DEFAULT r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
s
a CASE r 3 jump_statement RETURN expression ;
a DEFAULT r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
s
a CASE r 3 input_statement INPUT expression ;
a DEFAULT r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
s
a ( s 939
s
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a DEFAULT r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 941
s
a CASE r 3 block_statements { statements }
a DEFAULT r 3 block_statements { statements }
a } r 3 block_statements { statements }
s
a ! r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a CASE r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
s
a ! r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a CASE r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
s
a } s 960
s
a CASE r 5 test_case_statement CASE ( expression ) statement
a DEFAULT r 5 test_case_statement CASE ( expression ) statement
a } r 5 test_case_statement CASE ( expression ) statement
s
a , s 150
a ; s 954
s
a ! r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a CASE r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
s
a , s 150
a ; s 955
s
a , s 150
a ; s 956
s
a WHILE s 959
s
a ! r 2 statement expression ;
a & r 2 statement expression ;
a ( r 2 statement expression ;
a * r 2 statement expression ;
a ++ r 2 statement expression ;
a - r 2 statement expression ;
a -- r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a BREAK r 2 statement expression ;
a CASE r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a DO r 2 statement expression ;
a ELSE r 2 statement expression ;
a GOTO r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a IF r 2 statement expression ;
a INPUT r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a RETURN r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a SWITCH r 2 statement expression ;
a TEST r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a function_call r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a ~ r 2 statement expression ;
s
a IDENTIFIER s 957
s
a IDENTIFIER s 331
a variable_inits s 951
a variable_name_and_assign s 333
g variable_inits 951
g variable_name_and_assign 333
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 942
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 942
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a IDENTIFIER s 328
a type s 329
a variable_decls s 950
g type 329
g variable_decls 950
s
a ! r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a CASE r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
s
a ; s 958
s
a CASE r 4 variable_decls type VAR variable_inits ;
a DEFAULT r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 806
a CHAR_CONST s 10
a CONTINUE s 807
a DO s 808
a ELSE s 809
a GOTO s 810
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 811
a INPUT s 812
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 813
a RETURN s 814
a STRING_CONST s 23
a SWITCH s 815
a TEST s 816
a WHILE s 817
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 818
a conditional_expression s 33
a do_while_loop s 819
a else_statement s 820
a equality_expression s 36
a expression s 821
a for s 822
a for_loop s 823
a function_call s 40
a function_decl s 824
a if_statement s 825
a input_statement s 826
a jump_statement s 827
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 828
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 947
a switch_statement s 830
a test_statement s 831
a type s 832
a unary_expression s 60
a unary_operator s 61
a variable_decls s 833
a while_loop s 834
a { s 835
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 818
g conditional_expression 33
g do_while_loop 819
g else_statement 820
g equality_expression 36
g expression 821
g for_loop 823
g function_decl 824
g if_statement 825
g input_statement 826
g jump_statement 827
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 828
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 947
g switch_statement 830
g test_statement 831
g type 832
g unary_expression 60
g unary_operator 61
g variable_decls 833
g while_loop 834
s
a { s 961
s
a { s 962
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 806
a CHAR_CONST s 10
a CONTINUE s 807
a DO s 808
a ELSE s 809
a GOTO s 810
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 811
a INPUT s 812
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 813
a RETURN s 814
a STRING_CONST s 23
a SWITCH s 815
a TEST s 816
a WHILE s 817
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 818
a conditional_expression s 33
a do_while_loop s 819
a else_statement s 820
a equality_expression s 36
a expression s 821
a for s 822
a for_loop s 823
a function_call s 40
a function_decl s 824
a if_statement s 825
a input_statement s 826
a jump_statement s 827
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 828
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 948
a switch_statement s 830
a test_statement s 831
a type s 832
a unary_expression s 60
a unary_operator s 61
a variable_decls s 833
a while_loop s 834
a { s 835
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 818
g conditional_expression 33
g do_while_loop 819
g else_statement 820
g equality_expression 36
g expression 821
g for_loop 823
g function_decl 824
g if_statement 825
g input_statement 826
g jump_statement 827
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 828
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 948
g switch_statement 830
g test_statement 831
g type 832
g unary_expression 60
g unary_operator 61
g variable_decls 833
g while_loop 834
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 943
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 943
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a CASE r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 944
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 944
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 945
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 945
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ) s 952
a func_args s 953
a single_variable_decl s 689
g func_args 953
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 949
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 949
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 946
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 946
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ) s 967
a , s 366
s
a ) s 968
a , s 366
s
a ) s 969
a , s 366
s
a ) s 970
a , s 366
s
a ) s 971
a , s 366
s
a CASE r 5 if_statement IF ( expression ) statement
a DEFAULT r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
s
a CASE r 5 while_loop WHILE ( expression ) statement
a DEFAULT r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
s
a , s 150
a ; s 972
s
a ; s 975
s
a , s 527
a ; s 966
s
a block_statements s 964
a { s 835
g block_statements 964
s
a ) s 973
a , s 764
s
a ! r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a CASE r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
s
a ! r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a CASE r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
s
a ! r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a CASE r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
s
a ( s 974
s
a ! r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 976
s
a ! r 3 block_statements { statements }
a & r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a * r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a - r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a CASE r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 963
a } r 0 switch_case_statements 
g switch_case_statements 963
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 965
a } r 0 test_case_statements 
g test_case_statements 965
s
a CASE s 778
a switch_case_statement s 779
a } s 982
g switch_case_statement 779
s
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DEFAULT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a CASE s 782
a DEFAULT s 783
a test_case_statement s 784
a } s 983
g test_case_statement 784
s
a ! r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a CASE r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 871
a CHAR_CONST s 10
a CONTINUE s 872
a DO s 873
a ELSE s 874
a GOTO s 875
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 876
a INPUT s 877
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 878
a RETURN s 879
a STRING_CONST s 23
a SWITCH s 880
a TEST s 881
a WHILE s 882
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 883
a conditional_expression s 33
a do_while_loop s 884
a else_statement s 885
a equality_expression s 36
a expression s 886
a for s 887
a for_loop s 888
a function_call s 40
a function_decl s 889
a if_statement s 890
a input_statement s 891
a jump_statement s 892
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 893
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 979
a switch_statement s 897
a test_statement s 898
a type s 899
a unary_expression s 60
a unary_operator s 61
a variable_decls s 900
a while_loop s 901
a { s 902
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 883
g conditional_expression 33
g do_while_loop 884
g else_statement 885
g equality_expression 36
g expression 886
g for_loop 888
g function_decl 889
g if_statement 890
g input_statement 891
g jump_statement 892
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 893
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 979
g switch_statement 897
g test_statement 898
g type 899
g unary_expression 60
g unary_operator 61
g variable_decls 900
g while_loop 901
s
a { s 987
s
a { s 988
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 871
a CHAR_CONST s 10
a CONTINUE s 872
a DO s 873
a ELSE s 874
a GOTO s 875
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 876
a INPUT s 877
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 878
a RETURN s 879
a STRING_CONST s 23
a SWITCH s 880
a TEST s 881
a WHILE s 882
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 883
a conditional_expression s 33
a do_while_loop s 884
a else_statement s 885
a equality_expression s 36
a expression s 886
a for s 887
a for_loop s 888
a function_call s 40
a function_decl s 889
a if_statement s 890
a input_statement s 891
a jump_statement s 892
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 893
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 980
a switch_statement s 897
a test_statement s 898
a type s 899
a unary_expression s 60
a unary_operator s 61
a variable_decls s 900
a while_loop s 901
a { s 902
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 883
g conditional_expression 33
g do_while_loop 884
g else_statement 885
g equality_expression 36
g expression 886
g for_loop 888
g function_decl 889
g if_statement 890
g input_statement 891
g jump_statement 892
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 893
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 980
g switch_statement 897
g test_statement 898
g type 899
g unary_expression 60
g unary_operator 61
g variable_decls 900
g while_loop 901
s
a ; s 989
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 978
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 978
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a block_statements s 986
a { s 835
g block_statements 986
s
a ) s 984
a func_args s 985
a single_variable_decl s 689
g func_args 985
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a CHAR_CONST s 10
a HEX_CONST s 15
a IDENTIFIER s 127
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a STRING_CONST s 23
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a conditional_expression s 33
a equality_expression s 36
a expression s 981
a function_call s 40
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a unary_expression s 60
a unary_operator s 61
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g conditional_expression 33
g equality_expression 36
g expression 981
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g unary_expression 60
g unary_operator 61
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 977
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 977
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a ) s 993
a , s 366
s
a ) s 994
a , s 366
s
a ! r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a CASE r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
s
a ! r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a CASE r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
s
a , s 150
a ; s 995
s
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DEFAULT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a DEFAULT r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
s
a block_statements s 991
a { s 902
g block_statements 991
s
a ) s 996
a , s 764
s
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DEFAULT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 990
a } r 0 switch_case_statements 
g switch_case_statements 990
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 992
a } r 0 test_case_statements 
g test_case_statements 992
s
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DEFAULT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a CASE s 778
a switch_case_statement s 779
a } s 999
g switch_case_statement 779
s
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a CASE s 782
a DEFAULT s 783
a test_case_statement s 784
a } s 1000
g test_case_statement 784
s
a ; s 1002
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 806
a CHAR_CONST s 10
a CONTINUE s 807
a DO s 808
a ELSE s 809
a GOTO s 810
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 811
a INPUT s 812
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 813
a RETURN s 814
a STRING_CONST s 23
a SWITCH s 815
a TEST s 816
a WHILE s 817
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 818
a conditional_expression s 33
a do_while_loop s 819
a else_statement s 820
a equality_expression s 36
a expression s 821
a for s 822
a for_loop s 823
a function_call s 40
a function_decl s 824
a if_statement s 825
a input_statement s 826
a jump_statement s 827
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 828
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 998
a switch_statement s 830
a test_statement s 831
a type s 832
a unary_expression s 60
a unary_operator s 61
a variable_decls s 833
a while_loop s 834
a { s 835
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 818
g conditional_expression 33
g do_while_loop 819
g else_statement 820
g equality_expression 36
g expression 821
g for_loop 823
g function_decl 824
g if_statement 825
g input_statement 826
g jump_statement 827
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 828
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 998
g switch_statement 830
g test_statement 831
g type 832
g unary_expression 60
g unary_operator 61
g variable_decls 833
g while_loop 834
s
a ! s 1
a & s 2
a ( s 66
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 67
a CHAR_CONST s 68
a HEX_CONST s 69
a IDENTIFIER s 70
a NUMBER_CONST s 71
a OCTAL_CONST s 72
a STRING_CONST s 73
a additive_expression s 74
a assignment_expression s 75
a binary_and_expression s 76
a binary_or_expression s 77
a binary_xor_expression s 78
a conditional_expression s 79
a equality_expression s 80
a expression s 997
a function_call s 82
a logical_and_expression s 83
a logical_or_expression s 84
a logical_xor_expression s 85
a multiplicative_expression s 86
a postfix_expression s 87
a primary_expression s 88
a relational_expression s 89
a shift_expression s 90
a unary_expression s 91
a unary_operator s 92
a ~ s 65
g additive_expression 74
g assignment_expression 75
g binary_and_expression 76
g binary_or_expression 77
g binary_xor_expression 78
g conditional_expression 79
g equality_expression 80
g expression 997
g logical_and_expression 83
g logical_or_expression 84
g logical_xor_expression 85
g multiplicative_expression 86
g postfix_expression 87
g primary_expression 88
g relational_expression 89
g shift_expression 90
g unary_expression 91
g unary_operator 92
s
a block_statements s 1001
a { s 902
g block_statements 1001
s
a ) s 1003
a , s 366
s
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DEFAULT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ! s 1
a & s 2
a ( s 3
a * s 4
a ++ s 5
a - s 6
a -- s 7
a BINARY_CONST s 8
a BREAK s 871
a CHAR_CONST s 10
a CONTINUE s 872
a DO s 873
a ELSE s 874
a GOTO s 875
a HEX_CONST s 15
a IDENTIFIER s 16
a IF s 876
a INPUT s 877
a NUMBER_CONST s 19
a OCTAL_CONST s 20
a OUTPUT s 878
a RETURN s 879
a STRING_CONST s 23
a SWITCH s 880
a TEST s 881
a WHILE s 882
a additive_expression s 27
a assignment_expression s 28
a binary_and_expression s 29
a binary_or_expression s 30
a binary_xor_expression s 31
a block_statements s 883
a conditional_expression s 33
a do_while_loop s 884
a else_statement s 885
a equality_expression s 36
a expression s 886
a for s 887
a for_loop s 888
a function_call s 40
a function_decl s 889
a if_statement s 890
a input_statement s 891
a jump_statement s 892
a logical_and_expression s 45
a logical_or_expression s 46
a logical_xor_expression s 47
a multiplicative_expression s 48
a output_statement s 893
a postfix_expression s 50
a primary_expression s 51
a relational_expression s 52
a shift_expression s 53
a statement s 1004
a switch_statement s 897
a test_statement s 898
a type s 899
a unary_expression s 60
a unary_operator s 61
a variable_decls s 900
a while_loop s 901
a { s 902
a ~ s 65
g additive_expression 27
g assignment_expression 28
g binary_and_expression 29
g binary_or_expression 30
g binary_xor_expression 31
g block_statements 883
g conditional_expression 33
g do_while_loop 884
g else_statement 885
g equality_expression 36
g expression 886
g for_loop 888
g function_decl 889
g if_statement 890
g input_statement 891
g jump_statement 892
g logical_and_expression 45
g logical_or_expression 46
g logical_xor_expression 47
g multiplicative_expression 48
g output_statement 893
g postfix_expression 50
g primary_expression 51
g relational_expression 52
g shift_expression 53
g statement 1004
g switch_statement 897
g test_statement 898
g type 899
g unary_expression 60
g unary_operator 61
g variable_decls 900
g while_loop 901
s
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s