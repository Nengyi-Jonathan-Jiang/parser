1005
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 5
a CHAR_CONST s 19
a CONTINUE s 29
a DO s 35
a ELSE s 6
a GOTO s 17
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 7
a INPUT s 34
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 44
a RETURN s 54
a STRING_CONST s 33
a SWITCH s 46
a TEST s 45
a WHILE s 63
a __END__ r 0 statements 
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 22
a conditional_expression s 20
a do_while_loop s 26
a else_statement s 15
a equality_expression s 47
a expression s 27
a for s 50
a for_loop s 56
a function_call s 1
a function_decl s 53
a if_statement s 16
a input_statement s 23
a jump_statement s 65
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 37
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 55
a statement_list s 24
a statements s 51
a switch_statement s 18
a test_statement s 38
a type s 3
a unary_expression s 36
a unary_operator s 43
a variable_decls s 60
a while_loop s 48
a { s 30
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 22
g conditional_expression 20
g do_while_loop 26
g else_statement 15
g equality_expression 47
g expression 27
g for_loop 56
g function_decl 53
g if_statement 16
g input_statement 23
g jump_statement 65
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 37
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 55
g statement_list 24
g statements 51
g switch_statement 18
g test_statement 38
g type 3
g unary_expression 36
g unary_operator 43
g variable_decls 60
g while_loop 48
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a ; r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 159
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 160
a -= r 1 unary_expression postfix_expression
a -> s 161
a . s 157
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a ; r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 158
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a & s 166
a * s 167
a < s 168
a FUNC s 169
a VAR s 165
s
a , r 1 conditional_expression logical_or_expression
a ; r 1 conditional_expression logical_or_expression
a ? s 151
a || s 152
s
a ; s 186
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 5
a CHAR_CONST s 19
a CONTINUE s 29
a DO s 35
a ELSE s 6
a GOTO s 17
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 7
a INPUT s 34
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 44
a RETURN s 54
a STRING_CONST s 33
a SWITCH s 46
a TEST s 45
a WHILE s 63
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 22
a conditional_expression s 20
a do_while_loop s 26
a else_statement s 15
a equality_expression s 47
a expression s 27
a for s 50
a for_loop s 56
a function_call s 1
a function_decl s 53
a if_statement s 16
a input_statement s 23
a jump_statement s 65
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 37
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 138
a switch_statement s 18
a test_statement s 38
a type s 3
a unary_expression s 36
a unary_operator s 43
a variable_decls s 60
a while_loop s 48
a { s 30
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 22
g conditional_expression 20
g do_while_loop 26
g else_statement 15
g equality_expression 47
g expression 27
g for_loop 56
g function_decl 53
g if_statement 16
g input_statement 23
g jump_statement 65
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 37
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 138
g switch_statement 18
g test_statement 38
g type 3
g unary_expression 36
g unary_operator 43
g variable_decls 60
g while_loop 48
s
a ( s 173
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a ; r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! r 1 unary_operator !
a & r 1 unary_operator !
a ( r 1 unary_operator !
a * r 1 unary_operator !
a ++ r 1 unary_operator !
a - r 1 unary_operator !
a -- r 1 unary_operator !
a BINARY_CONST r 1 unary_operator !
a CHAR_CONST r 1 unary_operator !
a HEX_CONST r 1 unary_operator !
a IDENTIFIER r 1 unary_operator !
a NUMBER_CONST r 1 unary_operator !
a OCTAL_CONST r 1 unary_operator !
a STRING_CONST r 1 unary_operator !
a function_call r 1 unary_operator !
a ~ r 1 unary_operator !
s
a ! r 1 unary_operator &
a & r 1 unary_operator &
a ( r 1 unary_operator &
a * r 1 unary_operator &
a ++ r 1 unary_operator &
a - r 1 unary_operator &
a -- r 1 unary_operator &
a BINARY_CONST r 1 unary_operator &
a CHAR_CONST r 1 unary_operator &
a HEX_CONST r 1 unary_operator &
a IDENTIFIER r 1 unary_operator &
a NUMBER_CONST r 1 unary_operator &
a OCTAL_CONST r 1 unary_operator &
a STRING_CONST r 1 unary_operator &
a function_call r 1 unary_operator &
a ~ r 1 unary_operator &
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 87
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 87
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a ; r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 149
a || r 1 logical_and_expression binary_or_expression
s
a ! r 1 unary_operator *
a & r 1 unary_operator *
a ( r 1 unary_operator *
a * r 1 unary_operator *
a ++ r 1 unary_operator *
a - r 1 unary_operator *
a -- r 1 unary_operator *
a BINARY_CONST r 1 unary_operator *
a CHAR_CONST r 1 unary_operator *
a HEX_CONST r 1 unary_operator *
a IDENTIFIER r 1 unary_operator *
a NUMBER_CONST r 1 unary_operator *
a OCTAL_CONST r 1 unary_operator *
a STRING_CONST r 1 unary_operator *
a function_call r 1 unary_operator *
a ~ r 1 unary_operator *
s
a ! r 1 unary_operator -
a & r 1 unary_operator -
a ( r 1 unary_operator -
a * r 1 unary_operator -
a ++ r 1 unary_operator -
a - r 1 unary_operator -
a -- r 1 unary_operator -
a BINARY_CONST r 1 unary_operator -
a CHAR_CONST r 1 unary_operator -
a HEX_CONST r 1 unary_operator -
a IDENTIFIER r 1 unary_operator -
a NUMBER_CONST r 1 unary_operator -
a OCTAL_CONST r 1 unary_operator -
a STRING_CONST r 1 unary_operator -
a function_call r 1 unary_operator -
a ~ r 1 unary_operator -
s
a ! r 1 statement else_statement
a & r 1 statement else_statement
a ( r 1 statement else_statement
a * r 1 statement else_statement
a ++ r 1 statement else_statement
a - r 1 statement else_statement
a -- r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a BREAK r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a DO r 1 statement else_statement
a ELSE r 1 statement else_statement
a GOTO r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a IF r 1 statement else_statement
a INPUT r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a RETURN r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a SWITCH r 1 statement else_statement
a TEST r 1 statement else_statement
a WHILE r 1 statement else_statement
a __END__ r 1 statement else_statement
a for r 1 statement else_statement
a function_call r 1 statement else_statement
a { r 1 statement else_statement
a ~ r 1 statement else_statement
s
a ! r 1 statement if_statement
a & r 1 statement if_statement
a ( r 1 statement if_statement
a * r 1 statement if_statement
a ++ r 1 statement if_statement
a - r 1 statement if_statement
a -- r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a BREAK r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a DO r 1 statement if_statement
a ELSE r 1 statement if_statement
a GOTO r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a IF r 1 statement if_statement
a INPUT r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a RETURN r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a SWITCH r 1 statement if_statement
a TEST r 1 statement if_statement
a WHILE r 1 statement if_statement
a __END__ r 1 statement if_statement
a for r 1 statement if_statement
a function_call r 1 statement if_statement
a { r 1 statement if_statement
a ~ r 1 statement if_statement
s
a IDENTIFIER s 150
s
a ! r 1 statement switch_statement
a & r 1 statement switch_statement
a ( r 1 statement switch_statement
a * r 1 statement switch_statement
a ++ r 1 statement switch_statement
a - r 1 statement switch_statement
a -- r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a DO r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a GOTO r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a IF r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a TEST r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a __END__ r 1 statement switch_statement
a for r 1 statement switch_statement
a function_call r 1 statement switch_statement
a { r 1 statement switch_statement
a ~ r 1 statement switch_statement
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a ; r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a , r 1 assignment_expression conditional_expression
a ; r 1 assignment_expression conditional_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a ; r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 187
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 188
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a ! r 1 statement block_statements
a & r 1 statement block_statements
a ( r 1 statement block_statements
a * r 1 statement block_statements
a ++ r 1 statement block_statements
a - r 1 statement block_statements
a -- r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a BREAK r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a DO r 1 statement block_statements
a ELSE r 1 statement block_statements
a GOTO r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a IF r 1 statement block_statements
a INPUT r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a RETURN r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a SWITCH r 1 statement block_statements
a TEST r 1 statement block_statements
a WHILE r 1 statement block_statements
a __END__ r 1 statement block_statements
a for r 1 statement block_statements
a function_call r 1 statement block_statements
a { r 1 statement block_statements
a ~ r 1 statement block_statements
s
a ! r 1 statement input_statement
a & r 1 statement input_statement
a ( r 1 statement input_statement
a * r 1 statement input_statement
a ++ r 1 statement input_statement
a - r 1 statement input_statement
a -- r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a BREAK r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a DO r 1 statement input_statement
a ELSE r 1 statement input_statement
a GOTO r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a IF r 1 statement input_statement
a INPUT r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a RETURN r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a SWITCH r 1 statement input_statement
a TEST r 1 statement input_statement
a WHILE r 1 statement input_statement
a __END__ r 1 statement input_statement
a for r 1 statement input_statement
a function_call r 1 statement input_statement
a { r 1 statement input_statement
a ~ r 1 statement input_statement
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 5
a CHAR_CONST s 19
a CONTINUE s 29
a DO s 35
a ELSE s 6
a GOTO s 17
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 7
a INPUT s 34
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 44
a RETURN s 54
a STRING_CONST s 33
a SWITCH s 46
a TEST s 45
a WHILE s 63
a __END__ r 1 statements statement_list
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 22
a conditional_expression s 20
a do_while_loop s 26
a else_statement s 15
a equality_expression s 47
a expression s 27
a for s 50
a for_loop s 56
a function_call s 1
a function_decl s 53
a if_statement s 16
a input_statement s 23
a jump_statement s 65
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 37
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 137
a switch_statement s 18
a test_statement s 38
a type s 3
a unary_expression s 36
a unary_operator s 43
a variable_decls s 60
a while_loop s 48
a { s 30
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 22
g conditional_expression 20
g do_while_loop 26
g else_statement 15
g equality_expression 47
g expression 27
g for_loop 56
g function_decl 53
g if_statement 16
g input_statement 23
g jump_statement 65
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 37
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 137
g switch_statement 18
g test_statement 38
g type 3
g unary_expression 36
g unary_operator 43
g variable_decls 60
g while_loop 48
s
a ! r 1 unary_operator ++
a & r 1 unary_operator ++
a ( r 1 unary_operator ++
a * r 1 unary_operator ++
a ++ r 1 unary_operator ++
a - r 1 unary_operator ++
a -- r 1 unary_operator ++
a BINARY_CONST r 1 unary_operator ++
a CHAR_CONST r 1 unary_operator ++
a HEX_CONST r 1 unary_operator ++
a IDENTIFIER r 1 unary_operator ++
a NUMBER_CONST r 1 unary_operator ++
a OCTAL_CONST r 1 unary_operator ++
a STRING_CONST r 1 unary_operator ++
a function_call r 1 unary_operator ++
a ~ r 1 unary_operator ++
s
a ! r 1 statement do_while_loop
a & r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a * r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a - r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a __END__ r 1 statement do_while_loop
a for r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a { r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
s
a , s 179
a ; s 180
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a ; r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a ; s 174
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 132
a statement_list s 115
a statements s 129
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a } r 0 statements 
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 132
g statement_list 115
g statements 129
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a ; r 1 equality_expression relational_expression
a < s 153
a <= s 155
a == r 1 equality_expression relational_expression
a > s 154
a >= s 156
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a ! r 1 unary_operator ~
a & r 1 unary_operator ~
a ( r 1 unary_operator ~
a * r 1 unary_operator ~
a ++ r 1 unary_operator ~
a - r 1 unary_operator ~
a -- r 1 unary_operator ~
a BINARY_CONST r 1 unary_operator ~
a CHAR_CONST r 1 unary_operator ~
a HEX_CONST r 1 unary_operator ~
a IDENTIFIER r 1 unary_operator ~
a NUMBER_CONST r 1 unary_operator ~
a OCTAL_CONST r 1 unary_operator ~
a STRING_CONST r 1 unary_operator ~
a function_call r 1 unary_operator ~
a ~ r 1 unary_operator ~
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a ; r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 143
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 143
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a block_statements s 147
a { s 148
g block_statements 147
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 74
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 76
a * r 1 multiplicative_expression unary_expression
a *= s 69
a + r 1 multiplicative_expression unary_expression
a += s 70
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 73
a / r 1 multiplicative_expression unary_expression
a /= s 77
a ; r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 75
a <= r 1 multiplicative_expression unary_expression
a = s 67
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 71
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 72
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 66
a | r 1 multiplicative_expression unary_expression
a |= s 68
a || r 1 multiplicative_expression unary_expression
g assignment_operator 66
s
a ! r 1 statement output_statement
a & r 1 statement output_statement
a ( r 1 statement output_statement
a * r 1 statement output_statement
a ++ r 1 statement output_statement
a - r 1 statement output_statement
a -- r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a BREAK r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a DO r 1 statement output_statement
a ELSE r 1 statement output_statement
a GOTO r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a IF r 1 statement output_statement
a INPUT r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a RETURN r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a SWITCH r 1 statement output_statement
a TEST r 1 statement output_statement
a WHILE r 1 statement output_statement
a __END__ r 1 statement output_statement
a for r 1 statement output_statement
a function_call r 1 statement output_statement
a { r 1 statement output_statement
a ~ r 1 statement output_statement
s
a ! r 1 statement test_statement
a & r 1 statement test_statement
a ( r 1 statement test_statement
a * r 1 statement test_statement
a ++ r 1 statement test_statement
a - r 1 statement test_statement
a -- r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a BREAK r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a DO r 1 statement test_statement
a ELSE r 1 statement test_statement
a GOTO r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a IF r 1 statement test_statement
a INPUT r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a RETURN r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a SWITCH r 1 statement test_statement
a TEST r 1 statement test_statement
a WHILE r 1 statement test_statement
a __END__ r 1 statement test_statement
a for r 1 statement test_statement
a function_call r 1 statement test_statement
a { r 1 statement test_statement
a ~ r 1 statement test_statement
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a ; r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 175
a , r 1 shift_expression additive_expression
a - s 176
a ; r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 162
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 163
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 164
a ; r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a ! r 1 unary_operator --
a & r 1 unary_operator --
a ( r 1 unary_operator --
a * r 1 unary_operator --
a ++ r 1 unary_operator --
a - r 1 unary_operator --
a -- r 1 unary_operator --
a BINARY_CONST r 1 unary_operator --
a CHAR_CONST r 1 unary_operator --
a HEX_CONST r 1 unary_operator --
a IDENTIFIER r 1 unary_operator --
a NUMBER_CONST r 1 unary_operator --
a OCTAL_CONST r 1 unary_operator --
a STRING_CONST r 1 unary_operator --
a function_call r 1 unary_operator --
a ~ r 1 unary_operator --
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a function_call s 1
a postfix_expression s 144
a primary_expression s 8
a unary_expression s 145
a unary_operator s 146
a ~ s 32
g postfix_expression 144
g primary_expression 8
g unary_expression 145
g unary_operator 146
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 142
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 142
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ( s 177
s
a ( s 181
s
a != s 182
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a ; r 1 binary_and_expression equality_expression
a == s 183
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a ! r 1 statement while_loop
a & r 1 statement while_loop
a ( r 1 statement while_loop
a * r 1 statement while_loop
a ++ r 1 statement while_loop
a - r 1 statement while_loop
a -- r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a BREAK r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a DO r 1 statement while_loop
a ELSE r 1 statement while_loop
a GOTO r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a IF r 1 statement while_loop
a INPUT r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a RETURN r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a SWITCH r 1 statement while_loop
a TEST r 1 statement while_loop
a WHILE r 1 statement while_loop
a __END__ r 1 statement while_loop
a for r 1 statement while_loop
a function_call r 1 statement while_loop
a { r 1 statement while_loop
a ~ r 1 statement while_loop
s
a , r 1 logical_or_expression logical_xor_expression
a ; r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 185
a || r 1 logical_or_expression logical_xor_expression
s
a ( s 170
s
a __END__ a 
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a ; r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 171
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a ! r 1 statement function_decl
a & r 1 statement function_decl
a ( r 1 statement function_decl
a * r 1 statement function_decl
a ++ r 1 statement function_decl
a - r 1 statement function_decl
a -- r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a BREAK r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a DO r 1 statement function_decl
a ELSE r 1 statement function_decl
a GOTO r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a IF r 1 statement function_decl
a INPUT r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a RETURN r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a SWITCH r 1 statement function_decl
a TEST r 1 statement function_decl
a WHILE r 1 statement function_decl
a __END__ r 1 statement function_decl
a for r 1 statement function_decl
a function_call r 1 statement function_decl
a { r 1 statement function_decl
a ~ r 1 statement function_decl
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a ; s 139
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 140
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 140
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! r 1 statement_list statement
a & r 1 statement_list statement
a ( r 1 statement_list statement
a * r 1 statement_list statement
a ++ r 1 statement_list statement
a - r 1 statement_list statement
a -- r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a BREAK r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a DO r 1 statement_list statement
a ELSE r 1 statement_list statement
a GOTO r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a IF r 1 statement_list statement
a INPUT r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a RETURN r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a SWITCH r 1 statement_list statement
a TEST r 1 statement_list statement
a WHILE r 1 statement_list statement
a __END__ r 1 statement_list statement
a for r 1 statement_list statement
a function_call r 1 statement_list statement
a { r 1 statement_list statement
a ~ r 1 statement_list statement
s
a ! r 1 statement for_loop
a & r 1 statement for_loop
a ( r 1 statement for_loop
a * r 1 statement for_loop
a ++ r 1 statement for_loop
a - r 1 statement for_loop
a -- r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a BREAK r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a DO r 1 statement for_loop
a ELSE r 1 statement for_loop
a GOTO r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a IF r 1 statement for_loop
a INPUT r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a RETURN r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a SWITCH r 1 statement for_loop
a TEST r 1 statement for_loop
a WHILE r 1 statement for_loop
a __END__ r 1 statement for_loop
a for r 1 statement for_loop
a function_call r 1 statement for_loop
a { r 1 statement for_loop
a ~ r 1 statement for_loop
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a :: s 184
a ; r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a FUNC r 1 type IDENTIFIER
a VAR r 1 type IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a ; r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a , r 1 expression assignment_expression
a ; r 1 expression assignment_expression
s
a ! r 1 statement variable_decls
a & r 1 statement variable_decls
a ( r 1 statement variable_decls
a * r 1 statement variable_decls
a ++ r 1 statement variable_decls
a - r 1 statement variable_decls
a -- r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a DO r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a GOTO r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a IF r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a TEST r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a __END__ r 1 statement variable_decls
a for r 1 statement variable_decls
a function_call r 1 statement variable_decls
a { r 1 statement variable_decls
a ~ r 1 statement variable_decls
s
a && s 172
a , r 1 logical_xor_expression logical_and_expression
a ; r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a ; r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a ( s 189
s
a & s 178
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a ; r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a ! r 1 statement jump_statement
a & r 1 statement jump_statement
a ( r 1 statement jump_statement
a * r 1 statement jump_statement
a ++ r 1 statement jump_statement
a - r 1 statement jump_statement
a -- r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a DO r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a GOTO r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a IF r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a TEST r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a __END__ r 1 statement jump_statement
a for r 1 statement jump_statement
a function_call r 1 statement jump_statement
a { r 1 statement jump_statement
a ~ r 1 statement jump_statement
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 232
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 232
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! r 1 assignment_operator =
a & r 1 assignment_operator =
a ( r 1 assignment_operator =
a * r 1 assignment_operator =
a ++ r 1 assignment_operator =
a - r 1 assignment_operator =
a -- r 1 assignment_operator =
a BINARY_CONST r 1 assignment_operator =
a CHAR_CONST r 1 assignment_operator =
a HEX_CONST r 1 assignment_operator =
a IDENTIFIER r 1 assignment_operator =
a NUMBER_CONST r 1 assignment_operator =
a OCTAL_CONST r 1 assignment_operator =
a STRING_CONST r 1 assignment_operator =
a function_call r 1 assignment_operator =
a ~ r 1 assignment_operator =
s
a ! r 1 assignment_operator |=
a & r 1 assignment_operator |=
a ( r 1 assignment_operator |=
a * r 1 assignment_operator |=
a ++ r 1 assignment_operator |=
a - r 1 assignment_operator |=
a -- r 1 assignment_operator |=
a BINARY_CONST r 1 assignment_operator |=
a CHAR_CONST r 1 assignment_operator |=
a HEX_CONST r 1 assignment_operator |=
a IDENTIFIER r 1 assignment_operator |=
a NUMBER_CONST r 1 assignment_operator |=
a OCTAL_CONST r 1 assignment_operator |=
a STRING_CONST r 1 assignment_operator |=
a function_call r 1 assignment_operator |=
a ~ r 1 assignment_operator |=
s
a ! r 1 assignment_operator *=
a & r 1 assignment_operator *=
a ( r 1 assignment_operator *=
a * r 1 assignment_operator *=
a ++ r 1 assignment_operator *=
a - r 1 assignment_operator *=
a -- r 1 assignment_operator *=
a BINARY_CONST r 1 assignment_operator *=
a CHAR_CONST r 1 assignment_operator *=
a HEX_CONST r 1 assignment_operator *=
a IDENTIFIER r 1 assignment_operator *=
a NUMBER_CONST r 1 assignment_operator *=
a OCTAL_CONST r 1 assignment_operator *=
a STRING_CONST r 1 assignment_operator *=
a function_call r 1 assignment_operator *=
a ~ r 1 assignment_operator *=
s
a ! r 1 assignment_operator +=
a & r 1 assignment_operator +=
a ( r 1 assignment_operator +=
a * r 1 assignment_operator +=
a ++ r 1 assignment_operator +=
a - r 1 assignment_operator +=
a -- r 1 assignment_operator +=
a BINARY_CONST r 1 assignment_operator +=
a CHAR_CONST r 1 assignment_operator +=
a HEX_CONST r 1 assignment_operator +=
a IDENTIFIER r 1 assignment_operator +=
a NUMBER_CONST r 1 assignment_operator +=
a OCTAL_CONST r 1 assignment_operator +=
a STRING_CONST r 1 assignment_operator +=
a function_call r 1 assignment_operator +=
a ~ r 1 assignment_operator +=
s
a ! r 1 assignment_operator >>=
a & r 1 assignment_operator >>=
a ( r 1 assignment_operator >>=
a * r 1 assignment_operator >>=
a ++ r 1 assignment_operator >>=
a - r 1 assignment_operator >>=
a -- r 1 assignment_operator >>=
a BINARY_CONST r 1 assignment_operator >>=
a CHAR_CONST r 1 assignment_operator >>=
a HEX_CONST r 1 assignment_operator >>=
a IDENTIFIER r 1 assignment_operator >>=
a NUMBER_CONST r 1 assignment_operator >>=
a OCTAL_CONST r 1 assignment_operator >>=
a STRING_CONST r 1 assignment_operator >>=
a function_call r 1 assignment_operator >>=
a ~ r 1 assignment_operator >>=
s
a ! r 1 assignment_operator ^=
a & r 1 assignment_operator ^=
a ( r 1 assignment_operator ^=
a * r 1 assignment_operator ^=
a ++ r 1 assignment_operator ^=
a - r 1 assignment_operator ^=
a -- r 1 assignment_operator ^=
a BINARY_CONST r 1 assignment_operator ^=
a CHAR_CONST r 1 assignment_operator ^=
a HEX_CONST r 1 assignment_operator ^=
a IDENTIFIER r 1 assignment_operator ^=
a NUMBER_CONST r 1 assignment_operator ^=
a OCTAL_CONST r 1 assignment_operator ^=
a STRING_CONST r 1 assignment_operator ^=
a function_call r 1 assignment_operator ^=
a ~ r 1 assignment_operator ^=
s
a ! r 1 assignment_operator -=
a & r 1 assignment_operator -=
a ( r 1 assignment_operator -=
a * r 1 assignment_operator -=
a ++ r 1 assignment_operator -=
a - r 1 assignment_operator -=
a -- r 1 assignment_operator -=
a BINARY_CONST r 1 assignment_operator -=
a CHAR_CONST r 1 assignment_operator -=
a HEX_CONST r 1 assignment_operator -=
a IDENTIFIER r 1 assignment_operator -=
a NUMBER_CONST r 1 assignment_operator -=
a OCTAL_CONST r 1 assignment_operator -=
a STRING_CONST r 1 assignment_operator -=
a function_call r 1 assignment_operator -=
a ~ r 1 assignment_operator -=
s
a ! r 1 assignment_operator %=
a & r 1 assignment_operator %=
a ( r 1 assignment_operator %=
a * r 1 assignment_operator %=
a ++ r 1 assignment_operator %=
a - r 1 assignment_operator %=
a -- r 1 assignment_operator %=
a BINARY_CONST r 1 assignment_operator %=
a CHAR_CONST r 1 assignment_operator %=
a HEX_CONST r 1 assignment_operator %=
a IDENTIFIER r 1 assignment_operator %=
a NUMBER_CONST r 1 assignment_operator %=
a OCTAL_CONST r 1 assignment_operator %=
a STRING_CONST r 1 assignment_operator %=
a function_call r 1 assignment_operator %=
a ~ r 1 assignment_operator %=
s
a ! r 1 assignment_operator <<=
a & r 1 assignment_operator <<=
a ( r 1 assignment_operator <<=
a * r 1 assignment_operator <<=
a ++ r 1 assignment_operator <<=
a - r 1 assignment_operator <<=
a -- r 1 assignment_operator <<=
a BINARY_CONST r 1 assignment_operator <<=
a CHAR_CONST r 1 assignment_operator <<=
a HEX_CONST r 1 assignment_operator <<=
a IDENTIFIER r 1 assignment_operator <<=
a NUMBER_CONST r 1 assignment_operator <<=
a OCTAL_CONST r 1 assignment_operator <<=
a STRING_CONST r 1 assignment_operator <<=
a function_call r 1 assignment_operator <<=
a ~ r 1 assignment_operator <<=
s
a ! r 1 assignment_operator &=
a & r 1 assignment_operator &=
a ( r 1 assignment_operator &=
a * r 1 assignment_operator &=
a ++ r 1 assignment_operator &=
a - r 1 assignment_operator &=
a -- r 1 assignment_operator &=
a BINARY_CONST r 1 assignment_operator &=
a CHAR_CONST r 1 assignment_operator &=
a HEX_CONST r 1 assignment_operator &=
a IDENTIFIER r 1 assignment_operator &=
a NUMBER_CONST r 1 assignment_operator &=
a OCTAL_CONST r 1 assignment_operator &=
a STRING_CONST r 1 assignment_operator &=
a function_call r 1 assignment_operator &=
a ~ r 1 assignment_operator &=
s
a ! r 1 assignment_operator /=
a & r 1 assignment_operator /=
a ( r 1 assignment_operator /=
a * r 1 assignment_operator /=
a ++ r 1 assignment_operator /=
a - r 1 assignment_operator /=
a -- r 1 assignment_operator /=
a BINARY_CONST r 1 assignment_operator /=
a CHAR_CONST r 1 assignment_operator /=
a HEX_CONST r 1 assignment_operator /=
a IDENTIFIER r 1 assignment_operator /=
a NUMBER_CONST r 1 assignment_operator /=
a OCTAL_CONST r 1 assignment_operator /=
a STRING_CONST r 1 assignment_operator /=
a function_call r 1 assignment_operator /=
a ~ r 1 assignment_operator /=
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a ) r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ) r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 345
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 346
a -= r 1 unary_expression postfix_expression
a -> s 347
a . s 343
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 344
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a ) r 1 conditional_expression logical_or_expression
a , r 1 conditional_expression logical_or_expression
a ? s 337
a || s 338
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a ) r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 191
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 191
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a && r 1 logical_and_expression binary_or_expression
a ) r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 335
a || r 1 logical_and_expression binary_or_expression
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a ) r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a ) r 1 assignment_expression conditional_expression
a , r 1 assignment_expression conditional_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a ) r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 373
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 374
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a ) s 362
a , s 363
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a ) r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a ) r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a < s 339
a <= s 341
a == r 1 equality_expression relational_expression
a > s 340
a >= s 342
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a ) r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 74
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 76
a ) r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a *= s 69
a + r 1 multiplicative_expression unary_expression
a += s 70
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 73
a / r 1 multiplicative_expression unary_expression
a /= s 77
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 75
a <= r 1 multiplicative_expression unary_expression
a = s 67
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 71
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 72
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 190
a | r 1 multiplicative_expression unary_expression
a |= s 68
a || r 1 multiplicative_expression unary_expression
g assignment_operator 190
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a ) r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a ) r 1 shift_expression additive_expression
a + s 358
a , r 1 shift_expression additive_expression
a - s 359
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 348
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a ) r 1 additive_expression multiplicative_expression
a * s 349
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 350
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a function_call s 78
a postfix_expression s 311
a primary_expression s 81
a unary_expression s 312
a unary_operator s 313
a ~ s 32
g postfix_expression 311
g primary_expression 81
g unary_expression 312
g unary_operator 313
s
a != s 369
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a ) r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a == s 370
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a ) r 1 logical_or_expression logical_xor_expression
a , r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 371
a || r 1 logical_or_expression logical_xor_expression
s
a && r 1 binary_or_expression binary_xor_expression
a ) r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 354
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a ) r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a ) r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a ) r 1 expression assignment_expression
a , r 1 expression assignment_expression
s
a && s 355
a ) r 1 logical_xor_expression logical_and_expression
a , r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a ) r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a & s 361
a && r 1 binary_xor_expression binary_and_expression
a ) r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a & s 166
a * s 167
a < s 168
a FUNC s 352
a VAR s 351
s
a ; s 372
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 226
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 226
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ( s 356
s
a ! r 1 statement else_statement
a & r 1 statement else_statement
a ( r 1 statement else_statement
a * r 1 statement else_statement
a ++ r 1 statement else_statement
a - r 1 statement else_statement
a -- r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a BREAK r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a DO r 1 statement else_statement
a ELSE r 1 statement else_statement
a GOTO r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a IF r 1 statement else_statement
a INPUT r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a RETURN r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a SWITCH r 1 statement else_statement
a TEST r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a function_call r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a ~ r 1 statement else_statement
s
a ! r 1 statement if_statement
a & r 1 statement if_statement
a ( r 1 statement if_statement
a * r 1 statement if_statement
a ++ r 1 statement if_statement
a - r 1 statement if_statement
a -- r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a BREAK r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a DO r 1 statement if_statement
a ELSE r 1 statement if_statement
a GOTO r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a IF r 1 statement if_statement
a INPUT r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a RETURN r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a SWITCH r 1 statement if_statement
a TEST r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a function_call r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a ~ r 1 statement if_statement
s
a IDENTIFIER s 336
s
a ! r 1 statement switch_statement
a & r 1 statement switch_statement
a ( r 1 statement switch_statement
a * r 1 statement switch_statement
a ++ r 1 statement switch_statement
a - r 1 statement switch_statement
a -- r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a DO r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a GOTO r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a IF r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a TEST r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a function_call r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a ~ r 1 statement switch_statement
s
a ! r 1 statement block_statements
a & r 1 statement block_statements
a ( r 1 statement block_statements
a * r 1 statement block_statements
a ++ r 1 statement block_statements
a - r 1 statement block_statements
a -- r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a BREAK r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a DO r 1 statement block_statements
a ELSE r 1 statement block_statements
a GOTO r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a IF r 1 statement block_statements
a INPUT r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a RETURN r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a SWITCH r 1 statement block_statements
a TEST r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a function_call r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a ~ r 1 statement block_statements
s
a ! r 1 statement input_statement
a & r 1 statement input_statement
a ( r 1 statement input_statement
a * r 1 statement input_statement
a ++ r 1 statement input_statement
a - r 1 statement input_statement
a -- r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a BREAK r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a DO r 1 statement input_statement
a ELSE r 1 statement input_statement
a GOTO r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a IF r 1 statement input_statement
a INPUT r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a RETURN r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a SWITCH r 1 statement input_statement
a TEST r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a function_call r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a ~ r 1 statement input_statement
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 225
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a } r 1 statements statement_list
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 225
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ! r 1 statement do_while_loop
a & r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a * r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a - r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
s
a , s 179
a ; s 364
s
a ; s 357
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 132
a statement_list s 115
a statements s 223
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a } r 0 statements 
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 132
g statement_list 115
g statements 223
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 230
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 230
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a block_statements s 334
a { s 148
g block_statements 334
s
a ! r 1 statement output_statement
a & r 1 statement output_statement
a ( r 1 statement output_statement
a * r 1 statement output_statement
a ++ r 1 statement output_statement
a - r 1 statement output_statement
a -- r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a BREAK r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a DO r 1 statement output_statement
a ELSE r 1 statement output_statement
a GOTO r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a IF r 1 statement output_statement
a INPUT r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a RETURN r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a SWITCH r 1 statement output_statement
a TEST r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a function_call r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a ~ r 1 statement output_statement
s
a ! r 1 statement test_statement
a & r 1 statement test_statement
a ( r 1 statement test_statement
a * r 1 statement test_statement
a ++ r 1 statement test_statement
a - r 1 statement test_statement
a -- r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a BREAK r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a DO r 1 statement test_statement
a ELSE r 1 statement test_statement
a GOTO r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a IF r 1 statement test_statement
a INPUT r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a RETURN r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a SWITCH r 1 statement test_statement
a TEST r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a function_call r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a ~ r 1 statement test_statement
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 229
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 229
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ( s 360
s
a ( s 368
s
a ! r 1 statement while_loop
a & r 1 statement while_loop
a ( r 1 statement while_loop
a * r 1 statement while_loop
a ++ r 1 statement while_loop
a - r 1 statement while_loop
a -- r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a BREAK r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a DO r 1 statement while_loop
a ELSE r 1 statement while_loop
a GOTO r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a IF r 1 statement while_loop
a INPUT r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a RETURN r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a SWITCH r 1 statement while_loop
a TEST r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a function_call r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a ~ r 1 statement while_loop
s
a ( s 353
s
a } s 381
s
a ! r 1 statement function_decl
a & r 1 statement function_decl
a ( r 1 statement function_decl
a * r 1 statement function_decl
a ++ r 1 statement function_decl
a - r 1 statement function_decl
a -- r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a BREAK r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a DO r 1 statement function_decl
a ELSE r 1 statement function_decl
a GOTO r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a IF r 1 statement function_decl
a INPUT r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a RETURN r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a SWITCH r 1 statement function_decl
a TEST r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a function_call r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a ~ r 1 statement function_decl
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a ; s 227
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 228
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 228
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! r 1 statement_list statement
a & r 1 statement_list statement
a ( r 1 statement_list statement
a * r 1 statement_list statement
a ++ r 1 statement_list statement
a - r 1 statement_list statement
a -- r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a BREAK r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a DO r 1 statement_list statement
a ELSE r 1 statement_list statement
a GOTO r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a IF r 1 statement_list statement
a INPUT r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a RETURN r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a SWITCH r 1 statement_list statement
a TEST r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a function_call r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a ~ r 1 statement_list statement
s
a ! r 1 statement for_loop
a & r 1 statement for_loop
a ( r 1 statement for_loop
a * r 1 statement for_loop
a ++ r 1 statement for_loop
a - r 1 statement for_loop
a -- r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a BREAK r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a DO r 1 statement for_loop
a ELSE r 1 statement for_loop
a GOTO r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a IF r 1 statement for_loop
a INPUT r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a RETURN r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a SWITCH r 1 statement for_loop
a TEST r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a function_call r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a ~ r 1 statement for_loop
s
a ! r 1 statement variable_decls
a & r 1 statement variable_decls
a ( r 1 statement variable_decls
a * r 1 statement variable_decls
a ++ r 1 statement variable_decls
a - r 1 statement variable_decls
a -- r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a DO r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a GOTO r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a IF r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a TEST r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a function_call r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a ~ r 1 statement variable_decls
s
a ( s 375
s
a ! r 1 statement jump_statement
a & r 1 statement jump_statement
a ( r 1 statement jump_statement
a * r 1 statement jump_statement
a ++ r 1 statement jump_statement
a - r 1 statement jump_statement
a -- r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a DO r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a GOTO r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a IF r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a TEST r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a function_call r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a ~ r 1 statement jump_statement
s
a ! r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a __END__ r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
s
a ! r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a __END__ r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
s
a ! r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a __END__ r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
s
a , s 179
a ; s 365
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a ; r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a , s 179
a ; s 366
s
a , s 179
a ; s 367
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 159
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 160
a -= r 1 unary_expression postfix_expression
a -> s 161
a . s 157
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a ; r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 158
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a ; r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a function_call s 1
a postfix_expression s 144
a primary_expression s 8
a unary_expression s 314
a unary_operator s 146
a ~ s 32
g postfix_expression 144
g primary_expression 8
g unary_expression 314
g unary_operator 146
s
a WHILE s 378
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 132
a statement_list s 115
a statements s 224
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a } r 0 statements 
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 132
g statement_list 115
g statements 224
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a binary_and_expression s 64
a binary_xor_expression s 306
a equality_expression s 47
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 31
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g binary_and_expression 64
g binary_xor_expression 306
g equality_expression 47
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 31
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a ; s 376
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 219
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a expression s 205
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 219
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g expression 205
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a equality_expression s 47
a function_call s 233
a logical_and_expression s 61
a logical_xor_expression s 243
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 31
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g equality_expression 47
g logical_and_expression 61
g logical_xor_expression 243
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 31
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a shift_expression s 317
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g shift_expression 317
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a shift_expression s 316
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g shift_expression 316
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a shift_expression s 318
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g shift_expression 318
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a shift_expression s 315
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g shift_expression 315
g unary_expression 240
g unary_operator 242
s
a IDENTIFIER s 379
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 287
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 287
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a ; r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a ; r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 380
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a function_call s 233
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 323
a unary_operator s 242
a ~ s 32
g postfix_expression 234
g primary_expression 235
g unary_expression 323
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a function_call s 233
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 325
a unary_operator s 242
a ~ s 32
g postfix_expression 234
g primary_expression 235
g unary_expression 325
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a function_call s 233
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 324
a unary_operator s 242
a ~ s 32
g postfix_expression 234
g primary_expression 235
g unary_expression 324
g unary_operator 242
s
a IDENTIFIER s 333
a variable_inits s 332
a variable_name_and_assign s 331
g variable_inits 332
g variable_name_and_assign 331
s
a & r 2 type type &
a * r 2 type type &
a < r 2 type type &
a FUNC r 2 type type &
a VAR r 2 type type &
s
a & r 2 type type *
a * r 2 type type *
a < r 2 type type *
a FUNC r 2 type type *
a VAR r 2 type type *
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 272
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a additive_expression s 266
a assignment_expression s 274
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a conditional_expression s 256
a equality_expression s 269
a expression s 259
a function_call s 248
a logical_and_expression s 275
a logical_or_expression s 251
a logical_xor_expression s 270
a multiplicative_expression s 267
a postfix_expression s 249
a primary_expression s 252
a relational_expression s 261
a shift_expression s 258
a template_param s 264
a template_params s 257
a type s 250
a unary_expression s 263
a unary_operator s 268
a ~ s 32
g additive_expression 266
g assignment_expression 274
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g conditional_expression 256
g equality_expression 269
g expression 259
g logical_and_expression 275
g logical_or_expression 251
g logical_xor_expression 270
g multiplicative_expression 267
g postfix_expression 249
g primary_expression 252
g relational_expression 261
g shift_expression 258
g template_param 264
g template_params 257
g type 250
g unary_expression 263
g unary_operator 268
s
a IDENTIFIER s 377
s
a IDENTIFIER s 329
a type s 328
a variable_decls s 330
g type 328
g variable_decls 330
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a binary_and_expression s 307
a equality_expression s 47
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 31
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g binary_and_expression 307
g equality_expression 47
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 31
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a binary_and_expression s 64
a binary_or_expression s 305
a binary_xor_expression s 52
a equality_expression s 47
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 31
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g binary_and_expression 64
g binary_or_expression 305
g binary_xor_expression 52
g equality_expression 47
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 31
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 192
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 192
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a __END__ r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a function_call s 233
a multiplicative_expression s 321
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g multiplicative_expression 321
g postfix_expression 234
g primary_expression 235
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a function_call s 233
a multiplicative_expression s 322
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g multiplicative_expression 322
g postfix_expression 234
g primary_expression 235
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 193
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 193
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a equality_expression s 308
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 31
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g equality_expression 308
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 31
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 231
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 231
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! r 2 statement expression ;
a & r 2 statement expression ;
a ( r 2 statement expression ;
a * r 2 statement expression ;
a ++ r 2 statement expression ;
a - r 2 statement expression ;
a -- r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a BREAK r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a DO r 2 statement expression ;
a ELSE r 2 statement expression ;
a GOTO r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a IF r 2 statement expression ;
a INPUT r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a RETURN r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a SWITCH r 2 statement expression ;
a TEST r 2 statement expression ;
a WHILE r 2 statement expression ;
a __END__ r 2 statement expression ;
a for r 2 statement expression ;
a function_call r 2 statement expression ;
a { r 2 statement expression ;
a ~ r 2 statement expression ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 194
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 194
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 309
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 309
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 310
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 310
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a IDENTIFIER s 327
a type s 326
g type 326
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 40
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a equality_expression s 47
a function_call s 233
a logical_and_expression s 247
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a relational_expression s 31
a shift_expression s 21
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 40
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g equality_expression 47
g logical_and_expression 247
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g relational_expression 31
g shift_expression 21
g unary_expression 240
g unary_operator 242
s
a ! r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a __END__ r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 320
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 320
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a additive_expression s 319
a function_call s 233
a multiplicative_expression s 41
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 240
a unary_operator s 242
a ~ s 32
g additive_expression 319
g multiplicative_expression 41
g postfix_expression 234
g primary_expression 235
g unary_expression 240
g unary_operator 242
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 195
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 195
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 394
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 394
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ) s 516
a , s 363
s
a ) s 517
a , s 363
s
a ) s 518
a , s 363
s
a ) s 519
a , s 363
s
a ) s 520
a , s 363
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 466
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 467
a -= r 1 unary_expression postfix_expression
a -> s 468
a . s 464
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 465
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a , r 1 conditional_expression logical_or_expression
a : r 1 conditional_expression logical_or_expression
a ? s 446
a || s 447
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 385
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 385
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a : r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 443
a || r 1 logical_and_expression binary_or_expression
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a , r 1 assignment_expression conditional_expression
a : r 1 assignment_expression conditional_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a : r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 539
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 540
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a , s 521
a : s 522
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a : r 1 equality_expression relational_expression
a < s 452
a <= s 454
a == r 1 equality_expression relational_expression
a > s 453
a >= s 455
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 74
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 76
a * r 1 multiplicative_expression unary_expression
a *= s 69
a + r 1 multiplicative_expression unary_expression
a += s 70
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 73
a / r 1 multiplicative_expression unary_expression
a /= s 77
a : r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 75
a <= r 1 multiplicative_expression unary_expression
a = s 67
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 71
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 72
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 382
a | r 1 multiplicative_expression unary_expression
a |= s 68
a || r 1 multiplicative_expression unary_expression
g assignment_operator 382
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 507
a , r 1 shift_expression additive_expression
a - s 508
a : r 1 shift_expression additive_expression
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 484
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 485
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 486
a : r 1 additive_expression multiplicative_expression
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a function_call s 196
a postfix_expression s 419
a primary_expression s 199
a unary_expression s 420
a unary_operator s 421
a ~ s 32
g postfix_expression 419
g primary_expression 199
g unary_expression 420
g unary_operator 421
s
a != s 528
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a : r 1 binary_and_expression equality_expression
a == s 529
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a , r 1 logical_or_expression logical_xor_expression
a : r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 536
a || r 1 logical_or_expression logical_xor_expression
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a : r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 493
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a , r 1 expression assignment_expression
a : r 1 expression assignment_expression
s
a && s 496
a , r 1 logical_xor_expression logical_and_expression
a : r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a & s 513
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a : r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a } s 555
s
a } s 556
s
a ! r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
s
a ! r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
s
a ! r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
s
a , s 179
a ; s 523
s
a , s 179
a ; s 524
s
a , s 179
a ; s 525
s
a , r 3 expression expression , assignment_expression
a ; r 3 expression expression , assignment_expression
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a ; r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a ; r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 481
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 482
a -> s 483
a . s 479
a / r 1 unary_expression postfix_expression
a ; r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 480
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a ; r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 388
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 388
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a ; r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a ; r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a ; r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a ; r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a ; r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a ! s 9
a & s 10
a ( s 236
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 238
a CHAR_CONST s 237
a HEX_CONST s 246
a IDENTIFIER s 244
a NUMBER_CONST s 245
a OCTAL_CONST s 241
a STRING_CONST s 239
a function_call s 233
a postfix_expression s 234
a primary_expression s 235
a unary_expression s 440
a unary_operator s 242
a ~ s 32
g postfix_expression 234
g primary_expression 235
g unary_expression 440
g unary_operator 242
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ; r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 185
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a ; r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a ; r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a ; r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a && s 172
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ; r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 476
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 477
a -= r 1 unary_expression postfix_expression
a -> s 478
a . s 474
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 475
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a & s 499
a * s 500
a , r 1 template_param type
a < s 501
a > r 1 template_param type
s
a , r 1 conditional_expression logical_or_expression
a > r 1 conditional_expression logical_or_expression
a ? s 448
a || s 449
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 387
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 387
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a > r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 444
a || r 1 logical_and_expression binary_or_expression
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a , r 1 assignment_expression conditional_expression
a > r 1 assignment_expression conditional_expression
s
a , s 545
a > s 546
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 543
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 544
a ? r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a , s 506
a > r 1 template_param expression
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a < s 460
a <= s 462
a == r 1 equality_expression relational_expression
a > r 1 equality_expression relational_expression
a >= s 463
a ? r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 74
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 76
a * r 1 multiplicative_expression unary_expression
a *= s 69
a + r 1 multiplicative_expression unary_expression
a += s 70
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 73
a / r 1 multiplicative_expression unary_expression
a /= s 77
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 75
a <= r 1 multiplicative_expression unary_expression
a = s 67
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 71
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 72
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 383
a | r 1 multiplicative_expression unary_expression
a |= s 68
a || r 1 multiplicative_expression unary_expression
g assignment_operator 383
s
a , r 1 template_params template_param
a > r 1 template_params template_param
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 511
a , r 1 shift_expression additive_expression
a - s 512
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 490
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 491
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 492
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 428
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a function_call s 248
a postfix_expression s 425
a primary_expression s 252
a unary_expression s 426
a unary_operator s 427
a ~ s 32
g postfix_expression 425
g primary_expression 252
g unary_expression 426
g unary_operator 427
s
a != s 530
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a == s 531
a > r 1 binary_and_expression equality_expression
a ? r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a , r 1 logical_or_expression logical_xor_expression
a > r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ^^ s 537
a || r 1 logical_or_expression logical_xor_expression
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a > r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ^ s 494
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a :: s 534
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a , r 1 expression assignment_expression
a > r 1 expression assignment_expression
s
a && s 497
a , r 1 logical_xor_expression logical_and_expression
a > r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a & s 514
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a > r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a %= r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a &= r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a *= r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a += r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -= r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a /= r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <<= r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a = r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a >>= r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^= r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a |= r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 471
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 472
a -= r 1 unary_expression postfix_expression
a -> s 473
a . s 469
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 470
a ] r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a , r 1 conditional_expression logical_or_expression
a ? s 450
a ] r 1 conditional_expression logical_or_expression
a || s 451
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a %= r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a &= r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a *= r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a += r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -= r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a /= r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <<= r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a = r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a >>= r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^= r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a |= r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 386
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 386
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a && r 1 logical_and_expression binary_or_expression
a , r 1 logical_and_expression binary_or_expression
a ? r 1 logical_and_expression binary_or_expression
a ] r 1 logical_and_expression binary_or_expression
a ^^ r 1 logical_and_expression binary_or_expression
a | s 445
a || r 1 logical_and_expression binary_or_expression
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a %= r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a &= r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a *= r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a += r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -= r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a /= r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <<= r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a = r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a >>= r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^= r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a |= r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a , r 1 assignment_expression conditional_expression
a ] r 1 assignment_expression conditional_expression
s
a != r 1 relational_expression shift_expression
a & r 1 relational_expression shift_expression
a && r 1 relational_expression shift_expression
a , r 1 relational_expression shift_expression
a < r 1 relational_expression shift_expression
a << s 541
a <= r 1 relational_expression shift_expression
a == r 1 relational_expression shift_expression
a > r 1 relational_expression shift_expression
a >= r 1 relational_expression shift_expression
a >> s 542
a ? r 1 relational_expression shift_expression
a ] r 1 relational_expression shift_expression
a ^ r 1 relational_expression shift_expression
a ^^ r 1 relational_expression shift_expression
a | r 1 relational_expression shift_expression
a || r 1 relational_expression shift_expression
s
a , s 526
a ] s 527
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a %= r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a &= r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a *= r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a += r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -= r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a /= r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <<= r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a = r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a >>= r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^= r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a |= r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 equality_expression relational_expression
a & r 1 equality_expression relational_expression
a && r 1 equality_expression relational_expression
a , r 1 equality_expression relational_expression
a < s 456
a <= s 458
a == r 1 equality_expression relational_expression
a > s 457
a >= s 459
a ? r 1 equality_expression relational_expression
a ] r 1 equality_expression relational_expression
a ^ r 1 equality_expression relational_expression
a ^^ r 1 equality_expression relational_expression
a | r 1 equality_expression relational_expression
a || r 1 equality_expression relational_expression
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a %= r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a &= r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a *= r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a += r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -= r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a /= r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <<= r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a = r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a >>= r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^= r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a |= r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a %= s 74
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a &= s 76
a * r 1 multiplicative_expression unary_expression
a *= s 69
a + r 1 multiplicative_expression unary_expression
a += s 70
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a -= s 73
a / r 1 multiplicative_expression unary_expression
a /= s 77
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <<= s 75
a <= r 1 multiplicative_expression unary_expression
a = s 67
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a >>= s 71
a ? r 1 multiplicative_expression unary_expression
a ] r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^= s 72
a ^^ r 1 multiplicative_expression unary_expression
a assignment_operator s 384
a | r 1 multiplicative_expression unary_expression
a |= s 68
a || r 1 multiplicative_expression unary_expression
g assignment_operator 384
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a %= r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a &= r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a *= r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a += r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -= r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a /= r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <<= r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a = r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a >>= r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^= r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a |= r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a != r 1 shift_expression additive_expression
a & r 1 shift_expression additive_expression
a && r 1 shift_expression additive_expression
a + s 509
a , r 1 shift_expression additive_expression
a - s 510
a < r 1 shift_expression additive_expression
a << r 1 shift_expression additive_expression
a <= r 1 shift_expression additive_expression
a == r 1 shift_expression additive_expression
a > r 1 shift_expression additive_expression
a >= r 1 shift_expression additive_expression
a >> r 1 shift_expression additive_expression
a ? r 1 shift_expression additive_expression
a ] r 1 shift_expression additive_expression
a ^ r 1 shift_expression additive_expression
a ^^ r 1 shift_expression additive_expression
a | r 1 shift_expression additive_expression
a || r 1 shift_expression additive_expression
s
a != r 1 additive_expression multiplicative_expression
a % s 487
a & r 1 additive_expression multiplicative_expression
a && r 1 additive_expression multiplicative_expression
a * s 488
a + r 1 additive_expression multiplicative_expression
a , r 1 additive_expression multiplicative_expression
a - r 1 additive_expression multiplicative_expression
a / s 489
a < r 1 additive_expression multiplicative_expression
a << r 1 additive_expression multiplicative_expression
a <= r 1 additive_expression multiplicative_expression
a == r 1 additive_expression multiplicative_expression
a > r 1 additive_expression multiplicative_expression
a >= r 1 additive_expression multiplicative_expression
a >> r 1 additive_expression multiplicative_expression
a ? r 1 additive_expression multiplicative_expression
a ] r 1 additive_expression multiplicative_expression
a ^ r 1 additive_expression multiplicative_expression
a ^^ r 1 additive_expression multiplicative_expression
a | r 1 additive_expression multiplicative_expression
a || r 1 additive_expression multiplicative_expression
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a function_call s 278
a postfix_expression s 422
a primary_expression s 281
a unary_expression s 423
a unary_operator s 424
a ~ s 32
g postfix_expression 422
g primary_expression 281
g unary_expression 423
g unary_operator 424
s
a != s 532
a & r 1 binary_and_expression equality_expression
a && r 1 binary_and_expression equality_expression
a , r 1 binary_and_expression equality_expression
a == s 533
a ? r 1 binary_and_expression equality_expression
a ] r 1 binary_and_expression equality_expression
a ^ r 1 binary_and_expression equality_expression
a ^^ r 1 binary_and_expression equality_expression
a | r 1 binary_and_expression equality_expression
a || r 1 binary_and_expression equality_expression
s
a , r 1 logical_or_expression logical_xor_expression
a ? r 1 logical_or_expression logical_xor_expression
a ] r 1 logical_or_expression logical_xor_expression
a ^^ s 538
a || r 1 logical_or_expression logical_xor_expression
s
a && r 1 binary_or_expression binary_xor_expression
a , r 1 binary_or_expression binary_xor_expression
a ? r 1 binary_or_expression binary_xor_expression
a ] r 1 binary_or_expression binary_xor_expression
a ^ s 495
a ^^ r 1 binary_or_expression binary_xor_expression
a | r 1 binary_or_expression binary_xor_expression
a || r 1 binary_or_expression binary_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a %= r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a &= r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a *= r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a += r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -= r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a /= r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <<= r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a = r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a >>= r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^= r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a |= r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a , r 1 expression assignment_expression
a ] r 1 expression assignment_expression
s
a && s 498
a , r 1 logical_xor_expression logical_and_expression
a ? r 1 logical_xor_expression logical_and_expression
a ] r 1 logical_xor_expression logical_and_expression
a ^^ r 1 logical_xor_expression logical_and_expression
a || r 1 logical_xor_expression logical_and_expression
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a %= r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a &= r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a *= r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a += r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -= r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a /= r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <<= r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a = r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a >>= r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^= r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a |= r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a & s 515
a && r 1 binary_xor_expression binary_and_expression
a , r 1 binary_xor_expression binary_and_expression
a ? r 1 binary_xor_expression binary_and_expression
a ] r 1 binary_xor_expression binary_and_expression
a ^ r 1 binary_xor_expression binary_and_expression
a ^^ r 1 binary_xor_expression binary_and_expression
a | r 1 binary_xor_expression binary_and_expression
a || r 1 binary_xor_expression binary_and_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a ; r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 149
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ; r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 171
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 178
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ; r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 182
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a ; r 3 binary_and_expression binary_and_expression & equality_expression
a == s 183
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a ; r 3 equality_expression equality_expression != relational_expression
a < s 153
a <= s 155
a == r 3 equality_expression equality_expression != relational_expression
a > s 154
a >= s 156
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a ; r 3 equality_expression equality_expression == relational_expression
a < s 153
a <= s 155
a == r 3 equality_expression equality_expression == relational_expression
a > s 154
a >= s 156
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a ) r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 345
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 346
a -= r 1 unary_expression postfix_expression
a -> s 347
a . s 343
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 344
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ) r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a function_call s 78
a postfix_expression s 311
a primary_expression s 81
a unary_expression s 418
a unary_operator s 313
a ~ s 32
g postfix_expression 311
g primary_expression 81
g unary_expression 418
g unary_operator 313
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a ; r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a ; r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 187
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 188
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a ; r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 187
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 188
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a ; r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 187
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 188
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a ; r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 187
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 188
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 175
a , r 3 shift_expression shift_expression >> additive_expression
a - s 176
a ; r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 175
a , r 3 shift_expression shift_expression << additive_expression
a - s 176
a ; r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 162
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 163
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 164
a ; r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 162
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 163
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 164
a ; r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a ; r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a ; r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a ; r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a & r 3 type IDENTIFIER :: type
a * r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a FUNC r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
s
a & r 1 type IDENTIFIER
a * r 1 type IDENTIFIER
a :: s 184
a < r 1 type IDENTIFIER
a FUNC r 1 type IDENTIFIER
a VAR r 1 type IDENTIFIER
s
a & s 503
a * s 504
a < s 505
a VAR s 502
s
a & r 1 type IDENTIFIER
a * r 1 type IDENTIFIER
a :: s 535
a < r 1 type IDENTIFIER
a VAR r 1 type IDENTIFIER
s
a ; s 558
s
a , r 1 variable_inits variable_name_and_assign
a ; r 1 variable_inits variable_name_and_assign
s
a , s 547
a ; s 548
s
a , r 1 variable_name_and_assign IDENTIFIER
a ; r 1 variable_name_and_assign IDENTIFIER
a = s 549
s
a WHILE s 552
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a binary_and_expression s 104
a binary_xor_expression s 413
a equality_expression s 96
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 89
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g binary_and_expression 104
g binary_xor_expression 413
g equality_expression 96
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 89
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a ; s 550
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 219
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a expression s 410
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 219
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g expression 410
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a equality_expression s 96
a function_call s 395
a logical_and_expression s 102
a logical_xor_expression s 405
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 89
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g equality_expression 96
g logical_and_expression 102
g logical_xor_expression 405
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 89
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a shift_expression s 431
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g shift_expression 431
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a shift_expression s 430
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g shift_expression 430
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a shift_expression s 432
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g shift_expression 432
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a shift_expression s 429
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g shift_expression 429
g unary_expression 402
g unary_operator 404
s
a IDENTIFIER s 553
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 411
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 411
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a ) r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a ) r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 554
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a function_call s 395
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 437
a unary_operator s 404
a ~ s 32
g postfix_expression 396
g primary_expression 397
g unary_expression 437
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a function_call s 395
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 439
a unary_operator s 404
a ~ s 32
g postfix_expression 396
g primary_expression 397
g unary_expression 439
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a function_call s 395
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 438
a unary_operator s 404
a ~ s 32
g postfix_expression 396
g primary_expression 397
g unary_expression 438
g unary_operator 404
s
a IDENTIFIER s 333
a variable_inits s 442
a variable_name_and_assign s 331
g variable_inits 442
g variable_name_and_assign 331
s
a IDENTIFIER s 551
s
a IDENTIFIER s 329
a type s 328
a variable_decls s 441
g type 328
g variable_decls 441
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a binary_and_expression s 414
a equality_expression s 96
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 89
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g binary_and_expression 414
g equality_expression 96
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 89
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a binary_and_expression s 104
a binary_or_expression s 412
a binary_xor_expression s 98
a equality_expression s 96
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 89
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g binary_and_expression 104
g binary_or_expression 412
g binary_xor_expression 98
g equality_expression 96
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 89
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 389
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 389
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a function_call s 395
a multiplicative_expression s 435
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g multiplicative_expression 435
g postfix_expression 396
g primary_expression 397
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a function_call s 395
a multiplicative_expression s 436
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g multiplicative_expression 436
g postfix_expression 396
g primary_expression 397
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 390
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 390
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a equality_expression s 415
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 89
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g equality_expression 415
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 89
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a ; r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 393
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 393
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! r 2 statement expression ;
a & r 2 statement expression ;
a ( r 2 statement expression ;
a * r 2 statement expression ;
a ++ r 2 statement expression ;
a - r 2 statement expression ;
a -- r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a BREAK r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a DO r 2 statement expression ;
a ELSE r 2 statement expression ;
a GOTO r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a IF r 2 statement expression ;
a INPUT r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a RETURN r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a SWITCH r 2 statement expression ;
a TEST r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a function_call r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a ~ r 2 statement expression ;
s
a ! r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a __END__ r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
s
a ! r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a __END__ r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
s
a ! r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a __END__ r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 391
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 391
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 416
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 416
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 417
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 417
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 93
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a equality_expression s 96
a function_call s 395
a logical_and_expression s 409
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a relational_expression s 89
a shift_expression s 86
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 93
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g equality_expression 96
g logical_and_expression 409
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g relational_expression 89
g shift_expression 86
g unary_expression 402
g unary_operator 404
s
a ! r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 434
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 434
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a additive_expression s 433
a function_call s 395
a multiplicative_expression s 94
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 402
a unary_operator s 404
a ~ s 32
g additive_expression 433
g multiplicative_expression 94
g postfix_expression 396
g primary_expression 397
g unary_expression 402
g unary_operator 404
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 392
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 392
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a __END__ r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 557
s
a ( s 559
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ! r 3 block_statements { statements }
a & r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a * r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a - r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a __END__ r 3 block_statements { statements }
a for r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a { r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 566
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 566
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 428
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a additive_expression s 266
a assignment_expression s 591
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a conditional_expression s 256
a equality_expression s 269
a function_call s 248
a logical_and_expression s 275
a logical_or_expression s 251
a logical_xor_expression s 270
a multiplicative_expression s 267
a postfix_expression s 249
a primary_expression s 252
a relational_expression s 261
a shift_expression s 258
a unary_expression s 263
a unary_operator s 268
a ~ s 32
g additive_expression 266
g assignment_expression 591
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g conditional_expression 256
g equality_expression 269
g logical_and_expression 275
g logical_or_expression 251
g logical_xor_expression 270
g multiplicative_expression 267
g postfix_expression 249
g primary_expression 252
g relational_expression 261
g shift_expression 258
g unary_expression 263
g unary_operator 268
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 612
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 612
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a ) s 696
a , s 363
s
a ) s 697
a , s 363
s
a ) s 698
a , s 363
s
a ) s 699
a , s 363
s
a ) s 700
a , s 363
s
a ) s 701
a , s 363
s
a ) s 702
a , s 363
s
a ) s 703
a , s 363
s
a ) r 3 expression expression , assignment_expression
a , r 3 expression expression , assignment_expression
s
a ) r 3 assignment_expression unary_expression assignment_operator assignment_expression
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a ) r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a ) r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 693
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 694
a -> s 695
a . s 691
a / r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 692
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a ) r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 560
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 560
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a ) r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a ) r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a ) r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a ) r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a ) r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a ! s 9
a & s 10
a ( s 398
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 400
a CHAR_CONST s 399
a HEX_CONST s 408
a IDENTIFIER s 406
a NUMBER_CONST s 407
a OCTAL_CONST s 403
a STRING_CONST s 401
a function_call s 395
a postfix_expression s 396
a primary_expression s 397
a unary_expression s 649
a unary_operator s 404
a ~ s 32
g postfix_expression 396
g primary_expression 397
g unary_expression 649
g unary_operator 404
s
a ) r 3 logical_or_expression logical_or_expression || logical_xor_expression
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 371
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a ) r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a ) r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a ) r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a && s 355
a ) r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a , s 521
a : s 704
s
a , s 526
a ] s 705
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a ) r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 335
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ) r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 354
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 361
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ) r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 369
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a ) r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a == s 370
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a ) r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a < s 339
a <= s 341
a == r 3 equality_expression equality_expression != relational_expression
a > s 340
a >= s 342
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a ) r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a < s 339
a <= s 341
a == r 3 equality_expression equality_expression == relational_expression
a > s 340
a >= s 342
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a ) r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 466
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 467
a -= r 1 unary_expression postfix_expression
a -> s 468
a . s 464
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 465
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a function_call s 196
a postfix_expression s 419
a primary_expression s 199
a unary_expression s 646
a unary_operator s 421
a ~ s 32
g postfix_expression 419
g primary_expression 199
g unary_expression 646
g unary_operator 421
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 471
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 472
a -= r 1 unary_expression postfix_expression
a -> s 473
a . s 469
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 470
a ] r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ] r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a function_call s 278
a postfix_expression s 422
a primary_expression s 281
a unary_expression s 647
a unary_operator s 424
a ~ s 32
g postfix_expression 422
g primary_expression 281
g unary_expression 647
g unary_operator 424
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a %= r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a &= r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a *= r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 476
a += r 1 unary_expression postfix_expression
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 477
a -= r 1 unary_expression postfix_expression
a -> s 478
a . s 474
a / r 1 unary_expression postfix_expression
a /= r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <<= r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a = r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a >>= r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 475
a ^ r 1 unary_expression postfix_expression
a ^= r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a |= r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 428
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a function_call s 248
a postfix_expression s 425
a primary_expression s 252
a unary_expression s 648
a unary_operator s 427
a ~ s 32
g postfix_expression 425
g primary_expression 252
g unary_expression 648
g unary_operator 427
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a %= r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a &= r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a *= r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a += r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -= r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a /= r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <<= r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a = r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a >>= r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^= r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a |= r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a ) r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 373
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 374
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a ) r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 373
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 374
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a ) r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 373
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 374
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a ) r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 373
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 374
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a ) r 3 shift_expression shift_expression >> additive_expression
a + s 358
a , r 3 shift_expression shift_expression >> additive_expression
a - s 359
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a ) r 3 shift_expression shift_expression << additive_expression
a + s 358
a , r 3 shift_expression shift_expression << additive_expression
a - s 359
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 348
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a ) r 3 additive_expression additive_expression + multiplicative_expression
a * s 349
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 350
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 348
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a ) r 3 additive_expression additive_expression - multiplicative_expression
a * s 349
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 350
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a ) r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a ) r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a ) r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a ; r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a ; s 716
s
a , s 547
a ; s 706
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a binary_and_expression s 222
a binary_xor_expression s 629
a equality_expression s 214
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 207
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g binary_and_expression 222
g binary_xor_expression 629
g equality_expression 214
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 207
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a binary_and_expression s 277
a binary_xor_expression s 641
a equality_expression s 269
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 261
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g binary_and_expression 277
g binary_xor_expression 641
g equality_expression 269
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 261
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a binary_and_expression s 304
a binary_xor_expression s 635
a equality_expression s 296
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 289
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g binary_and_expression 304
g binary_xor_expression 635
g equality_expression 296
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 289
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 219
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a expression s 562
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 219
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g expression 562
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a equality_expression s 214
a function_call s 567
a logical_and_expression s 220
a logical_xor_expression s 577
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 207
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g equality_expression 214
g logical_and_expression 220
g logical_xor_expression 577
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 207
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 219
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a expression s 563
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 219
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g expression 563
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a equality_expression s 269
a function_call s 592
a logical_and_expression s 275
a logical_xor_expression s 602
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 261
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g equality_expression 269
g logical_and_expression 275
g logical_xor_expression 602
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 261
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 219
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a expression s 564
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 219
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g expression 564
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a equality_expression s 296
a function_call s 613
a logical_and_expression s 302
a logical_xor_expression s 623
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 289
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g equality_expression 296
g logical_and_expression 302
g logical_xor_expression 623
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 289
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a shift_expression s 652
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g shift_expression 652
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a shift_expression s 651
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g shift_expression 651
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a shift_expression s 653
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g shift_expression 653
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a shift_expression s 650
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g shift_expression 650
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a shift_expression s 663
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g shift_expression 663
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a shift_expression s 662
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g shift_expression 662
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a shift_expression s 664
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g shift_expression 664
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a shift_expression s 661
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g shift_expression 661
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a shift_expression s 674
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g shift_expression 674
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a shift_expression s 673
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g shift_expression 673
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a shift_expression s 675
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g shift_expression 675
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a shift_expression s 672
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g shift_expression 672
g unary_expression 599
g unary_operator 601
s
a IDENTIFIER s 707
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 607
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 607
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 711
s
a IDENTIFIER s 708
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 608
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 608
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 712
s
a IDENTIFIER s 709
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 609
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 609
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a %= r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a &= r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a *= r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a += r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -= r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a /= r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <<= r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a = r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a >>= r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^= r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a |= r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a %= r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a &= r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a *= r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a += r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -= r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a /= r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <<= r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a = r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a >>= r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^= r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a |= r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 713
s
a IDENTIFIER s 710
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 610
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 610
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a ; r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a ; r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 714
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a function_call s 567
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 658
a unary_operator s 576
a ~ s 32
g postfix_expression 568
g primary_expression 569
g unary_expression 658
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a function_call s 567
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 660
a unary_operator s 576
a ~ s 32
g postfix_expression 568
g primary_expression 569
g unary_expression 660
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a function_call s 567
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 659
a unary_operator s 576
a ~ s 32
g postfix_expression 568
g primary_expression 569
g unary_expression 659
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a function_call s 613
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 669
a unary_operator s 622
a ~ s 32
g postfix_expression 614
g primary_expression 615
g unary_expression 669
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a function_call s 613
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 671
a unary_operator s 622
a ~ s 32
g postfix_expression 614
g primary_expression 615
g unary_expression 671
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a function_call s 613
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 670
a unary_operator s 622
a ~ s 32
g postfix_expression 614
g primary_expression 615
g unary_expression 670
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a function_call s 592
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 680
a unary_operator s 601
a ~ s 32
g postfix_expression 593
g primary_expression 594
g unary_expression 680
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a function_call s 592
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 682
a unary_operator s 601
a ~ s 32
g postfix_expression 593
g primary_expression 594
g unary_expression 682
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a function_call s 592
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 681
a unary_operator s 601
a ~ s 32
g postfix_expression 593
g primary_expression 594
g unary_expression 681
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a binary_and_expression s 630
a equality_expression s 214
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 207
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g binary_and_expression 630
g equality_expression 214
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 207
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a binary_and_expression s 642
a equality_expression s 269
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 261
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g binary_and_expression 642
g equality_expression 269
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 261
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a binary_and_expression s 636
a equality_expression s 296
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 289
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g binary_and_expression 636
g equality_expression 296
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 289
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a binary_and_expression s 222
a binary_or_expression s 628
a binary_xor_expression s 216
a equality_expression s 214
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 207
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g binary_and_expression 222
g binary_or_expression 628
g binary_xor_expression 216
g equality_expression 214
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 207
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a binary_and_expression s 277
a binary_or_expression s 640
a binary_xor_expression s 271
a equality_expression s 269
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 261
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g binary_and_expression 277
g binary_or_expression 640
g binary_xor_expression 271
g equality_expression 269
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 261
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a binary_and_expression s 304
a binary_or_expression s 634
a binary_xor_expression s 298
a equality_expression s 296
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 289
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g binary_and_expression 304
g binary_or_expression 634
g binary_xor_expression 298
g equality_expression 296
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 289
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a & r 2 type type &
a * r 2 type type &
a , r 2 type type &
a < r 2 type type &
a > r 2 type type &
s
a & r 2 type type *
a * r 2 type type *
a , r 2 type type *
a < r 2 type type *
a > r 2 type type *
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 272
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a additive_expression s 266
a assignment_expression s 274
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a conditional_expression s 256
a equality_expression s 269
a expression s 259
a function_call s 248
a logical_and_expression s 275
a logical_or_expression s 251
a logical_xor_expression s 270
a multiplicative_expression s 267
a postfix_expression s 249
a primary_expression s 252
a relational_expression s 261
a shift_expression s 258
a template_param s 264
a template_params s 587
a type s 250
a unary_expression s 263
a unary_operator s 268
a ~ s 32
g additive_expression 266
g assignment_expression 274
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g conditional_expression 256
g equality_expression 269
g expression 259
g logical_and_expression 275
g logical_or_expression 251
g logical_xor_expression 270
g multiplicative_expression 267
g postfix_expression 249
g primary_expression 252
g relational_expression 261
g shift_expression 258
g template_param 264
g template_params 587
g type 250
g unary_expression 263
g unary_operator 268
s
a IDENTIFIER s 333
a variable_inits s 686
a variable_name_and_assign s 331
g variable_inits 686
g variable_name_and_assign 331
s
a & r 2 type type &
a * r 2 type type &
a < r 2 type type &
a VAR r 2 type type &
s
a & r 2 type type *
a * r 2 type type *
a < r 2 type type *
a VAR r 2 type type *
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 272
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a additive_expression s 266
a assignment_expression s 274
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a conditional_expression s 256
a equality_expression s 269
a expression s 259
a function_call s 248
a logical_and_expression s 275
a logical_or_expression s 251
a logical_xor_expression s 270
a multiplicative_expression s 267
a postfix_expression s 249
a primary_expression s 252
a relational_expression s 261
a shift_expression s 258
a template_param s 264
a template_params s 588
a type s 250
a unary_expression s 263
a unary_operator s 268
a ~ s 32
g additive_expression 266
g assignment_expression 274
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g conditional_expression 256
g equality_expression 269
g expression 259
g logical_and_expression 275
g logical_or_expression 251
g logical_xor_expression 270
g multiplicative_expression 267
g postfix_expression 249
g primary_expression 252
g relational_expression 261
g shift_expression 258
g template_param 264
g template_params 588
g type 250
g unary_expression 263
g unary_operator 268
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 428
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a additive_expression s 266
a assignment_expression s 590
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a conditional_expression s 256
a equality_expression s 269
a function_call s 248
a logical_and_expression s 275
a logical_or_expression s 251
a logical_xor_expression s 270
a multiplicative_expression s 267
a postfix_expression s 249
a primary_expression s 252
a relational_expression s 261
a shift_expression s 258
a unary_expression s 263
a unary_operator s 268
a ~ s 32
g additive_expression 266
g assignment_expression 590
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g conditional_expression 256
g equality_expression 269
g logical_and_expression 275
g logical_or_expression 251
g logical_xor_expression 270
g multiplicative_expression 267
g postfix_expression 249
g primary_expression 252
g relational_expression 261
g shift_expression 258
g unary_expression 263
g unary_operator 268
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a function_call s 567
a multiplicative_expression s 656
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g multiplicative_expression 656
g postfix_expression 568
g primary_expression 569
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a function_call s 567
a multiplicative_expression s 657
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g multiplicative_expression 657
g postfix_expression 568
g primary_expression 569
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a function_call s 613
a multiplicative_expression s 667
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g multiplicative_expression 667
g postfix_expression 614
g primary_expression 615
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a function_call s 613
a multiplicative_expression s 668
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g multiplicative_expression 668
g postfix_expression 614
g primary_expression 615
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a function_call s 592
a multiplicative_expression s 678
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g multiplicative_expression 678
g postfix_expression 593
g primary_expression 594
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a function_call s 592
a multiplicative_expression s 679
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g multiplicative_expression 679
g postfix_expression 593
g primary_expression 594
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a equality_expression s 631
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 207
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g equality_expression 631
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 207
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a equality_expression s 643
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 261
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g equality_expression 643
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 261
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a equality_expression s 637
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 289
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g equality_expression 637
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 289
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a ) r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 5
a CHAR_CONST s 19
a CONTINUE s 29
a DO s 35
a ELSE s 6
a GOTO s 17
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 7
a INPUT s 34
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 44
a RETURN s 54
a STRING_CONST s 33
a SWITCH s 46
a TEST s 45
a WHILE s 63
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 22
a conditional_expression s 20
a do_while_loop s 26
a else_statement s 15
a equality_expression s 47
a expression s 27
a for s 50
a for_loop s 56
a function_call s 1
a function_decl s 53
a if_statement s 16
a input_statement s 23
a jump_statement s 65
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 37
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 582
a switch_statement s 18
a test_statement s 38
a type s 3
a unary_expression s 36
a unary_operator s 43
a variable_decls s 60
a while_loop s 48
a { s 30
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 22
g conditional_expression 20
g do_while_loop 26
g else_statement 15
g equality_expression 47
g expression 27
g for_loop 56
g function_decl 53
g if_statement 16
g input_statement 23
g jump_statement 65
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 37
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 582
g switch_statement 18
g test_statement 38
g type 3
g unary_expression 36
g unary_operator 43
g variable_decls 60
g while_loop 48
s
a { s 718
s
a { s 719
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 5
a CHAR_CONST s 19
a CONTINUE s 29
a DO s 35
a ELSE s 6
a GOTO s 17
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 7
a INPUT s 34
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 44
a RETURN s 54
a STRING_CONST s 33
a SWITCH s 46
a TEST s 45
a WHILE s 63
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 22
a conditional_expression s 20
a do_while_loop s 26
a else_statement s 15
a equality_expression s 47
a expression s 27
a for s 50
a for_loop s 56
a function_call s 1
a function_decl s 53
a if_statement s 16
a input_statement s 23
a jump_statement s 65
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 37
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 583
a switch_statement s 18
a test_statement s 38
a type s 3
a unary_expression s 36
a unary_operator s 43
a variable_decls s 60
a while_loop s 48
a { s 30
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 22
g conditional_expression 20
g do_while_loop 26
g else_statement 15
g equality_expression 47
g expression 27
g for_loop 56
g function_decl 53
g if_statement 16
g input_statement 23
g jump_statement 65
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 37
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 583
g switch_statement 18
g test_statement 38
g type 3
g unary_expression 36
g unary_operator 43
g variable_decls 60
g while_loop 48
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 565
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 565
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 586
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 586
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
s
a ! r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
s
a ! r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 611
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 611
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a ; r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 632
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 632
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 633
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 633
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 644
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 644
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 645
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 645
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 638
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 638
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 639
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 639
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a IDENTIFIER s 684
a type s 683
g type 683
s
a IDENTIFIER s 329
a type s 685
g type 685
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 211
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a equality_expression s 214
a function_call s 567
a logical_and_expression s 581
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a relational_expression s 207
a shift_expression s 204
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 211
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g equality_expression 214
g logical_and_expression 581
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g relational_expression 207
g shift_expression 204
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 266
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a equality_expression s 269
a function_call s 592
a logical_and_expression s 606
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a relational_expression s 261
a shift_expression s 258
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 266
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g equality_expression 269
g logical_and_expression 606
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g relational_expression 261
g shift_expression 258
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 293
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a equality_expression s 296
a function_call s 613
a logical_and_expression s 627
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a relational_expression s 289
a shift_expression s 286
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 293
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g equality_expression 296
g logical_and_expression 627
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g relational_expression 289
g shift_expression 286
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 655
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 655
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a additive_expression s 654
a function_call s 567
a multiplicative_expression s 212
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 574
a unary_operator s 576
a ~ s 32
g additive_expression 654
g multiplicative_expression 212
g postfix_expression 568
g primary_expression 569
g unary_expression 574
g unary_operator 576
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 666
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 666
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a additive_expression s 665
a function_call s 613
a multiplicative_expression s 294
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 620
a unary_operator s 622
a ~ s 32
g additive_expression 665
g multiplicative_expression 294
g postfix_expression 614
g primary_expression 615
g unary_expression 620
g unary_operator 622
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 677
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 677
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a additive_expression s 676
a function_call s 592
a multiplicative_expression s 267
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 599
a unary_operator s 601
a ~ s 32
g additive_expression 676
g multiplicative_expression 267
g postfix_expression 593
g primary_expression 594
g unary_expression 599
g unary_operator 601
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 272
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a additive_expression s 266
a assignment_expression s 274
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a conditional_expression s 256
a equality_expression s 269
a expression s 259
a function_call s 248
a logical_and_expression s 275
a logical_or_expression s 251
a logical_xor_expression s 270
a multiplicative_expression s 267
a postfix_expression s 249
a primary_expression s 252
a relational_expression s 261
a shift_expression s 258
a template_param s 589
a type s 250
a unary_expression s 263
a unary_operator s 268
a ~ s 32
g additive_expression 266
g assignment_expression 274
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g conditional_expression 256
g equality_expression 269
g expression 259
g logical_and_expression 275
g logical_or_expression 251
g logical_xor_expression 270
g multiplicative_expression 267
g postfix_expression 249
g primary_expression 252
g relational_expression 261
g shift_expression 258
g template_param 589
g type 250
g unary_expression 263
g unary_operator 268
s
a & r 4 type type < template_params >
a * r 4 type type < template_params >
a < r 4 type type < template_params >
a FUNC r 4 type type < template_params >
a VAR r 4 type type < template_params >
s
a IDENTIFIER s 333
a variable_name_and_assign s 687
g variable_name_and_assign 687
s
a ! r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a __END__ r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 584
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 584
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 715
s
a ( s 717
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ! r 3 block_statements { statements }
a & r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a * r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a - r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
s
a WHILE r 3 block_statements { statements }
s
a ) s 689
a func_args s 688
a single_variable_decl s 690
g func_args 688
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 585
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 585
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 561
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 561
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ) s 752
a , s 363
s
a ) s 753
a , s 363
s
a , s 521
a : s 754
s
a , s 521
a : s 755
s
a , s 521
a : s 756
s
a , r 3 expression expression , assignment_expression
a : r 3 expression expression , assignment_expression
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a : r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a : r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 739
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 740
a -> s 741
a . s 737
a / r 1 unary_expression postfix_expression
a : r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 738
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a : r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 720
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 720
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a : r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a : r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a : r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a : r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a : r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a ! s 9
a & s 10
a ( s 570
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 572
a CHAR_CONST s 571
a HEX_CONST s 580
a IDENTIFIER s 578
a NUMBER_CONST s 579
a OCTAL_CONST s 575
a STRING_CONST s 573
a function_call s 567
a postfix_expression s 568
a primary_expression s 569
a unary_expression s 730
a unary_operator s 576
a ~ s 32
g postfix_expression 568
g primary_expression 569
g unary_expression 730
g unary_operator 576
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a : r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 536
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a : r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a : r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a : r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a && s 496
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a : r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a ! r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a __END__ r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
s
a ! r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a __END__ r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
s
a , r 3 variable_name_and_assign IDENTIFIER = expression
a ; r 3 variable_name_and_assign IDENTIFIER = expression
s
a , s 179
a ; s 757
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a ; r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a , s 545
a > s 762
s
a , s 545
a > s 763
s
a , r 3 template_params template_params , template_param
a > r 3 template_params template_params , template_param
s
a , r 3 expression expression , assignment_expression
a > r 3 expression expression , assignment_expression
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a > r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 749
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 750
a -> s 751
a . s 747
a / r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 748
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 722
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 722
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a ! s 9
a & s 10
a ( s 595
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 597
a CHAR_CONST s 596
a HEX_CONST s 605
a IDENTIFIER s 603
a NUMBER_CONST s 604
a OCTAL_CONST s 600
a STRING_CONST s 598
a function_call s 592
a postfix_expression s 593
a primary_expression s 594
a unary_expression s 732
a unary_operator s 601
a ~ s 32
g postfix_expression 593
g primary_expression 594
g unary_expression 732
g unary_operator 601
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a > r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 537
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a && s 497
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a > r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a , s 526
a ] s 758
s
a , s 526
a ] s 759
s
a , s 526
a ] s 760
s
a , s 526
a ] s 761
s
a , r 3 expression expression , assignment_expression
a ] r 3 expression expression , assignment_expression
s
a , r 3 assignment_expression unary_expression assignment_operator assignment_expression
a ] r 3 assignment_expression unary_expression assignment_operator assignment_expression
s
a != r 1 postfix_expression function_call
a % r 1 postfix_expression function_call
a & r 1 postfix_expression function_call
a && r 1 postfix_expression function_call
a * r 1 postfix_expression function_call
a + r 1 postfix_expression function_call
a ++ r 1 postfix_expression function_call
a , r 1 postfix_expression function_call
a - r 1 postfix_expression function_call
a -- r 1 postfix_expression function_call
a -> r 1 postfix_expression function_call
a . r 1 postfix_expression function_call
a / r 1 postfix_expression function_call
a < r 1 postfix_expression function_call
a << r 1 postfix_expression function_call
a <= r 1 postfix_expression function_call
a == r 1 postfix_expression function_call
a > r 1 postfix_expression function_call
a >= r 1 postfix_expression function_call
a >> r 1 postfix_expression function_call
a ? r 1 postfix_expression function_call
a [ r 1 postfix_expression function_call
a ] r 1 postfix_expression function_call
a ^ r 1 postfix_expression function_call
a ^^ r 1 postfix_expression function_call
a | r 1 postfix_expression function_call
a || r 1 postfix_expression function_call
s
a != r 1 unary_expression postfix_expression
a % r 1 unary_expression postfix_expression
a & r 1 unary_expression postfix_expression
a && r 1 unary_expression postfix_expression
a * r 1 unary_expression postfix_expression
a + r 1 unary_expression postfix_expression
a ++ s 744
a , r 1 unary_expression postfix_expression
a - r 1 unary_expression postfix_expression
a -- s 745
a -> s 746
a . s 742
a / r 1 unary_expression postfix_expression
a < r 1 unary_expression postfix_expression
a << r 1 unary_expression postfix_expression
a <= r 1 unary_expression postfix_expression
a == r 1 unary_expression postfix_expression
a > r 1 unary_expression postfix_expression
a >= r 1 unary_expression postfix_expression
a >> r 1 unary_expression postfix_expression
a ? r 1 unary_expression postfix_expression
a [ s 743
a ] r 1 unary_expression postfix_expression
a ^ r 1 unary_expression postfix_expression
a ^^ r 1 unary_expression postfix_expression
a | r 1 unary_expression postfix_expression
a || r 1 unary_expression postfix_expression
s
a != r 1 postfix_expression primary_expression
a % r 1 postfix_expression primary_expression
a & r 1 postfix_expression primary_expression
a && r 1 postfix_expression primary_expression
a * r 1 postfix_expression primary_expression
a + r 1 postfix_expression primary_expression
a ++ r 1 postfix_expression primary_expression
a , r 1 postfix_expression primary_expression
a - r 1 postfix_expression primary_expression
a -- r 1 postfix_expression primary_expression
a -> r 1 postfix_expression primary_expression
a . r 1 postfix_expression primary_expression
a / r 1 postfix_expression primary_expression
a < r 1 postfix_expression primary_expression
a << r 1 postfix_expression primary_expression
a <= r 1 postfix_expression primary_expression
a == r 1 postfix_expression primary_expression
a > r 1 postfix_expression primary_expression
a >= r 1 postfix_expression primary_expression
a >> r 1 postfix_expression primary_expression
a ? r 1 postfix_expression primary_expression
a [ r 1 postfix_expression primary_expression
a ] r 1 postfix_expression primary_expression
a ^ r 1 postfix_expression primary_expression
a ^^ r 1 postfix_expression primary_expression
a | r 1 postfix_expression primary_expression
a || r 1 postfix_expression primary_expression
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 721
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 721
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 1 primary_expression CHAR_CONST
a % r 1 primary_expression CHAR_CONST
a & r 1 primary_expression CHAR_CONST
a && r 1 primary_expression CHAR_CONST
a * r 1 primary_expression CHAR_CONST
a + r 1 primary_expression CHAR_CONST
a ++ r 1 primary_expression CHAR_CONST
a , r 1 primary_expression CHAR_CONST
a - r 1 primary_expression CHAR_CONST
a -- r 1 primary_expression CHAR_CONST
a -> r 1 primary_expression CHAR_CONST
a . r 1 primary_expression CHAR_CONST
a / r 1 primary_expression CHAR_CONST
a < r 1 primary_expression CHAR_CONST
a << r 1 primary_expression CHAR_CONST
a <= r 1 primary_expression CHAR_CONST
a == r 1 primary_expression CHAR_CONST
a > r 1 primary_expression CHAR_CONST
a >= r 1 primary_expression CHAR_CONST
a >> r 1 primary_expression CHAR_CONST
a ? r 1 primary_expression CHAR_CONST
a [ r 1 primary_expression CHAR_CONST
a ] r 1 primary_expression CHAR_CONST
a ^ r 1 primary_expression CHAR_CONST
a ^^ r 1 primary_expression CHAR_CONST
a | r 1 primary_expression CHAR_CONST
a || r 1 primary_expression CHAR_CONST
s
a != r 1 primary_expression BINARY_CONST
a % r 1 primary_expression BINARY_CONST
a & r 1 primary_expression BINARY_CONST
a && r 1 primary_expression BINARY_CONST
a * r 1 primary_expression BINARY_CONST
a + r 1 primary_expression BINARY_CONST
a ++ r 1 primary_expression BINARY_CONST
a , r 1 primary_expression BINARY_CONST
a - r 1 primary_expression BINARY_CONST
a -- r 1 primary_expression BINARY_CONST
a -> r 1 primary_expression BINARY_CONST
a . r 1 primary_expression BINARY_CONST
a / r 1 primary_expression BINARY_CONST
a < r 1 primary_expression BINARY_CONST
a << r 1 primary_expression BINARY_CONST
a <= r 1 primary_expression BINARY_CONST
a == r 1 primary_expression BINARY_CONST
a > r 1 primary_expression BINARY_CONST
a >= r 1 primary_expression BINARY_CONST
a >> r 1 primary_expression BINARY_CONST
a ? r 1 primary_expression BINARY_CONST
a [ r 1 primary_expression BINARY_CONST
a ] r 1 primary_expression BINARY_CONST
a ^ r 1 primary_expression BINARY_CONST
a ^^ r 1 primary_expression BINARY_CONST
a | r 1 primary_expression BINARY_CONST
a || r 1 primary_expression BINARY_CONST
s
a != r 1 primary_expression STRING_CONST
a % r 1 primary_expression STRING_CONST
a & r 1 primary_expression STRING_CONST
a && r 1 primary_expression STRING_CONST
a * r 1 primary_expression STRING_CONST
a + r 1 primary_expression STRING_CONST
a ++ r 1 primary_expression STRING_CONST
a , r 1 primary_expression STRING_CONST
a - r 1 primary_expression STRING_CONST
a -- r 1 primary_expression STRING_CONST
a -> r 1 primary_expression STRING_CONST
a . r 1 primary_expression STRING_CONST
a / r 1 primary_expression STRING_CONST
a < r 1 primary_expression STRING_CONST
a << r 1 primary_expression STRING_CONST
a <= r 1 primary_expression STRING_CONST
a == r 1 primary_expression STRING_CONST
a > r 1 primary_expression STRING_CONST
a >= r 1 primary_expression STRING_CONST
a >> r 1 primary_expression STRING_CONST
a ? r 1 primary_expression STRING_CONST
a [ r 1 primary_expression STRING_CONST
a ] r 1 primary_expression STRING_CONST
a ^ r 1 primary_expression STRING_CONST
a ^^ r 1 primary_expression STRING_CONST
a | r 1 primary_expression STRING_CONST
a || r 1 primary_expression STRING_CONST
s
a != r 1 multiplicative_expression unary_expression
a % r 1 multiplicative_expression unary_expression
a & r 1 multiplicative_expression unary_expression
a && r 1 multiplicative_expression unary_expression
a * r 1 multiplicative_expression unary_expression
a + r 1 multiplicative_expression unary_expression
a , r 1 multiplicative_expression unary_expression
a - r 1 multiplicative_expression unary_expression
a / r 1 multiplicative_expression unary_expression
a < r 1 multiplicative_expression unary_expression
a << r 1 multiplicative_expression unary_expression
a <= r 1 multiplicative_expression unary_expression
a == r 1 multiplicative_expression unary_expression
a > r 1 multiplicative_expression unary_expression
a >= r 1 multiplicative_expression unary_expression
a >> r 1 multiplicative_expression unary_expression
a ? r 1 multiplicative_expression unary_expression
a ] r 1 multiplicative_expression unary_expression
a ^ r 1 multiplicative_expression unary_expression
a ^^ r 1 multiplicative_expression unary_expression
a | r 1 multiplicative_expression unary_expression
a || r 1 multiplicative_expression unary_expression
s
a != r 1 primary_expression OCTAL_CONST
a % r 1 primary_expression OCTAL_CONST
a & r 1 primary_expression OCTAL_CONST
a && r 1 primary_expression OCTAL_CONST
a * r 1 primary_expression OCTAL_CONST
a + r 1 primary_expression OCTAL_CONST
a ++ r 1 primary_expression OCTAL_CONST
a , r 1 primary_expression OCTAL_CONST
a - r 1 primary_expression OCTAL_CONST
a -- r 1 primary_expression OCTAL_CONST
a -> r 1 primary_expression OCTAL_CONST
a . r 1 primary_expression OCTAL_CONST
a / r 1 primary_expression OCTAL_CONST
a < r 1 primary_expression OCTAL_CONST
a << r 1 primary_expression OCTAL_CONST
a <= r 1 primary_expression OCTAL_CONST
a == r 1 primary_expression OCTAL_CONST
a > r 1 primary_expression OCTAL_CONST
a >= r 1 primary_expression OCTAL_CONST
a >> r 1 primary_expression OCTAL_CONST
a ? r 1 primary_expression OCTAL_CONST
a [ r 1 primary_expression OCTAL_CONST
a ] r 1 primary_expression OCTAL_CONST
a ^ r 1 primary_expression OCTAL_CONST
a ^^ r 1 primary_expression OCTAL_CONST
a | r 1 primary_expression OCTAL_CONST
a || r 1 primary_expression OCTAL_CONST
s
a ! s 9
a & s 10
a ( s 616
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 618
a CHAR_CONST s 617
a HEX_CONST s 626
a IDENTIFIER s 624
a NUMBER_CONST s 625
a OCTAL_CONST s 621
a STRING_CONST s 619
a function_call s 613
a postfix_expression s 614
a primary_expression s 615
a unary_expression s 731
a unary_operator s 622
a ~ s 32
g postfix_expression 614
g primary_expression 615
g unary_expression 731
g unary_operator 622
s
a , r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ? r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ] r 3 logical_or_expression logical_or_expression || logical_xor_expression
a ^^ s 538
a || r 3 logical_or_expression logical_or_expression || logical_xor_expression
s
a != r 1 primary_expression IDENTIFIER
a % r 1 primary_expression IDENTIFIER
a & r 1 primary_expression IDENTIFIER
a && r 1 primary_expression IDENTIFIER
a * r 1 primary_expression IDENTIFIER
a + r 1 primary_expression IDENTIFIER
a ++ r 1 primary_expression IDENTIFIER
a , r 1 primary_expression IDENTIFIER
a - r 1 primary_expression IDENTIFIER
a -- r 1 primary_expression IDENTIFIER
a -> r 1 primary_expression IDENTIFIER
a . r 1 primary_expression IDENTIFIER
a / r 1 primary_expression IDENTIFIER
a < r 1 primary_expression IDENTIFIER
a << r 1 primary_expression IDENTIFIER
a <= r 1 primary_expression IDENTIFIER
a == r 1 primary_expression IDENTIFIER
a > r 1 primary_expression IDENTIFIER
a >= r 1 primary_expression IDENTIFIER
a >> r 1 primary_expression IDENTIFIER
a ? r 1 primary_expression IDENTIFIER
a [ r 1 primary_expression IDENTIFIER
a ] r 1 primary_expression IDENTIFIER
a ^ r 1 primary_expression IDENTIFIER
a ^^ r 1 primary_expression IDENTIFIER
a | r 1 primary_expression IDENTIFIER
a || r 1 primary_expression IDENTIFIER
s
a != r 1 primary_expression NUMBER_CONST
a % r 1 primary_expression NUMBER_CONST
a & r 1 primary_expression NUMBER_CONST
a && r 1 primary_expression NUMBER_CONST
a * r 1 primary_expression NUMBER_CONST
a + r 1 primary_expression NUMBER_CONST
a ++ r 1 primary_expression NUMBER_CONST
a , r 1 primary_expression NUMBER_CONST
a - r 1 primary_expression NUMBER_CONST
a -- r 1 primary_expression NUMBER_CONST
a -> r 1 primary_expression NUMBER_CONST
a . r 1 primary_expression NUMBER_CONST
a / r 1 primary_expression NUMBER_CONST
a < r 1 primary_expression NUMBER_CONST
a << r 1 primary_expression NUMBER_CONST
a <= r 1 primary_expression NUMBER_CONST
a == r 1 primary_expression NUMBER_CONST
a > r 1 primary_expression NUMBER_CONST
a >= r 1 primary_expression NUMBER_CONST
a >> r 1 primary_expression NUMBER_CONST
a ? r 1 primary_expression NUMBER_CONST
a [ r 1 primary_expression NUMBER_CONST
a ] r 1 primary_expression NUMBER_CONST
a ^ r 1 primary_expression NUMBER_CONST
a ^^ r 1 primary_expression NUMBER_CONST
a | r 1 primary_expression NUMBER_CONST
a || r 1 primary_expression NUMBER_CONST
s
a != r 1 primary_expression HEX_CONST
a % r 1 primary_expression HEX_CONST
a & r 1 primary_expression HEX_CONST
a && r 1 primary_expression HEX_CONST
a * r 1 primary_expression HEX_CONST
a + r 1 primary_expression HEX_CONST
a ++ r 1 primary_expression HEX_CONST
a , r 1 primary_expression HEX_CONST
a - r 1 primary_expression HEX_CONST
a -- r 1 primary_expression HEX_CONST
a -> r 1 primary_expression HEX_CONST
a . r 1 primary_expression HEX_CONST
a / r 1 primary_expression HEX_CONST
a < r 1 primary_expression HEX_CONST
a << r 1 primary_expression HEX_CONST
a <= r 1 primary_expression HEX_CONST
a == r 1 primary_expression HEX_CONST
a > r 1 primary_expression HEX_CONST
a >= r 1 primary_expression HEX_CONST
a >> r 1 primary_expression HEX_CONST
a ? r 1 primary_expression HEX_CONST
a [ r 1 primary_expression HEX_CONST
a ] r 1 primary_expression HEX_CONST
a ^ r 1 primary_expression HEX_CONST
a ^^ r 1 primary_expression HEX_CONST
a | r 1 primary_expression HEX_CONST
a || r 1 primary_expression HEX_CONST
s
a && s 498
a , r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ? r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ] r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a ^^ r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
a || r 3 logical_xor_expression logical_xor_expression ^^ logical_and_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a : r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 443
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a : r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 493
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 513
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a : r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 528
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a : r 3 binary_and_expression binary_and_expression & equality_expression
a == s 529
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a : r 3 equality_expression equality_expression != relational_expression
a < s 452
a <= s 454
a == r 3 equality_expression equality_expression != relational_expression
a > s 453
a >= s 455
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a : r 3 equality_expression equality_expression == relational_expression
a < s 452
a <= s 454
a == r 3 equality_expression equality_expression == relational_expression
a > s 453
a >= s 455
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ] r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 445
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ] r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 495
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 515
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ] r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 532
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a == s 533
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ] r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a < s 456
a <= s 458
a == r 3 equality_expression equality_expression != relational_expression
a > s 457
a >= s 459
a ? r 3 equality_expression equality_expression != relational_expression
a ] r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a < s 456
a <= s 458
a == r 3 equality_expression equality_expression == relational_expression
a > s 457
a >= s 459
a ? r 3 equality_expression equality_expression == relational_expression
a ] r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a && r 3 logical_and_expression logical_and_expression && binary_or_expression
a , r 3 logical_and_expression logical_and_expression && binary_or_expression
a > r 3 logical_and_expression logical_and_expression && binary_or_expression
a ? r 3 logical_and_expression logical_and_expression && binary_or_expression
a ^^ r 3 logical_and_expression logical_and_expression && binary_or_expression
a | s 444
a || r 3 logical_and_expression logical_and_expression && binary_or_expression
s
a && r 3 binary_or_expression binary_or_expression | binary_xor_expression
a , r 3 binary_or_expression binary_or_expression | binary_xor_expression
a > r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ? r 3 binary_or_expression binary_or_expression | binary_xor_expression
a ^ s 494
a ^^ r 3 binary_or_expression binary_or_expression | binary_xor_expression
a | r 3 binary_or_expression binary_or_expression | binary_xor_expression
a || r 3 binary_or_expression binary_or_expression | binary_xor_expression
s
a & s 514
a && r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a , r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a > r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ? r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a ^^ r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a | r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
a || r 3 binary_xor_expression binary_xor_expression ^ binary_and_expression
s
a != s 530
a & r 3 binary_and_expression binary_and_expression & equality_expression
a && r 3 binary_and_expression binary_and_expression & equality_expression
a , r 3 binary_and_expression binary_and_expression & equality_expression
a == s 531
a > r 3 binary_and_expression binary_and_expression & equality_expression
a ? r 3 binary_and_expression binary_and_expression & equality_expression
a ^ r 3 binary_and_expression binary_and_expression & equality_expression
a ^^ r 3 binary_and_expression binary_and_expression & equality_expression
a | r 3 binary_and_expression binary_and_expression & equality_expression
a || r 3 binary_and_expression binary_and_expression & equality_expression
s
a != r 3 equality_expression equality_expression != relational_expression
a & r 3 equality_expression equality_expression != relational_expression
a && r 3 equality_expression equality_expression != relational_expression
a , r 3 equality_expression equality_expression != relational_expression
a < s 460
a <= s 462
a == r 3 equality_expression equality_expression != relational_expression
a > r 3 equality_expression equality_expression != relational_expression
a >= s 463
a ? r 3 equality_expression equality_expression != relational_expression
a ^ r 3 equality_expression equality_expression != relational_expression
a ^^ r 3 equality_expression equality_expression != relational_expression
a | r 3 equality_expression equality_expression != relational_expression
a || r 3 equality_expression equality_expression != relational_expression
s
a != r 3 equality_expression equality_expression == relational_expression
a & r 3 equality_expression equality_expression == relational_expression
a && r 3 equality_expression equality_expression == relational_expression
a , r 3 equality_expression equality_expression == relational_expression
a < s 460
a <= s 462
a == r 3 equality_expression equality_expression == relational_expression
a > r 3 equality_expression equality_expression == relational_expression
a >= s 463
a ? r 3 equality_expression equality_expression == relational_expression
a ^ r 3 equality_expression equality_expression == relational_expression
a ^^ r 3 equality_expression equality_expression == relational_expression
a | r 3 equality_expression equality_expression == relational_expression
a || r 3 equality_expression equality_expression == relational_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ] r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a %= r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a &= r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a *= r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a += r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a -= r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a /= r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <<= r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a = r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a >>= r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^= r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a |= r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a ) r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a : r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 539
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 540
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a : r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 539
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 540
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a : r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 539
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 540
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a : r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 539
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 540
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 507
a , r 3 shift_expression shift_expression >> additive_expression
a - s 508
a : r 3 shift_expression shift_expression >> additive_expression
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 507
a , r 3 shift_expression shift_expression << additive_expression
a - s 508
a : r 3 shift_expression shift_expression << additive_expression
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 484
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 485
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 486
a : r 3 additive_expression additive_expression + multiplicative_expression
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 484
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 485
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 486
a : r 3 additive_expression additive_expression - multiplicative_expression
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a : r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a : r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a : r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 541
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 542
a ? r 3 relational_expression relational_expression >= shift_expression
a ] r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 541
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 542
a ? r 3 relational_expression relational_expression > shift_expression
a ] r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 541
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 542
a ? r 3 relational_expression relational_expression < shift_expression
a ] r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 541
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 542
a ? r 3 relational_expression relational_expression <= shift_expression
a ] r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 509
a , r 3 shift_expression shift_expression >> additive_expression
a - s 510
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ] r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 509
a , r 3 shift_expression shift_expression << additive_expression
a - s 510
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ] r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 487
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 488
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 489
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ] r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 487
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 488
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 489
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ] r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ] r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ] r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ] r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a != r 3 relational_expression relational_expression >= shift_expression
a & r 3 relational_expression relational_expression >= shift_expression
a && r 3 relational_expression relational_expression >= shift_expression
a , r 3 relational_expression relational_expression >= shift_expression
a < r 3 relational_expression relational_expression >= shift_expression
a << s 543
a <= r 3 relational_expression relational_expression >= shift_expression
a == r 3 relational_expression relational_expression >= shift_expression
a > r 3 relational_expression relational_expression >= shift_expression
a >= r 3 relational_expression relational_expression >= shift_expression
a >> s 544
a ? r 3 relational_expression relational_expression >= shift_expression
a ^ r 3 relational_expression relational_expression >= shift_expression
a ^^ r 3 relational_expression relational_expression >= shift_expression
a | r 3 relational_expression relational_expression >= shift_expression
a || r 3 relational_expression relational_expression >= shift_expression
s
a != r 3 relational_expression relational_expression > shift_expression
a & r 3 relational_expression relational_expression > shift_expression
a && r 3 relational_expression relational_expression > shift_expression
a , r 3 relational_expression relational_expression > shift_expression
a < r 3 relational_expression relational_expression > shift_expression
a << s 543
a <= r 3 relational_expression relational_expression > shift_expression
a == r 3 relational_expression relational_expression > shift_expression
a > r 3 relational_expression relational_expression > shift_expression
a >= r 3 relational_expression relational_expression > shift_expression
a >> s 544
a ? r 3 relational_expression relational_expression > shift_expression
a ^ r 3 relational_expression relational_expression > shift_expression
a ^^ r 3 relational_expression relational_expression > shift_expression
a | r 3 relational_expression relational_expression > shift_expression
a || r 3 relational_expression relational_expression > shift_expression
s
a != r 3 relational_expression relational_expression < shift_expression
a & r 3 relational_expression relational_expression < shift_expression
a && r 3 relational_expression relational_expression < shift_expression
a , r 3 relational_expression relational_expression < shift_expression
a < r 3 relational_expression relational_expression < shift_expression
a << s 543
a <= r 3 relational_expression relational_expression < shift_expression
a == r 3 relational_expression relational_expression < shift_expression
a > r 3 relational_expression relational_expression < shift_expression
a >= r 3 relational_expression relational_expression < shift_expression
a >> s 544
a ? r 3 relational_expression relational_expression < shift_expression
a ^ r 3 relational_expression relational_expression < shift_expression
a ^^ r 3 relational_expression relational_expression < shift_expression
a | r 3 relational_expression relational_expression < shift_expression
a || r 3 relational_expression relational_expression < shift_expression
s
a != r 3 relational_expression relational_expression <= shift_expression
a & r 3 relational_expression relational_expression <= shift_expression
a && r 3 relational_expression relational_expression <= shift_expression
a , r 3 relational_expression relational_expression <= shift_expression
a < r 3 relational_expression relational_expression <= shift_expression
a << s 543
a <= r 3 relational_expression relational_expression <= shift_expression
a == r 3 relational_expression relational_expression <= shift_expression
a > r 3 relational_expression relational_expression <= shift_expression
a >= r 3 relational_expression relational_expression <= shift_expression
a >> s 544
a ? r 3 relational_expression relational_expression <= shift_expression
a ^ r 3 relational_expression relational_expression <= shift_expression
a ^^ r 3 relational_expression relational_expression <= shift_expression
a | r 3 relational_expression relational_expression <= shift_expression
a || r 3 relational_expression relational_expression <= shift_expression
s
a != r 3 shift_expression shift_expression >> additive_expression
a & r 3 shift_expression shift_expression >> additive_expression
a && r 3 shift_expression shift_expression >> additive_expression
a + s 511
a , r 3 shift_expression shift_expression >> additive_expression
a - s 512
a < r 3 shift_expression shift_expression >> additive_expression
a << r 3 shift_expression shift_expression >> additive_expression
a <= r 3 shift_expression shift_expression >> additive_expression
a == r 3 shift_expression shift_expression >> additive_expression
a > r 3 shift_expression shift_expression >> additive_expression
a >= r 3 shift_expression shift_expression >> additive_expression
a >> r 3 shift_expression shift_expression >> additive_expression
a ? r 3 shift_expression shift_expression >> additive_expression
a ^ r 3 shift_expression shift_expression >> additive_expression
a ^^ r 3 shift_expression shift_expression >> additive_expression
a | r 3 shift_expression shift_expression >> additive_expression
a || r 3 shift_expression shift_expression >> additive_expression
s
a != r 3 shift_expression shift_expression << additive_expression
a & r 3 shift_expression shift_expression << additive_expression
a && r 3 shift_expression shift_expression << additive_expression
a + s 511
a , r 3 shift_expression shift_expression << additive_expression
a - s 512
a < r 3 shift_expression shift_expression << additive_expression
a << r 3 shift_expression shift_expression << additive_expression
a <= r 3 shift_expression shift_expression << additive_expression
a == r 3 shift_expression shift_expression << additive_expression
a > r 3 shift_expression shift_expression << additive_expression
a >= r 3 shift_expression shift_expression << additive_expression
a >> r 3 shift_expression shift_expression << additive_expression
a ? r 3 shift_expression shift_expression << additive_expression
a ^ r 3 shift_expression shift_expression << additive_expression
a ^^ r 3 shift_expression shift_expression << additive_expression
a | r 3 shift_expression shift_expression << additive_expression
a || r 3 shift_expression shift_expression << additive_expression
s
a != r 3 additive_expression additive_expression + multiplicative_expression
a % s 490
a & r 3 additive_expression additive_expression + multiplicative_expression
a && r 3 additive_expression additive_expression + multiplicative_expression
a * s 491
a + r 3 additive_expression additive_expression + multiplicative_expression
a , r 3 additive_expression additive_expression + multiplicative_expression
a - r 3 additive_expression additive_expression + multiplicative_expression
a / s 492
a < r 3 additive_expression additive_expression + multiplicative_expression
a << r 3 additive_expression additive_expression + multiplicative_expression
a <= r 3 additive_expression additive_expression + multiplicative_expression
a == r 3 additive_expression additive_expression + multiplicative_expression
a > r 3 additive_expression additive_expression + multiplicative_expression
a >= r 3 additive_expression additive_expression + multiplicative_expression
a >> r 3 additive_expression additive_expression + multiplicative_expression
a ? r 3 additive_expression additive_expression + multiplicative_expression
a ^ r 3 additive_expression additive_expression + multiplicative_expression
a ^^ r 3 additive_expression additive_expression + multiplicative_expression
a | r 3 additive_expression additive_expression + multiplicative_expression
a || r 3 additive_expression additive_expression + multiplicative_expression
s
a != r 3 additive_expression additive_expression - multiplicative_expression
a % s 490
a & r 3 additive_expression additive_expression - multiplicative_expression
a && r 3 additive_expression additive_expression - multiplicative_expression
a * s 491
a + r 3 additive_expression additive_expression - multiplicative_expression
a , r 3 additive_expression additive_expression - multiplicative_expression
a - r 3 additive_expression additive_expression - multiplicative_expression
a / s 492
a < r 3 additive_expression additive_expression - multiplicative_expression
a << r 3 additive_expression additive_expression - multiplicative_expression
a <= r 3 additive_expression additive_expression - multiplicative_expression
a == r 3 additive_expression additive_expression - multiplicative_expression
a > r 3 additive_expression additive_expression - multiplicative_expression
a >= r 3 additive_expression additive_expression - multiplicative_expression
a >> r 3 additive_expression additive_expression - multiplicative_expression
a ? r 3 additive_expression additive_expression - multiplicative_expression
a ^ r 3 additive_expression additive_expression - multiplicative_expression
a ^^ r 3 additive_expression additive_expression - multiplicative_expression
a | r 3 additive_expression additive_expression - multiplicative_expression
a || r 3 additive_expression additive_expression - multiplicative_expression
s
a != r 3 multiplicative_expression multiplicative_expression % unary_expression
a % r 3 multiplicative_expression multiplicative_expression % unary_expression
a & r 3 multiplicative_expression multiplicative_expression % unary_expression
a && r 3 multiplicative_expression multiplicative_expression % unary_expression
a * r 3 multiplicative_expression multiplicative_expression % unary_expression
a + r 3 multiplicative_expression multiplicative_expression % unary_expression
a , r 3 multiplicative_expression multiplicative_expression % unary_expression
a - r 3 multiplicative_expression multiplicative_expression % unary_expression
a / r 3 multiplicative_expression multiplicative_expression % unary_expression
a < r 3 multiplicative_expression multiplicative_expression % unary_expression
a << r 3 multiplicative_expression multiplicative_expression % unary_expression
a <= r 3 multiplicative_expression multiplicative_expression % unary_expression
a == r 3 multiplicative_expression multiplicative_expression % unary_expression
a > r 3 multiplicative_expression multiplicative_expression % unary_expression
a >= r 3 multiplicative_expression multiplicative_expression % unary_expression
a >> r 3 multiplicative_expression multiplicative_expression % unary_expression
a ? r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression % unary_expression
a | r 3 multiplicative_expression multiplicative_expression % unary_expression
a || r 3 multiplicative_expression multiplicative_expression % unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression / unary_expression
a % r 3 multiplicative_expression multiplicative_expression / unary_expression
a & r 3 multiplicative_expression multiplicative_expression / unary_expression
a && r 3 multiplicative_expression multiplicative_expression / unary_expression
a * r 3 multiplicative_expression multiplicative_expression / unary_expression
a + r 3 multiplicative_expression multiplicative_expression / unary_expression
a , r 3 multiplicative_expression multiplicative_expression / unary_expression
a - r 3 multiplicative_expression multiplicative_expression / unary_expression
a / r 3 multiplicative_expression multiplicative_expression / unary_expression
a < r 3 multiplicative_expression multiplicative_expression / unary_expression
a << r 3 multiplicative_expression multiplicative_expression / unary_expression
a <= r 3 multiplicative_expression multiplicative_expression / unary_expression
a == r 3 multiplicative_expression multiplicative_expression / unary_expression
a > r 3 multiplicative_expression multiplicative_expression / unary_expression
a >= r 3 multiplicative_expression multiplicative_expression / unary_expression
a >> r 3 multiplicative_expression multiplicative_expression / unary_expression
a ? r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression / unary_expression
a | r 3 multiplicative_expression multiplicative_expression / unary_expression
a || r 3 multiplicative_expression multiplicative_expression / unary_expression
s
a != r 3 multiplicative_expression multiplicative_expression * unary_expression
a % r 3 multiplicative_expression multiplicative_expression * unary_expression
a & r 3 multiplicative_expression multiplicative_expression * unary_expression
a && r 3 multiplicative_expression multiplicative_expression * unary_expression
a * r 3 multiplicative_expression multiplicative_expression * unary_expression
a + r 3 multiplicative_expression multiplicative_expression * unary_expression
a , r 3 multiplicative_expression multiplicative_expression * unary_expression
a - r 3 multiplicative_expression multiplicative_expression * unary_expression
a / r 3 multiplicative_expression multiplicative_expression * unary_expression
a < r 3 multiplicative_expression multiplicative_expression * unary_expression
a << r 3 multiplicative_expression multiplicative_expression * unary_expression
a <= r 3 multiplicative_expression multiplicative_expression * unary_expression
a == r 3 multiplicative_expression multiplicative_expression * unary_expression
a > r 3 multiplicative_expression multiplicative_expression * unary_expression
a >= r 3 multiplicative_expression multiplicative_expression * unary_expression
a >> r 3 multiplicative_expression multiplicative_expression * unary_expression
a ? r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a ^^ r 3 multiplicative_expression multiplicative_expression * unary_expression
a | r 3 multiplicative_expression multiplicative_expression * unary_expression
a || r 3 multiplicative_expression multiplicative_expression * unary_expression
s
a & r 3 type IDENTIFIER :: type
a * r 3 type IDENTIFIER :: type
a , r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a > r 3 type IDENTIFIER :: type
s
a & r 1 type IDENTIFIER
a * r 1 type IDENTIFIER
a , r 1 type IDENTIFIER
a :: s 534
a < r 1 type IDENTIFIER
a > r 1 type IDENTIFIER
s
a & r 3 type IDENTIFIER :: type
a * r 3 type IDENTIFIER :: type
a < r 3 type IDENTIFIER :: type
a VAR r 3 type IDENTIFIER :: type
s
a , s 547
a ; s 764
s
a , r 3 variable_inits variable_inits , variable_name_and_assign
a ; r 3 variable_inits variable_inits , variable_name_and_assign
s
a ) s 765
a , s 766
s
a block_statements s 734
a { s 30
g block_statements 734
s
a ) r 1 func_args single_variable_decl
a , r 1 func_args single_variable_decl
s
a IDENTIFIER s 767
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 728
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 728
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a ) r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a ) r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 768
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a %= r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a &= r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a *= r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a += r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -= r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a /= r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <<= r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a = r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a >>= r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^= r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a |= r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a ; r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 725
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 725
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a { s 769
s
a { s 770
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 726
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 726
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 724
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 724
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a ) r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a ! r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a %= r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a &= r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a *= r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a += r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -= r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a /= r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <<= r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a = r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a >>= r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^= r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a |= r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a ; r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a %= r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a &= r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a *= r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a += r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -= r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a /= r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <<= r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a = r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a >>= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^= r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a |= r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a ; r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ) s 736
a func_args s 735
a single_variable_decl s 690
g func_args 735
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 727
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 727
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 723
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 723
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 729
a } r 0 test_case_statements 
g test_case_statements 729
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 733
a } r 0 switch_case_statements 
g switch_case_statements 733
s
a ) s 789
a , s 363
s
a ) s 790
a , s 363
s
a ) s 791
a , s 363
s
a ) s 792
a , s 363
s
a ) r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a ! r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
s
a ! r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
s
a , s 179
a ; s 793
s
a , s 526
a ] s 794
s
a CASE s 779
a DEFAULT s 782
a test_case_statement s 780
a } s 781
g test_case_statement 780
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a : r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ] r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a != r 2 unary_expression unary_operator unary_expression
a % r 2 unary_expression unary_operator unary_expression
a & r 2 unary_expression unary_operator unary_expression
a && r 2 unary_expression unary_operator unary_expression
a * r 2 unary_expression unary_operator unary_expression
a + r 2 unary_expression unary_operator unary_expression
a , r 2 unary_expression unary_operator unary_expression
a - r 2 unary_expression unary_operator unary_expression
a / r 2 unary_expression unary_operator unary_expression
a < r 2 unary_expression unary_operator unary_expression
a << r 2 unary_expression unary_operator unary_expression
a <= r 2 unary_expression unary_operator unary_expression
a == r 2 unary_expression unary_operator unary_expression
a > r 2 unary_expression unary_operator unary_expression
a >= r 2 unary_expression unary_operator unary_expression
a >> r 2 unary_expression unary_operator unary_expression
a ? r 2 unary_expression unary_operator unary_expression
a ^ r 2 unary_expression unary_operator unary_expression
a ^^ r 2 unary_expression unary_operator unary_expression
a | r 2 unary_expression unary_operator unary_expression
a || r 2 unary_expression unary_operator unary_expression
s
a CASE s 786
a switch_case_statement s 787
a } s 788
g switch_case_statement 787
s
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a __END__ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a ) s 795
a , s 766
s
a block_statements s 785
a { s 119
g block_statements 785
s
a IDENTIFIER s 796
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 774
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 774
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a : r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a : r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 799
s
a IDENTIFIER s 797
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 775
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 775
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ] r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ] r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 800
s
a IDENTIFIER s 798
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 301
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a expression s 776
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 301
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g expression 776
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a != r 2 postfix_expression postfix_expression ++
a % r 2 postfix_expression postfix_expression ++
a & r 2 postfix_expression postfix_expression ++
a && r 2 postfix_expression postfix_expression ++
a * r 2 postfix_expression postfix_expression ++
a + r 2 postfix_expression postfix_expression ++
a ++ r 2 postfix_expression postfix_expression ++
a , r 2 postfix_expression postfix_expression ++
a - r 2 postfix_expression postfix_expression ++
a -- r 2 postfix_expression postfix_expression ++
a -> r 2 postfix_expression postfix_expression ++
a . r 2 postfix_expression postfix_expression ++
a / r 2 postfix_expression postfix_expression ++
a < r 2 postfix_expression postfix_expression ++
a << r 2 postfix_expression postfix_expression ++
a <= r 2 postfix_expression postfix_expression ++
a == r 2 postfix_expression postfix_expression ++
a > r 2 postfix_expression postfix_expression ++
a >= r 2 postfix_expression postfix_expression ++
a >> r 2 postfix_expression postfix_expression ++
a ? r 2 postfix_expression postfix_expression ++
a [ r 2 postfix_expression postfix_expression ++
a ^ r 2 postfix_expression postfix_expression ++
a ^^ r 2 postfix_expression postfix_expression ++
a | r 2 postfix_expression postfix_expression ++
a || r 2 postfix_expression postfix_expression ++
s
a != r 2 postfix_expression postfix_expression --
a % r 2 postfix_expression postfix_expression --
a & r 2 postfix_expression postfix_expression --
a && r 2 postfix_expression postfix_expression --
a * r 2 postfix_expression postfix_expression --
a + r 2 postfix_expression postfix_expression --
a ++ r 2 postfix_expression postfix_expression --
a , r 2 postfix_expression postfix_expression --
a - r 2 postfix_expression postfix_expression --
a -- r 2 postfix_expression postfix_expression --
a -> r 2 postfix_expression postfix_expression --
a . r 2 postfix_expression postfix_expression --
a / r 2 postfix_expression postfix_expression --
a < r 2 postfix_expression postfix_expression --
a << r 2 postfix_expression postfix_expression --
a <= r 2 postfix_expression postfix_expression --
a == r 2 postfix_expression postfix_expression --
a > r 2 postfix_expression postfix_expression --
a >= r 2 postfix_expression postfix_expression --
a >> r 2 postfix_expression postfix_expression --
a ? r 2 postfix_expression postfix_expression --
a [ r 2 postfix_expression postfix_expression --
a ^ r 2 postfix_expression postfix_expression --
a ^^ r 2 postfix_expression postfix_expression --
a | r 2 postfix_expression postfix_expression --
a || r 2 postfix_expression postfix_expression --
s
a IDENTIFIER s 801
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a ) r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ; s 803
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 772
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 772
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a ! s 9
a & s 10
a ( s 253
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 260
a CHAR_CONST s 255
a HEX_CONST s 276
a IDENTIFIER s 428
a NUMBER_CONST s 273
a OCTAL_CONST s 265
a STRING_CONST s 262
a additive_expression s 266
a assignment_expression s 773
a binary_and_expression s 277
a binary_or_expression s 254
a binary_xor_expression s 271
a conditional_expression s 256
a equality_expression s 269
a function_call s 248
a logical_and_expression s 275
a logical_or_expression s 251
a logical_xor_expression s 270
a multiplicative_expression s 267
a postfix_expression s 249
a primary_expression s 252
a relational_expression s 261
a shift_expression s 258
a unary_expression s 263
a unary_operator s 268
a ~ s 32
g additive_expression 266
g assignment_expression 773
g binary_and_expression 277
g binary_or_expression 254
g binary_xor_expression 271
g conditional_expression 256
g equality_expression 269
g logical_and_expression 275
g logical_or_expression 251
g logical_xor_expression 270
g multiplicative_expression 267
g postfix_expression 249
g primary_expression 252
g relational_expression 261
g shift_expression 258
g unary_expression 263
g unary_operator 268
s
a ! s 9
a & s 10
a ( s 282
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 288
a CHAR_CONST s 284
a HEX_CONST s 303
a IDENTIFIER s 299
a NUMBER_CONST s 300
a OCTAL_CONST s 292
a STRING_CONST s 290
a additive_expression s 293
a assignment_expression s 777
a binary_and_expression s 304
a binary_or_expression s 283
a binary_xor_expression s 298
a conditional_expression s 285
a equality_expression s 296
a function_call s 278
a logical_and_expression s 302
a logical_or_expression s 280
a logical_xor_expression s 297
a multiplicative_expression s 294
a postfix_expression s 279
a primary_expression s 281
a relational_expression s 289
a shift_expression s 286
a unary_expression s 291
a unary_operator s 295
a ~ s 32
g additive_expression 293
g assignment_expression 777
g binary_and_expression 304
g binary_or_expression 283
g binary_xor_expression 298
g conditional_expression 285
g equality_expression 296
g logical_and_expression 302
g logical_or_expression 280
g logical_xor_expression 297
g multiplicative_expression 294
g postfix_expression 279
g primary_expression 281
g relational_expression 289
g shift_expression 286
g unary_expression 291
g unary_operator 295
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 771
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 771
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a %= r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a &= r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a *= r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a += r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -= r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a /= r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <<= r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a = r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a >>= r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^= r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a |= r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a ; r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a & r 4 type type < template_params >
a * r 4 type type < template_params >
a , r 4 type type < template_params >
a < r 4 type type < template_params >
a > r 4 type type < template_params >
s
a & r 4 type type < template_params >
a * r 4 type type < template_params >
a < r 4 type type < template_params >
a VAR r 4 type type < template_params >
s
a ; r 4 variable_decls type VAR variable_inits ;
s
a block_statements s 784
a { s 30
g block_statements 784
s
a single_variable_decl s 802
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a ) r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a ) r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 778
a } r 0 test_case_statements 
g test_case_statements 778
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 783
a } r 0 switch_case_statements 
g switch_case_statements 783
s
a ) s 840
a , s 363
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a : r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a > r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a , s 526
a ] s 841
s
a , s 526
a ] s 842
s
a , s 526
a ] s 843
s
a , r 5 conditional_expression logical_or_expression ? expression : assignment_expression
a ] r 5 conditional_expression logical_or_expression ? expression : assignment_expression
s
a CASE s 779
a DEFAULT s 782
a test_case_statement s 780
a } s 836
g test_case_statement 780
s
a ( s 839
s
a CASE r 2 test_case_statements test_case_statements test_case_statement
a DEFAULT r 2 test_case_statements test_case_statements test_case_statement
a } r 2 test_case_statements test_case_statements test_case_statement
s
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a __END__ r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 807
a CHAR_CONST s 19
a CONTINUE s 818
a DO s 821
a ELSE s 808
a GOTO s 812
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 809
a INPUT s 820
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 824
a RETURN s 830
a STRING_CONST s 33
a SWITCH s 826
a TEST s 825
a WHILE s 834
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 814
a conditional_expression s 20
a do_while_loop s 816
a else_statement s 810
a equality_expression s 47
a expression s 817
a for s 828
a for_loop s 832
a function_call s 1
a function_decl s 829
a if_statement s 811
a input_statement s 815
a jump_statement s 835
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 822
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 831
a switch_statement s 813
a test_statement s 823
a type s 806
a unary_expression s 36
a unary_operator s 43
a variable_decls s 833
a while_loop s 827
a { s 819
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 814
g conditional_expression 20
g do_while_loop 816
g else_statement 810
g equality_expression 47
g expression 817
g for_loop 832
g function_decl 829
g if_statement 811
g input_statement 815
g jump_statement 835
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 822
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 831
g switch_statement 813
g test_statement 823
g type 806
g unary_expression 36
g unary_operator 43
g variable_decls 833
g while_loop 827
s
a CASE s 786
a switch_case_statement s 787
a } s 838
g switch_case_statement 787
s
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a __END__ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a ! s 9
a & s 10
a ( s 200
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 206
a CHAR_CONST s 202
a HEX_CONST s 221
a IDENTIFIER s 217
a NUMBER_CONST s 218
a OCTAL_CONST s 210
a STRING_CONST s 208
a additive_expression s 211
a assignment_expression s 219
a binary_and_expression s 222
a binary_or_expression s 201
a binary_xor_expression s 216
a conditional_expression s 203
a equality_expression s 214
a expression s 805
a function_call s 196
a logical_and_expression s 220
a logical_or_expression s 198
a logical_xor_expression s 215
a multiplicative_expression s 212
a postfix_expression s 197
a primary_expression s 199
a relational_expression s 207
a shift_expression s 204
a unary_expression s 209
a unary_operator s 213
a ~ s 32
g additive_expression 211
g assignment_expression 219
g binary_and_expression 222
g binary_or_expression 201
g binary_xor_expression 216
g conditional_expression 203
g equality_expression 214
g expression 805
g logical_and_expression 220
g logical_or_expression 198
g logical_xor_expression 215
g multiplicative_expression 212
g postfix_expression 197
g primary_expression 199
g relational_expression 207
g shift_expression 204
g unary_expression 209
g unary_operator 213
s
a CASE r 2 switch_case_statements switch_case_statements switch_case_statement
a } r 2 switch_case_statements switch_case_statements switch_case_statement
s
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a __END__ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a : r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ] r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a != r 3 primary_expression ( expression )
a % r 3 primary_expression ( expression )
a & r 3 primary_expression ( expression )
a && r 3 primary_expression ( expression )
a * r 3 primary_expression ( expression )
a + r 3 primary_expression ( expression )
a ++ r 3 primary_expression ( expression )
a , r 3 primary_expression ( expression )
a - r 3 primary_expression ( expression )
a -- r 3 primary_expression ( expression )
a -> r 3 primary_expression ( expression )
a . r 3 primary_expression ( expression )
a / r 3 primary_expression ( expression )
a < r 3 primary_expression ( expression )
a << r 3 primary_expression ( expression )
a <= r 3 primary_expression ( expression )
a == r 3 primary_expression ( expression )
a > r 3 primary_expression ( expression )
a >= r 3 primary_expression ( expression )
a >> r 3 primary_expression ( expression )
a ? r 3 primary_expression ( expression )
a [ r 3 primary_expression ( expression )
a ^ r 3 primary_expression ( expression )
a ^^ r 3 primary_expression ( expression )
a | r 3 primary_expression ( expression )
a || r 3 primary_expression ( expression )
s
a ; s 844
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 804
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 804
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a ) r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a block_statements s 837
a { s 119
g block_statements 837
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a : r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ] r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression . IDENTIFIER
a % r 3 postfix_expression postfix_expression . IDENTIFIER
a & r 3 postfix_expression postfix_expression . IDENTIFIER
a && r 3 postfix_expression postfix_expression . IDENTIFIER
a * r 3 postfix_expression postfix_expression . IDENTIFIER
a + r 3 postfix_expression postfix_expression . IDENTIFIER
a ++ r 3 postfix_expression postfix_expression . IDENTIFIER
a , r 3 postfix_expression postfix_expression . IDENTIFIER
a - r 3 postfix_expression postfix_expression . IDENTIFIER
a -- r 3 postfix_expression postfix_expression . IDENTIFIER
a -> r 3 postfix_expression postfix_expression . IDENTIFIER
a . r 3 postfix_expression postfix_expression . IDENTIFIER
a / r 3 postfix_expression postfix_expression . IDENTIFIER
a < r 3 postfix_expression postfix_expression . IDENTIFIER
a << r 3 postfix_expression postfix_expression . IDENTIFIER
a <= r 3 postfix_expression postfix_expression . IDENTIFIER
a == r 3 postfix_expression postfix_expression . IDENTIFIER
a > r 3 postfix_expression postfix_expression . IDENTIFIER
a >= r 3 postfix_expression postfix_expression . IDENTIFIER
a >> r 3 postfix_expression postfix_expression . IDENTIFIER
a ? r 3 postfix_expression postfix_expression . IDENTIFIER
a [ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^ r 3 postfix_expression postfix_expression . IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression . IDENTIFIER
a | r 3 postfix_expression postfix_expression . IDENTIFIER
a || r 3 postfix_expression postfix_expression . IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a : r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ] r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a != r 3 postfix_expression postfix_expression -> IDENTIFIER
a % r 3 postfix_expression postfix_expression -> IDENTIFIER
a & r 3 postfix_expression postfix_expression -> IDENTIFIER
a && r 3 postfix_expression postfix_expression -> IDENTIFIER
a * r 3 postfix_expression postfix_expression -> IDENTIFIER
a + r 3 postfix_expression postfix_expression -> IDENTIFIER
a ++ r 3 postfix_expression postfix_expression -> IDENTIFIER
a , r 3 postfix_expression postfix_expression -> IDENTIFIER
a - r 3 postfix_expression postfix_expression -> IDENTIFIER
a -- r 3 postfix_expression postfix_expression -> IDENTIFIER
a -> r 3 postfix_expression postfix_expression -> IDENTIFIER
a . r 3 postfix_expression postfix_expression -> IDENTIFIER
a / r 3 postfix_expression postfix_expression -> IDENTIFIER
a < r 3 postfix_expression postfix_expression -> IDENTIFIER
a << r 3 postfix_expression postfix_expression -> IDENTIFIER
a <= r 3 postfix_expression postfix_expression -> IDENTIFIER
a == r 3 postfix_expression postfix_expression -> IDENTIFIER
a > r 3 postfix_expression postfix_expression -> IDENTIFIER
a >= r 3 postfix_expression postfix_expression -> IDENTIFIER
a >> r 3 postfix_expression postfix_expression -> IDENTIFIER
a ? r 3 postfix_expression postfix_expression -> IDENTIFIER
a [ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a ^^ r 3 postfix_expression postfix_expression -> IDENTIFIER
a | r 3 postfix_expression postfix_expression -> IDENTIFIER
a || r 3 postfix_expression postfix_expression -> IDENTIFIER
s
a ) r 3 func_args func_args , single_variable_decl
a , r 3 func_args func_args , single_variable_decl
s
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a __END__ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ) s 861
a , s 363
s
a , s 521
a : s 862
s
a & s 166
a * s 167
a < s 168
a FUNC s 856
a VAR s 855
s
a ; s 865
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 807
a CHAR_CONST s 19
a CONTINUE s 818
a DO s 821
a ELSE s 808
a GOTO s 812
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 809
a INPUT s 820
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 824
a RETURN s 830
a STRING_CONST s 33
a SWITCH s 826
a TEST s 825
a WHILE s 834
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 814
a conditional_expression s 20
a do_while_loop s 816
a else_statement s 810
a equality_expression s 47
a expression s 817
a for s 828
a for_loop s 832
a function_call s 1
a function_decl s 829
a if_statement s 811
a input_statement s 815
a jump_statement s 835
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 822
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 848
a switch_statement s 813
a test_statement s 823
a type s 806
a unary_expression s 36
a unary_operator s 43
a variable_decls s 833
a while_loop s 827
a { s 819
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 814
g conditional_expression 20
g do_while_loop 816
g else_statement 810
g equality_expression 47
g expression 817
g for_loop 832
g function_decl 829
g if_statement 811
g input_statement 815
g jump_statement 835
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 822
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 848
g switch_statement 813
g test_statement 823
g type 806
g unary_expression 36
g unary_operator 43
g variable_decls 833
g while_loop 827
s
a ( s 858
s
a CASE r 1 statement else_statement
a DEFAULT r 1 statement else_statement
a } r 1 statement else_statement
s
a CASE r 1 statement if_statement
a DEFAULT r 1 statement if_statement
a } r 1 statement if_statement
s
a IDENTIFIER s 854
s
a CASE r 1 statement switch_statement
a DEFAULT r 1 statement switch_statement
a } r 1 statement switch_statement
s
a CASE r 1 statement block_statements
a DEFAULT r 1 statement block_statements
a } r 1 statement block_statements
s
a CASE r 1 statement input_statement
a DEFAULT r 1 statement input_statement
a } r 1 statement input_statement
s
a CASE r 1 statement do_while_loop
a DEFAULT r 1 statement do_while_loop
a } r 1 statement do_while_loop
s
a , s 179
a ; s 863
s
a ; s 859
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 132
a statement_list s 115
a statements s 846
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a } r 0 statements 
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 132
g statement_list 115
g statements 846
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 852
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 852
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a block_statements s 853
a { s 148
g block_statements 853
s
a CASE r 1 statement output_statement
a DEFAULT r 1 statement output_statement
a } r 1 statement output_statement
s
a CASE r 1 statement test_statement
a DEFAULT r 1 statement test_statement
a } r 1 statement test_statement
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 851
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 851
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ( s 860
s
a ( s 864
s
a CASE r 1 statement while_loop
a DEFAULT r 1 statement while_loop
a } r 1 statement while_loop
s
a ( s 857
s
a CASE r 1 statement function_decl
a DEFAULT r 1 statement function_decl
a } r 1 statement function_decl
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a ; s 849
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 850
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 850
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a CASE r 2 test_case_statement DEFAULT statement
a DEFAULT r 2 test_case_statement DEFAULT statement
a } r 2 test_case_statement DEFAULT statement
s
a CASE r 1 statement for_loop
a DEFAULT r 1 statement for_loop
a } r 1 statement for_loop
s
a CASE r 1 statement variable_decls
a DEFAULT r 1 statement variable_decls
a } r 1 statement variable_decls
s
a ( s 866
s
a CASE r 1 statement jump_statement
a DEFAULT r 1 statement jump_statement
a } r 1 statement jump_statement
s
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 845
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 845
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 5
a CHAR_CONST s 19
a CONTINUE s 29
a DO s 35
a ELSE s 6
a GOTO s 17
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 7
a INPUT s 34
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 44
a RETURN s 54
a STRING_CONST s 33
a SWITCH s 46
a TEST s 45
a WHILE s 63
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 22
a conditional_expression s 20
a do_while_loop s 26
a else_statement s 15
a equality_expression s 47
a expression s 27
a for s 50
a for_loop s 56
a function_call s 1
a function_decl s 53
a if_statement s 16
a input_statement s 23
a jump_statement s 65
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 37
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 847
a switch_statement s 18
a test_statement s 38
a type s 3
a unary_expression s 36
a unary_operator s 43
a variable_decls s 60
a while_loop s 48
a { s 30
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 22
g conditional_expression 20
g do_while_loop 26
g else_statement 15
g equality_expression 47
g expression 27
g for_loop 56
g function_decl 53
g if_statement 16
g input_statement 23
g jump_statement 65
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 37
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 847
g switch_statement 18
g test_statement 38
g type 3
g unary_expression 36
g unary_operator 43
g variable_decls 60
g while_loop 48
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a : r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ] r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a != r 4 postfix_expression postfix_expression [ expression ]
a % r 4 postfix_expression postfix_expression [ expression ]
a & r 4 postfix_expression postfix_expression [ expression ]
a && r 4 postfix_expression postfix_expression [ expression ]
a * r 4 postfix_expression postfix_expression [ expression ]
a + r 4 postfix_expression postfix_expression [ expression ]
a ++ r 4 postfix_expression postfix_expression [ expression ]
a , r 4 postfix_expression postfix_expression [ expression ]
a - r 4 postfix_expression postfix_expression [ expression ]
a -- r 4 postfix_expression postfix_expression [ expression ]
a -> r 4 postfix_expression postfix_expression [ expression ]
a . r 4 postfix_expression postfix_expression [ expression ]
a / r 4 postfix_expression postfix_expression [ expression ]
a < r 4 postfix_expression postfix_expression [ expression ]
a << r 4 postfix_expression postfix_expression [ expression ]
a <= r 4 postfix_expression postfix_expression [ expression ]
a == r 4 postfix_expression postfix_expression [ expression ]
a > r 4 postfix_expression postfix_expression [ expression ]
a >= r 4 postfix_expression postfix_expression [ expression ]
a >> r 4 postfix_expression postfix_expression [ expression ]
a ? r 4 postfix_expression postfix_expression [ expression ]
a [ r 4 postfix_expression postfix_expression [ expression ]
a ^ r 4 postfix_expression postfix_expression [ expression ]
a ^^ r 4 postfix_expression postfix_expression [ expression ]
a | r 4 postfix_expression postfix_expression [ expression ]
a || r 4 postfix_expression postfix_expression [ expression ]
s
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ) s 906
a , s 363
s
a } s 913
s
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a __END__ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a CASE r 2 else_statement ELSE statement
a DEFAULT r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
s
a CASE r 2 jump_statement RETURN ;
a DEFAULT r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
s
a , s 179
a ; s 907
s
a , s 179
a ; s 908
s
a , s 179
a ; s 909
s
a WHILE s 912
s
a ; s 910
s
a IDENTIFIER s 333
a variable_inits s 905
a variable_name_and_assign s 331
g variable_inits 905
g variable_name_and_assign 331
s
a IDENTIFIER s 911
s
a IDENTIFIER s 329
a type s 328
a variable_decls s 904
g type 328
g variable_decls 904
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 867
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 867
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a CASE r 2 jump_statement CONTINUE ;
a DEFAULT r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 868
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 868
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 903
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 903
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 872
a CASE r 0 statements 
a CHAR_CONST s 19
a CONTINUE s 884
a DO s 887
a ELSE s 873
a GOTO s 877
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 874
a INPUT s 886
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 890
a RETURN s 897
a STRING_CONST s 33
a SWITCH s 892
a TEST s 891
a WHILE s 901
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 879
a conditional_expression s 20
a do_while_loop s 882
a else_statement s 875
a equality_expression s 47
a expression s 883
a for s 894
a for_loop s 899
a function_call s 1
a function_decl s 896
a if_statement s 876
a input_statement s 880
a jump_statement s 902
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 888
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 898
a statement_list s 881
a statements s 895
a switch_statement s 878
a test_statement s 889
a type s 871
a unary_expression s 36
a unary_operator s 43
a variable_decls s 900
a while_loop s 893
a { s 885
a } r 0 statements 
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 879
g conditional_expression 20
g do_while_loop 882
g else_statement 875
g equality_expression 47
g expression 883
g for_loop 899
g function_decl 896
g if_statement 876
g input_statement 880
g jump_statement 902
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 888
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 898
g statement_list 881
g statements 895
g switch_statement 878
g test_statement 889
g type 871
g unary_expression 36
g unary_operator 43
g variable_decls 900
g while_loop 893
s
a CASE r 2 statement expression ;
a DEFAULT r 2 statement expression ;
a } r 2 statement expression ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 869
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 869
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a CASE r 2 jump_statement BREAK ;
a DEFAULT r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 870
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 870
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ) s 930
a , s 363
s
a ) s 931
a , s 363
s
a ) s 932
a , s 363
s
a ) s 933
a , s 363
s
a & s 166
a * s 167
a < s 168
a FUNC s 925
a VAR s 924
s
a ; s 936
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 872
a CHAR_CONST s 19
a CONTINUE s 884
a DO s 887
a ELSE s 873
a GOTO s 877
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 874
a INPUT s 886
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 890
a RETURN s 897
a STRING_CONST s 33
a SWITCH s 892
a TEST s 891
a WHILE s 901
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 879
a conditional_expression s 20
a do_while_loop s 882
a else_statement s 875
a equality_expression s 47
a expression s 883
a for s 894
a for_loop s 899
a function_call s 1
a function_decl s 896
a if_statement s 876
a input_statement s 880
a jump_statement s 902
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 888
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 916
a switch_statement s 878
a test_statement s 889
a type s 871
a unary_expression s 36
a unary_operator s 43
a variable_decls s 900
a while_loop s 893
a { s 885
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 879
g conditional_expression 20
g do_while_loop 882
g else_statement 875
g equality_expression 47
g expression 883
g for_loop 899
g function_decl 896
g if_statement 876
g input_statement 880
g jump_statement 902
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 888
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 916
g switch_statement 878
g test_statement 889
g type 871
g unary_expression 36
g unary_operator 43
g variable_decls 900
g while_loop 893
s
a ( s 927
s
a ! r 1 statement else_statement
a & r 1 statement else_statement
a ( r 1 statement else_statement
a * r 1 statement else_statement
a ++ r 1 statement else_statement
a - r 1 statement else_statement
a -- r 1 statement else_statement
a BINARY_CONST r 1 statement else_statement
a BREAK r 1 statement else_statement
a CASE r 1 statement else_statement
a CHAR_CONST r 1 statement else_statement
a CONTINUE r 1 statement else_statement
a DO r 1 statement else_statement
a ELSE r 1 statement else_statement
a GOTO r 1 statement else_statement
a HEX_CONST r 1 statement else_statement
a IDENTIFIER r 1 statement else_statement
a IF r 1 statement else_statement
a INPUT r 1 statement else_statement
a NUMBER_CONST r 1 statement else_statement
a OCTAL_CONST r 1 statement else_statement
a OUTPUT r 1 statement else_statement
a RETURN r 1 statement else_statement
a STRING_CONST r 1 statement else_statement
a SWITCH r 1 statement else_statement
a TEST r 1 statement else_statement
a WHILE r 1 statement else_statement
a for r 1 statement else_statement
a function_call r 1 statement else_statement
a { r 1 statement else_statement
a } r 1 statement else_statement
a ~ r 1 statement else_statement
s
a ! r 1 statement if_statement
a & r 1 statement if_statement
a ( r 1 statement if_statement
a * r 1 statement if_statement
a ++ r 1 statement if_statement
a - r 1 statement if_statement
a -- r 1 statement if_statement
a BINARY_CONST r 1 statement if_statement
a BREAK r 1 statement if_statement
a CASE r 1 statement if_statement
a CHAR_CONST r 1 statement if_statement
a CONTINUE r 1 statement if_statement
a DO r 1 statement if_statement
a ELSE r 1 statement if_statement
a GOTO r 1 statement if_statement
a HEX_CONST r 1 statement if_statement
a IDENTIFIER r 1 statement if_statement
a IF r 1 statement if_statement
a INPUT r 1 statement if_statement
a NUMBER_CONST r 1 statement if_statement
a OCTAL_CONST r 1 statement if_statement
a OUTPUT r 1 statement if_statement
a RETURN r 1 statement if_statement
a STRING_CONST r 1 statement if_statement
a SWITCH r 1 statement if_statement
a TEST r 1 statement if_statement
a WHILE r 1 statement if_statement
a for r 1 statement if_statement
a function_call r 1 statement if_statement
a { r 1 statement if_statement
a } r 1 statement if_statement
a ~ r 1 statement if_statement
s
a IDENTIFIER s 923
s
a ! r 1 statement switch_statement
a & r 1 statement switch_statement
a ( r 1 statement switch_statement
a * r 1 statement switch_statement
a ++ r 1 statement switch_statement
a - r 1 statement switch_statement
a -- r 1 statement switch_statement
a BINARY_CONST r 1 statement switch_statement
a BREAK r 1 statement switch_statement
a CASE r 1 statement switch_statement
a CHAR_CONST r 1 statement switch_statement
a CONTINUE r 1 statement switch_statement
a DO r 1 statement switch_statement
a ELSE r 1 statement switch_statement
a GOTO r 1 statement switch_statement
a HEX_CONST r 1 statement switch_statement
a IDENTIFIER r 1 statement switch_statement
a IF r 1 statement switch_statement
a INPUT r 1 statement switch_statement
a NUMBER_CONST r 1 statement switch_statement
a OCTAL_CONST r 1 statement switch_statement
a OUTPUT r 1 statement switch_statement
a RETURN r 1 statement switch_statement
a STRING_CONST r 1 statement switch_statement
a SWITCH r 1 statement switch_statement
a TEST r 1 statement switch_statement
a WHILE r 1 statement switch_statement
a for r 1 statement switch_statement
a function_call r 1 statement switch_statement
a { r 1 statement switch_statement
a } r 1 statement switch_statement
a ~ r 1 statement switch_statement
s
a ! r 1 statement block_statements
a & r 1 statement block_statements
a ( r 1 statement block_statements
a * r 1 statement block_statements
a ++ r 1 statement block_statements
a - r 1 statement block_statements
a -- r 1 statement block_statements
a BINARY_CONST r 1 statement block_statements
a BREAK r 1 statement block_statements
a CASE r 1 statement block_statements
a CHAR_CONST r 1 statement block_statements
a CONTINUE r 1 statement block_statements
a DO r 1 statement block_statements
a ELSE r 1 statement block_statements
a GOTO r 1 statement block_statements
a HEX_CONST r 1 statement block_statements
a IDENTIFIER r 1 statement block_statements
a IF r 1 statement block_statements
a INPUT r 1 statement block_statements
a NUMBER_CONST r 1 statement block_statements
a OCTAL_CONST r 1 statement block_statements
a OUTPUT r 1 statement block_statements
a RETURN r 1 statement block_statements
a STRING_CONST r 1 statement block_statements
a SWITCH r 1 statement block_statements
a TEST r 1 statement block_statements
a WHILE r 1 statement block_statements
a for r 1 statement block_statements
a function_call r 1 statement block_statements
a { r 1 statement block_statements
a } r 1 statement block_statements
a ~ r 1 statement block_statements
s
a ! r 1 statement input_statement
a & r 1 statement input_statement
a ( r 1 statement input_statement
a * r 1 statement input_statement
a ++ r 1 statement input_statement
a - r 1 statement input_statement
a -- r 1 statement input_statement
a BINARY_CONST r 1 statement input_statement
a BREAK r 1 statement input_statement
a CASE r 1 statement input_statement
a CHAR_CONST r 1 statement input_statement
a CONTINUE r 1 statement input_statement
a DO r 1 statement input_statement
a ELSE r 1 statement input_statement
a GOTO r 1 statement input_statement
a HEX_CONST r 1 statement input_statement
a IDENTIFIER r 1 statement input_statement
a IF r 1 statement input_statement
a INPUT r 1 statement input_statement
a NUMBER_CONST r 1 statement input_statement
a OCTAL_CONST r 1 statement input_statement
a OUTPUT r 1 statement input_statement
a RETURN r 1 statement input_statement
a STRING_CONST r 1 statement input_statement
a SWITCH r 1 statement input_statement
a TEST r 1 statement input_statement
a WHILE r 1 statement input_statement
a for r 1 statement input_statement
a function_call r 1 statement input_statement
a { r 1 statement input_statement
a } r 1 statement input_statement
a ~ r 1 statement input_statement
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 872
a CASE r 1 statements statement_list
a CHAR_CONST s 19
a CONTINUE s 884
a DO s 887
a ELSE s 873
a GOTO s 877
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 874
a INPUT s 886
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 890
a RETURN s 897
a STRING_CONST s 33
a SWITCH s 892
a TEST s 891
a WHILE s 901
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 879
a conditional_expression s 20
a do_while_loop s 882
a else_statement s 875
a equality_expression s 47
a expression s 883
a for s 894
a for_loop s 899
a function_call s 1
a function_decl s 896
a if_statement s 876
a input_statement s 880
a jump_statement s 902
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 888
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 915
a switch_statement s 878
a test_statement s 889
a type s 871
a unary_expression s 36
a unary_operator s 43
a variable_decls s 900
a while_loop s 893
a { s 885
a } r 1 statements statement_list
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 879
g conditional_expression 20
g do_while_loop 882
g else_statement 875
g equality_expression 47
g expression 883
g for_loop 899
g function_decl 896
g if_statement 876
g input_statement 880
g jump_statement 902
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 888
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 915
g switch_statement 878
g test_statement 889
g type 871
g unary_expression 36
g unary_operator 43
g variable_decls 900
g while_loop 893
s
a ! r 1 statement do_while_loop
a & r 1 statement do_while_loop
a ( r 1 statement do_while_loop
a * r 1 statement do_while_loop
a ++ r 1 statement do_while_loop
a - r 1 statement do_while_loop
a -- r 1 statement do_while_loop
a BINARY_CONST r 1 statement do_while_loop
a BREAK r 1 statement do_while_loop
a CASE r 1 statement do_while_loop
a CHAR_CONST r 1 statement do_while_loop
a CONTINUE r 1 statement do_while_loop
a DO r 1 statement do_while_loop
a ELSE r 1 statement do_while_loop
a GOTO r 1 statement do_while_loop
a HEX_CONST r 1 statement do_while_loop
a IDENTIFIER r 1 statement do_while_loop
a IF r 1 statement do_while_loop
a INPUT r 1 statement do_while_loop
a NUMBER_CONST r 1 statement do_while_loop
a OCTAL_CONST r 1 statement do_while_loop
a OUTPUT r 1 statement do_while_loop
a RETURN r 1 statement do_while_loop
a STRING_CONST r 1 statement do_while_loop
a SWITCH r 1 statement do_while_loop
a TEST r 1 statement do_while_loop
a WHILE r 1 statement do_while_loop
a for r 1 statement do_while_loop
a function_call r 1 statement do_while_loop
a { r 1 statement do_while_loop
a } r 1 statement do_while_loop
a ~ r 1 statement do_while_loop
s
a , s 179
a ; s 934
s
a ; s 928
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 106
a CHAR_CONST s 19
a CONTINUE s 118
a DO s 121
a ELSE s 107
a GOTO s 111
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 108
a INPUT s 120
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 124
a RETURN s 131
a STRING_CONST s 33
a SWITCH s 126
a TEST s 125
a WHILE s 135
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 113
a conditional_expression s 20
a do_while_loop s 116
a else_statement s 109
a equality_expression s 47
a expression s 117
a for s 128
a for_loop s 133
a function_call s 1
a function_decl s 130
a if_statement s 110
a input_statement s 114
a jump_statement s 136
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 122
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 132
a statement_list s 115
a statements s 914
a switch_statement s 112
a test_statement s 123
a type s 105
a unary_expression s 36
a unary_operator s 43
a variable_decls s 134
a while_loop s 127
a { s 119
a } r 0 statements 
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 113
g conditional_expression 20
g do_while_loop 116
g else_statement 109
g equality_expression 47
g expression 117
g for_loop 133
g function_decl 130
g if_statement 110
g input_statement 114
g jump_statement 136
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 122
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 132
g statement_list 115
g statements 914
g switch_statement 112
g test_statement 123
g type 105
g unary_expression 36
g unary_operator 43
g variable_decls 134
g while_loop 127
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 921
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 921
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a block_statements s 922
a { s 148
g block_statements 922
s
a ! r 1 statement output_statement
a & r 1 statement output_statement
a ( r 1 statement output_statement
a * r 1 statement output_statement
a ++ r 1 statement output_statement
a - r 1 statement output_statement
a -- r 1 statement output_statement
a BINARY_CONST r 1 statement output_statement
a BREAK r 1 statement output_statement
a CASE r 1 statement output_statement
a CHAR_CONST r 1 statement output_statement
a CONTINUE r 1 statement output_statement
a DO r 1 statement output_statement
a ELSE r 1 statement output_statement
a GOTO r 1 statement output_statement
a HEX_CONST r 1 statement output_statement
a IDENTIFIER r 1 statement output_statement
a IF r 1 statement output_statement
a INPUT r 1 statement output_statement
a NUMBER_CONST r 1 statement output_statement
a OCTAL_CONST r 1 statement output_statement
a OUTPUT r 1 statement output_statement
a RETURN r 1 statement output_statement
a STRING_CONST r 1 statement output_statement
a SWITCH r 1 statement output_statement
a TEST r 1 statement output_statement
a WHILE r 1 statement output_statement
a for r 1 statement output_statement
a function_call r 1 statement output_statement
a { r 1 statement output_statement
a } r 1 statement output_statement
a ~ r 1 statement output_statement
s
a ! r 1 statement test_statement
a & r 1 statement test_statement
a ( r 1 statement test_statement
a * r 1 statement test_statement
a ++ r 1 statement test_statement
a - r 1 statement test_statement
a -- r 1 statement test_statement
a BINARY_CONST r 1 statement test_statement
a BREAK r 1 statement test_statement
a CASE r 1 statement test_statement
a CHAR_CONST r 1 statement test_statement
a CONTINUE r 1 statement test_statement
a DO r 1 statement test_statement
a ELSE r 1 statement test_statement
a GOTO r 1 statement test_statement
a HEX_CONST r 1 statement test_statement
a IDENTIFIER r 1 statement test_statement
a IF r 1 statement test_statement
a INPUT r 1 statement test_statement
a NUMBER_CONST r 1 statement test_statement
a OCTAL_CONST r 1 statement test_statement
a OUTPUT r 1 statement test_statement
a RETURN r 1 statement test_statement
a STRING_CONST r 1 statement test_statement
a SWITCH r 1 statement test_statement
a TEST r 1 statement test_statement
a WHILE r 1 statement test_statement
a for r 1 statement test_statement
a function_call r 1 statement test_statement
a { r 1 statement test_statement
a } r 1 statement test_statement
a ~ r 1 statement test_statement
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 920
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 920
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ( s 929
s
a ( s 935
s
a ! r 1 statement while_loop
a & r 1 statement while_loop
a ( r 1 statement while_loop
a * r 1 statement while_loop
a ++ r 1 statement while_loop
a - r 1 statement while_loop
a -- r 1 statement while_loop
a BINARY_CONST r 1 statement while_loop
a BREAK r 1 statement while_loop
a CASE r 1 statement while_loop
a CHAR_CONST r 1 statement while_loop
a CONTINUE r 1 statement while_loop
a DO r 1 statement while_loop
a ELSE r 1 statement while_loop
a GOTO r 1 statement while_loop
a HEX_CONST r 1 statement while_loop
a IDENTIFIER r 1 statement while_loop
a IF r 1 statement while_loop
a INPUT r 1 statement while_loop
a NUMBER_CONST r 1 statement while_loop
a OCTAL_CONST r 1 statement while_loop
a OUTPUT r 1 statement while_loop
a RETURN r 1 statement while_loop
a STRING_CONST r 1 statement while_loop
a SWITCH r 1 statement while_loop
a TEST r 1 statement while_loop
a WHILE r 1 statement while_loop
a for r 1 statement while_loop
a function_call r 1 statement while_loop
a { r 1 statement while_loop
a } r 1 statement while_loop
a ~ r 1 statement while_loop
s
a ( s 926
s
a CASE r 4 switch_case_statement CASE expression : statements
a } r 4 switch_case_statement CASE expression : statements
s
a ! r 1 statement function_decl
a & r 1 statement function_decl
a ( r 1 statement function_decl
a * r 1 statement function_decl
a ++ r 1 statement function_decl
a - r 1 statement function_decl
a -- r 1 statement function_decl
a BINARY_CONST r 1 statement function_decl
a BREAK r 1 statement function_decl
a CASE r 1 statement function_decl
a CHAR_CONST r 1 statement function_decl
a CONTINUE r 1 statement function_decl
a DO r 1 statement function_decl
a ELSE r 1 statement function_decl
a GOTO r 1 statement function_decl
a HEX_CONST r 1 statement function_decl
a IDENTIFIER r 1 statement function_decl
a IF r 1 statement function_decl
a INPUT r 1 statement function_decl
a NUMBER_CONST r 1 statement function_decl
a OCTAL_CONST r 1 statement function_decl
a OUTPUT r 1 statement function_decl
a RETURN r 1 statement function_decl
a STRING_CONST r 1 statement function_decl
a SWITCH r 1 statement function_decl
a TEST r 1 statement function_decl
a WHILE r 1 statement function_decl
a for r 1 statement function_decl
a function_call r 1 statement function_decl
a { r 1 statement function_decl
a } r 1 statement function_decl
a ~ r 1 statement function_decl
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a ; s 918
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 919
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 919
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! r 1 statement_list statement
a & r 1 statement_list statement
a ( r 1 statement_list statement
a * r 1 statement_list statement
a ++ r 1 statement_list statement
a - r 1 statement_list statement
a -- r 1 statement_list statement
a BINARY_CONST r 1 statement_list statement
a BREAK r 1 statement_list statement
a CASE r 1 statement_list statement
a CHAR_CONST r 1 statement_list statement
a CONTINUE r 1 statement_list statement
a DO r 1 statement_list statement
a ELSE r 1 statement_list statement
a GOTO r 1 statement_list statement
a HEX_CONST r 1 statement_list statement
a IDENTIFIER r 1 statement_list statement
a IF r 1 statement_list statement
a INPUT r 1 statement_list statement
a NUMBER_CONST r 1 statement_list statement
a OCTAL_CONST r 1 statement_list statement
a OUTPUT r 1 statement_list statement
a RETURN r 1 statement_list statement
a STRING_CONST r 1 statement_list statement
a SWITCH r 1 statement_list statement
a TEST r 1 statement_list statement
a WHILE r 1 statement_list statement
a for r 1 statement_list statement
a function_call r 1 statement_list statement
a { r 1 statement_list statement
a } r 1 statement_list statement
a ~ r 1 statement_list statement
s
a ! r 1 statement for_loop
a & r 1 statement for_loop
a ( r 1 statement for_loop
a * r 1 statement for_loop
a ++ r 1 statement for_loop
a - r 1 statement for_loop
a -- r 1 statement for_loop
a BINARY_CONST r 1 statement for_loop
a BREAK r 1 statement for_loop
a CASE r 1 statement for_loop
a CHAR_CONST r 1 statement for_loop
a CONTINUE r 1 statement for_loop
a DO r 1 statement for_loop
a ELSE r 1 statement for_loop
a GOTO r 1 statement for_loop
a HEX_CONST r 1 statement for_loop
a IDENTIFIER r 1 statement for_loop
a IF r 1 statement for_loop
a INPUT r 1 statement for_loop
a NUMBER_CONST r 1 statement for_loop
a OCTAL_CONST r 1 statement for_loop
a OUTPUT r 1 statement for_loop
a RETURN r 1 statement for_loop
a STRING_CONST r 1 statement for_loop
a SWITCH r 1 statement for_loop
a TEST r 1 statement for_loop
a WHILE r 1 statement for_loop
a for r 1 statement for_loop
a function_call r 1 statement for_loop
a { r 1 statement for_loop
a } r 1 statement for_loop
a ~ r 1 statement for_loop
s
a ! r 1 statement variable_decls
a & r 1 statement variable_decls
a ( r 1 statement variable_decls
a * r 1 statement variable_decls
a ++ r 1 statement variable_decls
a - r 1 statement variable_decls
a -- r 1 statement variable_decls
a BINARY_CONST r 1 statement variable_decls
a BREAK r 1 statement variable_decls
a CASE r 1 statement variable_decls
a CHAR_CONST r 1 statement variable_decls
a CONTINUE r 1 statement variable_decls
a DO r 1 statement variable_decls
a ELSE r 1 statement variable_decls
a GOTO r 1 statement variable_decls
a HEX_CONST r 1 statement variable_decls
a IDENTIFIER r 1 statement variable_decls
a IF r 1 statement variable_decls
a INPUT r 1 statement variable_decls
a NUMBER_CONST r 1 statement variable_decls
a OCTAL_CONST r 1 statement variable_decls
a OUTPUT r 1 statement variable_decls
a RETURN r 1 statement variable_decls
a STRING_CONST r 1 statement variable_decls
a SWITCH r 1 statement variable_decls
a TEST r 1 statement variable_decls
a WHILE r 1 statement variable_decls
a for r 1 statement variable_decls
a function_call r 1 statement variable_decls
a { r 1 statement variable_decls
a } r 1 statement variable_decls
a ~ r 1 statement variable_decls
s
a ( s 938
s
a ! r 1 statement jump_statement
a & r 1 statement jump_statement
a ( r 1 statement jump_statement
a * r 1 statement jump_statement
a ++ r 1 statement jump_statement
a - r 1 statement jump_statement
a -- r 1 statement jump_statement
a BINARY_CONST r 1 statement jump_statement
a BREAK r 1 statement jump_statement
a CASE r 1 statement jump_statement
a CHAR_CONST r 1 statement jump_statement
a CONTINUE r 1 statement jump_statement
a DO r 1 statement jump_statement
a ELSE r 1 statement jump_statement
a GOTO r 1 statement jump_statement
a HEX_CONST r 1 statement jump_statement
a IDENTIFIER r 1 statement jump_statement
a IF r 1 statement jump_statement
a INPUT r 1 statement jump_statement
a NUMBER_CONST r 1 statement jump_statement
a OCTAL_CONST r 1 statement jump_statement
a OUTPUT r 1 statement jump_statement
a RETURN r 1 statement jump_statement
a STRING_CONST r 1 statement jump_statement
a SWITCH r 1 statement jump_statement
a TEST r 1 statement jump_statement
a WHILE r 1 statement jump_statement
a for r 1 statement jump_statement
a function_call r 1 statement jump_statement
a { r 1 statement jump_statement
a } r 1 statement jump_statement
a ~ r 1 statement jump_statement
s
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ; s 940
s
a , s 547
a ; s 937
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 807
a CHAR_CONST s 19
a CONTINUE s 818
a DO s 821
a ELSE s 808
a GOTO s 812
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 809
a INPUT s 820
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 824
a RETURN s 830
a STRING_CONST s 33
a SWITCH s 826
a TEST s 825
a WHILE s 834
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 814
a conditional_expression s 20
a do_while_loop s 816
a else_statement s 810
a equality_expression s 47
a expression s 817
a for s 828
a for_loop s 832
a function_call s 1
a function_decl s 829
a if_statement s 811
a input_statement s 815
a jump_statement s 835
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 822
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 917
a switch_statement s 813
a test_statement s 823
a type s 806
a unary_expression s 36
a unary_operator s 43
a variable_decls s 833
a while_loop s 827
a { s 819
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 814
g conditional_expression 20
g do_while_loop 816
g else_statement 810
g equality_expression 47
g expression 817
g for_loop 832
g function_decl 829
g if_statement 811
g input_statement 815
g jump_statement 835
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 822
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 917
g switch_statement 813
g test_statement 823
g type 806
g unary_expression 36
g unary_operator 43
g variable_decls 833
g while_loop 827
s
a CASE r 3 jump_statement RETURN expression ;
a DEFAULT r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
s
a CASE r 3 output_statement OUTPUT expression ;
a DEFAULT r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
s
a CASE r 3 input_statement INPUT expression ;
a DEFAULT r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
s
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a DEFAULT r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 939
s
a ( s 941
s
a CASE r 3 block_statements { statements }
a DEFAULT r 3 block_statements { statements }
a } r 3 block_statements { statements }
s
a } s 960
s
a ! r 2 statement_list statement_list statement
a & r 2 statement_list statement_list statement
a ( r 2 statement_list statement_list statement
a * r 2 statement_list statement_list statement
a ++ r 2 statement_list statement_list statement
a - r 2 statement_list statement_list statement
a -- r 2 statement_list statement_list statement
a BINARY_CONST r 2 statement_list statement_list statement
a BREAK r 2 statement_list statement_list statement
a CASE r 2 statement_list statement_list statement
a CHAR_CONST r 2 statement_list statement_list statement
a CONTINUE r 2 statement_list statement_list statement
a DO r 2 statement_list statement_list statement
a ELSE r 2 statement_list statement_list statement
a GOTO r 2 statement_list statement_list statement
a HEX_CONST r 2 statement_list statement_list statement
a IDENTIFIER r 2 statement_list statement_list statement
a IF r 2 statement_list statement_list statement
a INPUT r 2 statement_list statement_list statement
a NUMBER_CONST r 2 statement_list statement_list statement
a OCTAL_CONST r 2 statement_list statement_list statement
a OUTPUT r 2 statement_list statement_list statement
a RETURN r 2 statement_list statement_list statement
a STRING_CONST r 2 statement_list statement_list statement
a SWITCH r 2 statement_list statement_list statement
a TEST r 2 statement_list statement_list statement
a WHILE r 2 statement_list statement_list statement
a for r 2 statement_list statement_list statement
a function_call r 2 statement_list statement_list statement
a { r 2 statement_list statement_list statement
a } r 2 statement_list statement_list statement
a ~ r 2 statement_list statement_list statement
s
a ! r 2 else_statement ELSE statement
a & r 2 else_statement ELSE statement
a ( r 2 else_statement ELSE statement
a * r 2 else_statement ELSE statement
a ++ r 2 else_statement ELSE statement
a - r 2 else_statement ELSE statement
a -- r 2 else_statement ELSE statement
a BINARY_CONST r 2 else_statement ELSE statement
a BREAK r 2 else_statement ELSE statement
a CASE r 2 else_statement ELSE statement
a CHAR_CONST r 2 else_statement ELSE statement
a CONTINUE r 2 else_statement ELSE statement
a DO r 2 else_statement ELSE statement
a ELSE r 2 else_statement ELSE statement
a GOTO r 2 else_statement ELSE statement
a HEX_CONST r 2 else_statement ELSE statement
a IDENTIFIER r 2 else_statement ELSE statement
a IF r 2 else_statement ELSE statement
a INPUT r 2 else_statement ELSE statement
a NUMBER_CONST r 2 else_statement ELSE statement
a OCTAL_CONST r 2 else_statement ELSE statement
a OUTPUT r 2 else_statement ELSE statement
a RETURN r 2 else_statement ELSE statement
a STRING_CONST r 2 else_statement ELSE statement
a SWITCH r 2 else_statement ELSE statement
a TEST r 2 else_statement ELSE statement
a WHILE r 2 else_statement ELSE statement
a for r 2 else_statement ELSE statement
a function_call r 2 else_statement ELSE statement
a { r 2 else_statement ELSE statement
a } r 2 else_statement ELSE statement
a ~ r 2 else_statement ELSE statement
s
a CASE r 5 test_case_statement CASE ( expression ) statement
a DEFAULT r 5 test_case_statement CASE ( expression ) statement
a } r 5 test_case_statement CASE ( expression ) statement
s
a ! r 2 jump_statement RETURN ;
a & r 2 jump_statement RETURN ;
a ( r 2 jump_statement RETURN ;
a * r 2 jump_statement RETURN ;
a ++ r 2 jump_statement RETURN ;
a - r 2 jump_statement RETURN ;
a -- r 2 jump_statement RETURN ;
a BINARY_CONST r 2 jump_statement RETURN ;
a BREAK r 2 jump_statement RETURN ;
a CASE r 2 jump_statement RETURN ;
a CHAR_CONST r 2 jump_statement RETURN ;
a CONTINUE r 2 jump_statement RETURN ;
a DO r 2 jump_statement RETURN ;
a ELSE r 2 jump_statement RETURN ;
a GOTO r 2 jump_statement RETURN ;
a HEX_CONST r 2 jump_statement RETURN ;
a IDENTIFIER r 2 jump_statement RETURN ;
a IF r 2 jump_statement RETURN ;
a INPUT r 2 jump_statement RETURN ;
a NUMBER_CONST r 2 jump_statement RETURN ;
a OCTAL_CONST r 2 jump_statement RETURN ;
a OUTPUT r 2 jump_statement RETURN ;
a RETURN r 2 jump_statement RETURN ;
a STRING_CONST r 2 jump_statement RETURN ;
a SWITCH r 2 jump_statement RETURN ;
a TEST r 2 jump_statement RETURN ;
a WHILE r 2 jump_statement RETURN ;
a for r 2 jump_statement RETURN ;
a function_call r 2 jump_statement RETURN ;
a { r 2 jump_statement RETURN ;
a } r 2 jump_statement RETURN ;
a ~ r 2 jump_statement RETURN ;
s
a , s 179
a ; s 954
s
a , s 179
a ; s 955
s
a , s 179
a ; s 956
s
a WHILE s 959
s
a ; s 957
s
a IDENTIFIER s 333
a variable_inits s 951
a variable_name_and_assign s 331
g variable_inits 951
g variable_name_and_assign 331
s
a IDENTIFIER s 958
s
a IDENTIFIER s 329
a type s 328
a variable_decls s 950
g type 328
g variable_decls 950
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 942
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 942
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! r 2 jump_statement CONTINUE ;
a & r 2 jump_statement CONTINUE ;
a ( r 2 jump_statement CONTINUE ;
a * r 2 jump_statement CONTINUE ;
a ++ r 2 jump_statement CONTINUE ;
a - r 2 jump_statement CONTINUE ;
a -- r 2 jump_statement CONTINUE ;
a BINARY_CONST r 2 jump_statement CONTINUE ;
a BREAK r 2 jump_statement CONTINUE ;
a CASE r 2 jump_statement CONTINUE ;
a CHAR_CONST r 2 jump_statement CONTINUE ;
a CONTINUE r 2 jump_statement CONTINUE ;
a DO r 2 jump_statement CONTINUE ;
a ELSE r 2 jump_statement CONTINUE ;
a GOTO r 2 jump_statement CONTINUE ;
a HEX_CONST r 2 jump_statement CONTINUE ;
a IDENTIFIER r 2 jump_statement CONTINUE ;
a IF r 2 jump_statement CONTINUE ;
a INPUT r 2 jump_statement CONTINUE ;
a NUMBER_CONST r 2 jump_statement CONTINUE ;
a OCTAL_CONST r 2 jump_statement CONTINUE ;
a OUTPUT r 2 jump_statement CONTINUE ;
a RETURN r 2 jump_statement CONTINUE ;
a STRING_CONST r 2 jump_statement CONTINUE ;
a SWITCH r 2 jump_statement CONTINUE ;
a TEST r 2 jump_statement CONTINUE ;
a WHILE r 2 jump_statement CONTINUE ;
a for r 2 jump_statement CONTINUE ;
a function_call r 2 jump_statement CONTINUE ;
a { r 2 jump_statement CONTINUE ;
a } r 2 jump_statement CONTINUE ;
a ~ r 2 jump_statement CONTINUE ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 943
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 943
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 807
a CHAR_CONST s 19
a CONTINUE s 818
a DO s 821
a ELSE s 808
a GOTO s 812
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 809
a INPUT s 820
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 824
a RETURN s 830
a STRING_CONST s 33
a SWITCH s 826
a TEST s 825
a WHILE s 834
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 814
a conditional_expression s 20
a do_while_loop s 816
a else_statement s 810
a equality_expression s 47
a expression s 817
a for s 828
a for_loop s 832
a function_call s 1
a function_decl s 829
a if_statement s 811
a input_statement s 815
a jump_statement s 835
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 822
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 947
a switch_statement s 813
a test_statement s 823
a type s 806
a unary_expression s 36
a unary_operator s 43
a variable_decls s 833
a while_loop s 827
a { s 819
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 814
g conditional_expression 20
g do_while_loop 816
g else_statement 810
g equality_expression 47
g expression 817
g for_loop 832
g function_decl 829
g if_statement 811
g input_statement 815
g jump_statement 835
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 822
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 947
g switch_statement 813
g test_statement 823
g type 806
g unary_expression 36
g unary_operator 43
g variable_decls 833
g while_loop 827
s
a { s 961
s
a { s 962
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 807
a CHAR_CONST s 19
a CONTINUE s 818
a DO s 821
a ELSE s 808
a GOTO s 812
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 809
a INPUT s 820
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 824
a RETURN s 830
a STRING_CONST s 33
a SWITCH s 826
a TEST s 825
a WHILE s 834
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 814
a conditional_expression s 20
a do_while_loop s 816
a else_statement s 810
a equality_expression s 47
a expression s 817
a for s 828
a for_loop s 832
a function_call s 1
a function_decl s 829
a if_statement s 811
a input_statement s 815
a jump_statement s 835
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 822
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 948
a switch_statement s 813
a test_statement s 823
a type s 806
a unary_expression s 36
a unary_operator s 43
a variable_decls s 833
a while_loop s 827
a { s 819
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 814
g conditional_expression 20
g do_while_loop 816
g else_statement 810
g equality_expression 47
g expression 817
g for_loop 832
g function_decl 829
g if_statement 811
g input_statement 815
g jump_statement 835
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 822
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 948
g switch_statement 813
g test_statement 823
g type 806
g unary_expression 36
g unary_operator 43
g variable_decls 833
g while_loop 827
s
a ! r 2 statement expression ;
a & r 2 statement expression ;
a ( r 2 statement expression ;
a * r 2 statement expression ;
a ++ r 2 statement expression ;
a - r 2 statement expression ;
a -- r 2 statement expression ;
a BINARY_CONST r 2 statement expression ;
a BREAK r 2 statement expression ;
a CASE r 2 statement expression ;
a CHAR_CONST r 2 statement expression ;
a CONTINUE r 2 statement expression ;
a DO r 2 statement expression ;
a ELSE r 2 statement expression ;
a GOTO r 2 statement expression ;
a HEX_CONST r 2 statement expression ;
a IDENTIFIER r 2 statement expression ;
a IF r 2 statement expression ;
a INPUT r 2 statement expression ;
a NUMBER_CONST r 2 statement expression ;
a OCTAL_CONST r 2 statement expression ;
a OUTPUT r 2 statement expression ;
a RETURN r 2 statement expression ;
a STRING_CONST r 2 statement expression ;
a SWITCH r 2 statement expression ;
a TEST r 2 statement expression ;
a WHILE r 2 statement expression ;
a for r 2 statement expression ;
a function_call r 2 statement expression ;
a { r 2 statement expression ;
a } r 2 statement expression ;
a ~ r 2 statement expression ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 944
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 944
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! r 2 jump_statement BREAK ;
a & r 2 jump_statement BREAK ;
a ( r 2 jump_statement BREAK ;
a * r 2 jump_statement BREAK ;
a ++ r 2 jump_statement BREAK ;
a - r 2 jump_statement BREAK ;
a -- r 2 jump_statement BREAK ;
a BINARY_CONST r 2 jump_statement BREAK ;
a BREAK r 2 jump_statement BREAK ;
a CASE r 2 jump_statement BREAK ;
a CHAR_CONST r 2 jump_statement BREAK ;
a CONTINUE r 2 jump_statement BREAK ;
a DO r 2 jump_statement BREAK ;
a ELSE r 2 jump_statement BREAK ;
a GOTO r 2 jump_statement BREAK ;
a HEX_CONST r 2 jump_statement BREAK ;
a IDENTIFIER r 2 jump_statement BREAK ;
a IF r 2 jump_statement BREAK ;
a INPUT r 2 jump_statement BREAK ;
a NUMBER_CONST r 2 jump_statement BREAK ;
a OCTAL_CONST r 2 jump_statement BREAK ;
a OUTPUT r 2 jump_statement BREAK ;
a RETURN r 2 jump_statement BREAK ;
a STRING_CONST r 2 jump_statement BREAK ;
a SWITCH r 2 jump_statement BREAK ;
a TEST r 2 jump_statement BREAK ;
a WHILE r 2 jump_statement BREAK ;
a for r 2 jump_statement BREAK ;
a function_call r 2 jump_statement BREAK ;
a { r 2 jump_statement BREAK ;
a } r 2 jump_statement BREAK ;
a ~ r 2 jump_statement BREAK ;
s
a CASE r 4 variable_decls type VAR variable_inits ;
a DEFAULT r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 945
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 945
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ) s 953
a func_args s 952
a single_variable_decl s 690
g func_args 952
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 949
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 949
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 946
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 946
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ) s 966
a , s 363
s
a ) s 967
a , s 363
s
a ) s 968
a , s 363
s
a ) s 969
a , s 363
s
a ) s 970
a , s 363
s
a CASE r 5 if_statement IF ( expression ) statement
a DEFAULT r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
s
a CASE r 5 while_loop WHILE ( expression ) statement
a DEFAULT r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
s
a , s 179
a ; s 971
s
a ; s 975
s
a , s 547
a ; s 972
s
a ) s 973
a , s 766
s
a block_statements s 965
a { s 819
g block_statements 965
s
a ! r 3 jump_statement RETURN expression ;
a & r 3 jump_statement RETURN expression ;
a ( r 3 jump_statement RETURN expression ;
a * r 3 jump_statement RETURN expression ;
a ++ r 3 jump_statement RETURN expression ;
a - r 3 jump_statement RETURN expression ;
a -- r 3 jump_statement RETURN expression ;
a BINARY_CONST r 3 jump_statement RETURN expression ;
a BREAK r 3 jump_statement RETURN expression ;
a CASE r 3 jump_statement RETURN expression ;
a CHAR_CONST r 3 jump_statement RETURN expression ;
a CONTINUE r 3 jump_statement RETURN expression ;
a DO r 3 jump_statement RETURN expression ;
a ELSE r 3 jump_statement RETURN expression ;
a GOTO r 3 jump_statement RETURN expression ;
a HEX_CONST r 3 jump_statement RETURN expression ;
a IDENTIFIER r 3 jump_statement RETURN expression ;
a IF r 3 jump_statement RETURN expression ;
a INPUT r 3 jump_statement RETURN expression ;
a NUMBER_CONST r 3 jump_statement RETURN expression ;
a OCTAL_CONST r 3 jump_statement RETURN expression ;
a OUTPUT r 3 jump_statement RETURN expression ;
a RETURN r 3 jump_statement RETURN expression ;
a STRING_CONST r 3 jump_statement RETURN expression ;
a SWITCH r 3 jump_statement RETURN expression ;
a TEST r 3 jump_statement RETURN expression ;
a WHILE r 3 jump_statement RETURN expression ;
a for r 3 jump_statement RETURN expression ;
a function_call r 3 jump_statement RETURN expression ;
a { r 3 jump_statement RETURN expression ;
a } r 3 jump_statement RETURN expression ;
a ~ r 3 jump_statement RETURN expression ;
s
a ! r 3 output_statement OUTPUT expression ;
a & r 3 output_statement OUTPUT expression ;
a ( r 3 output_statement OUTPUT expression ;
a * r 3 output_statement OUTPUT expression ;
a ++ r 3 output_statement OUTPUT expression ;
a - r 3 output_statement OUTPUT expression ;
a -- r 3 output_statement OUTPUT expression ;
a BINARY_CONST r 3 output_statement OUTPUT expression ;
a BREAK r 3 output_statement OUTPUT expression ;
a CASE r 3 output_statement OUTPUT expression ;
a CHAR_CONST r 3 output_statement OUTPUT expression ;
a CONTINUE r 3 output_statement OUTPUT expression ;
a DO r 3 output_statement OUTPUT expression ;
a ELSE r 3 output_statement OUTPUT expression ;
a GOTO r 3 output_statement OUTPUT expression ;
a HEX_CONST r 3 output_statement OUTPUT expression ;
a IDENTIFIER r 3 output_statement OUTPUT expression ;
a IF r 3 output_statement OUTPUT expression ;
a INPUT r 3 output_statement OUTPUT expression ;
a NUMBER_CONST r 3 output_statement OUTPUT expression ;
a OCTAL_CONST r 3 output_statement OUTPUT expression ;
a OUTPUT r 3 output_statement OUTPUT expression ;
a RETURN r 3 output_statement OUTPUT expression ;
a STRING_CONST r 3 output_statement OUTPUT expression ;
a SWITCH r 3 output_statement OUTPUT expression ;
a TEST r 3 output_statement OUTPUT expression ;
a WHILE r 3 output_statement OUTPUT expression ;
a for r 3 output_statement OUTPUT expression ;
a function_call r 3 output_statement OUTPUT expression ;
a { r 3 output_statement OUTPUT expression ;
a } r 3 output_statement OUTPUT expression ;
a ~ r 3 output_statement OUTPUT expression ;
s
a ! r 3 input_statement INPUT expression ;
a & r 3 input_statement INPUT expression ;
a ( r 3 input_statement INPUT expression ;
a * r 3 input_statement INPUT expression ;
a ++ r 3 input_statement INPUT expression ;
a - r 3 input_statement INPUT expression ;
a -- r 3 input_statement INPUT expression ;
a BINARY_CONST r 3 input_statement INPUT expression ;
a BREAK r 3 input_statement INPUT expression ;
a CASE r 3 input_statement INPUT expression ;
a CHAR_CONST r 3 input_statement INPUT expression ;
a CONTINUE r 3 input_statement INPUT expression ;
a DO r 3 input_statement INPUT expression ;
a ELSE r 3 input_statement INPUT expression ;
a GOTO r 3 input_statement INPUT expression ;
a HEX_CONST r 3 input_statement INPUT expression ;
a IDENTIFIER r 3 input_statement INPUT expression ;
a IF r 3 input_statement INPUT expression ;
a INPUT r 3 input_statement INPUT expression ;
a NUMBER_CONST r 3 input_statement INPUT expression ;
a OCTAL_CONST r 3 input_statement INPUT expression ;
a OUTPUT r 3 input_statement INPUT expression ;
a RETURN r 3 input_statement INPUT expression ;
a STRING_CONST r 3 input_statement INPUT expression ;
a SWITCH r 3 input_statement INPUT expression ;
a TEST r 3 input_statement INPUT expression ;
a WHILE r 3 input_statement INPUT expression ;
a for r 3 input_statement INPUT expression ;
a function_call r 3 input_statement INPUT expression ;
a { r 3 input_statement INPUT expression ;
a } r 3 input_statement INPUT expression ;
a ~ r 3 input_statement INPUT expression ;
s
a ! r 3 jump_statement GOTO IDENTIFIER ;
a & r 3 jump_statement GOTO IDENTIFIER ;
a ( r 3 jump_statement GOTO IDENTIFIER ;
a * r 3 jump_statement GOTO IDENTIFIER ;
a ++ r 3 jump_statement GOTO IDENTIFIER ;
a - r 3 jump_statement GOTO IDENTIFIER ;
a -- r 3 jump_statement GOTO IDENTIFIER ;
a BINARY_CONST r 3 jump_statement GOTO IDENTIFIER ;
a BREAK r 3 jump_statement GOTO IDENTIFIER ;
a CASE r 3 jump_statement GOTO IDENTIFIER ;
a CHAR_CONST r 3 jump_statement GOTO IDENTIFIER ;
a CONTINUE r 3 jump_statement GOTO IDENTIFIER ;
a DO r 3 jump_statement GOTO IDENTIFIER ;
a ELSE r 3 jump_statement GOTO IDENTIFIER ;
a GOTO r 3 jump_statement GOTO IDENTIFIER ;
a HEX_CONST r 3 jump_statement GOTO IDENTIFIER ;
a IDENTIFIER r 3 jump_statement GOTO IDENTIFIER ;
a IF r 3 jump_statement GOTO IDENTIFIER ;
a INPUT r 3 jump_statement GOTO IDENTIFIER ;
a NUMBER_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OCTAL_CONST r 3 jump_statement GOTO IDENTIFIER ;
a OUTPUT r 3 jump_statement GOTO IDENTIFIER ;
a RETURN r 3 jump_statement GOTO IDENTIFIER ;
a STRING_CONST r 3 jump_statement GOTO IDENTIFIER ;
a SWITCH r 3 jump_statement GOTO IDENTIFIER ;
a TEST r 3 jump_statement GOTO IDENTIFIER ;
a WHILE r 3 jump_statement GOTO IDENTIFIER ;
a for r 3 jump_statement GOTO IDENTIFIER ;
a function_call r 3 jump_statement GOTO IDENTIFIER ;
a { r 3 jump_statement GOTO IDENTIFIER ;
a } r 3 jump_statement GOTO IDENTIFIER ;
a ~ r 3 jump_statement GOTO IDENTIFIER ;
s
a ( s 974
s
a ( s 976
s
a ! r 3 block_statements { statements }
a & r 3 block_statements { statements }
a ( r 3 block_statements { statements }
a * r 3 block_statements { statements }
a ++ r 3 block_statements { statements }
a - r 3 block_statements { statements }
a -- r 3 block_statements { statements }
a BINARY_CONST r 3 block_statements { statements }
a BREAK r 3 block_statements { statements }
a CASE r 3 block_statements { statements }
a CHAR_CONST r 3 block_statements { statements }
a CONTINUE r 3 block_statements { statements }
a DO r 3 block_statements { statements }
a ELSE r 3 block_statements { statements }
a GOTO r 3 block_statements { statements }
a HEX_CONST r 3 block_statements { statements }
a IDENTIFIER r 3 block_statements { statements }
a IF r 3 block_statements { statements }
a INPUT r 3 block_statements { statements }
a NUMBER_CONST r 3 block_statements { statements }
a OCTAL_CONST r 3 block_statements { statements }
a OUTPUT r 3 block_statements { statements }
a RETURN r 3 block_statements { statements }
a STRING_CONST r 3 block_statements { statements }
a SWITCH r 3 block_statements { statements }
a TEST r 3 block_statements { statements }
a WHILE r 3 block_statements { statements }
a for r 3 block_statements { statements }
a function_call r 3 block_statements { statements }
a { r 3 block_statements { statements }
a } r 3 block_statements { statements }
a ~ r 3 block_statements { statements }
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 963
a } r 0 test_case_statements 
g test_case_statements 963
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 964
a } r 0 switch_case_statements 
g switch_case_statements 964
s
a CASE s 779
a DEFAULT s 782
a test_case_statement s 780
a } s 982
g test_case_statement 780
s
a CASE s 786
a switch_case_statement s 787
a } s 986
g switch_case_statement 787
s
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DEFAULT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 872
a CHAR_CONST s 19
a CONTINUE s 884
a DO s 887
a ELSE s 873
a GOTO s 877
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 874
a INPUT s 886
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 890
a RETURN s 897
a STRING_CONST s 33
a SWITCH s 892
a TEST s 891
a WHILE s 901
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 879
a conditional_expression s 20
a do_while_loop s 882
a else_statement s 875
a equality_expression s 47
a expression s 883
a for s 894
a for_loop s 899
a function_call s 1
a function_decl s 896
a if_statement s 876
a input_statement s 880
a jump_statement s 902
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 888
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 979
a switch_statement s 878
a test_statement s 889
a type s 871
a unary_expression s 36
a unary_operator s 43
a variable_decls s 900
a while_loop s 893
a { s 885
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 879
g conditional_expression 20
g do_while_loop 882
g else_statement 875
g equality_expression 47
g expression 883
g for_loop 899
g function_decl 896
g if_statement 876
g input_statement 880
g jump_statement 902
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 888
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 979
g switch_statement 878
g test_statement 889
g type 871
g unary_expression 36
g unary_operator 43
g variable_decls 900
g while_loop 893
s
a { s 987
s
a { s 988
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 872
a CHAR_CONST s 19
a CONTINUE s 884
a DO s 887
a ELSE s 873
a GOTO s 877
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 874
a INPUT s 886
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 890
a RETURN s 897
a STRING_CONST s 33
a SWITCH s 892
a TEST s 891
a WHILE s 901
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 879
a conditional_expression s 20
a do_while_loop s 882
a else_statement s 875
a equality_expression s 47
a expression s 883
a for s 894
a for_loop s 899
a function_call s 1
a function_decl s 896
a if_statement s 876
a input_statement s 880
a jump_statement s 902
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 888
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 980
a switch_statement s 878
a test_statement s 889
a type s 871
a unary_expression s 36
a unary_operator s 43
a variable_decls s 900
a while_loop s 893
a { s 885
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 879
g conditional_expression 20
g do_while_loop 882
g else_statement 875
g equality_expression 47
g expression 883
g for_loop 899
g function_decl 896
g if_statement 876
g input_statement 880
g jump_statement 902
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 888
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 980
g switch_statement 878
g test_statement 889
g type 871
g unary_expression 36
g unary_operator 43
g variable_decls 900
g while_loop 893
s
a ; s 989
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 978
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 978
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ! r 4 variable_decls type VAR variable_inits ;
a & r 4 variable_decls type VAR variable_inits ;
a ( r 4 variable_decls type VAR variable_inits ;
a * r 4 variable_decls type VAR variable_inits ;
a ++ r 4 variable_decls type VAR variable_inits ;
a - r 4 variable_decls type VAR variable_inits ;
a -- r 4 variable_decls type VAR variable_inits ;
a BINARY_CONST r 4 variable_decls type VAR variable_inits ;
a BREAK r 4 variable_decls type VAR variable_inits ;
a CASE r 4 variable_decls type VAR variable_inits ;
a CHAR_CONST r 4 variable_decls type VAR variable_inits ;
a CONTINUE r 4 variable_decls type VAR variable_inits ;
a DO r 4 variable_decls type VAR variable_inits ;
a ELSE r 4 variable_decls type VAR variable_inits ;
a GOTO r 4 variable_decls type VAR variable_inits ;
a HEX_CONST r 4 variable_decls type VAR variable_inits ;
a IDENTIFIER r 4 variable_decls type VAR variable_inits ;
a IF r 4 variable_decls type VAR variable_inits ;
a INPUT r 4 variable_decls type VAR variable_inits ;
a NUMBER_CONST r 4 variable_decls type VAR variable_inits ;
a OCTAL_CONST r 4 variable_decls type VAR variable_inits ;
a OUTPUT r 4 variable_decls type VAR variable_inits ;
a RETURN r 4 variable_decls type VAR variable_inits ;
a STRING_CONST r 4 variable_decls type VAR variable_inits ;
a SWITCH r 4 variable_decls type VAR variable_inits ;
a TEST r 4 variable_decls type VAR variable_inits ;
a WHILE r 4 variable_decls type VAR variable_inits ;
a for r 4 variable_decls type VAR variable_inits ;
a function_call r 4 variable_decls type VAR variable_inits ;
a { r 4 variable_decls type VAR variable_inits ;
a } r 4 variable_decls type VAR variable_inits ;
a ~ r 4 variable_decls type VAR variable_inits ;
s
a block_statements s 983
a { s 819
g block_statements 983
s
a ) s 985
a func_args s 984
a single_variable_decl s 690
g func_args 984
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a CHAR_CONST s 19
a HEX_CONST s 62
a IDENTIFIER s 141
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a STRING_CONST s 33
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a conditional_expression s 20
a equality_expression s 47
a expression s 981
a function_call s 1
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a unary_expression s 36
a unary_operator s 43
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g conditional_expression 20
g equality_expression 47
g expression 981
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g unary_expression 36
g unary_operator 43
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 977
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 977
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a ) s 993
a , s 363
s
a ) s 994
a , s 363
s
a ! r 5 if_statement IF ( expression ) statement
a & r 5 if_statement IF ( expression ) statement
a ( r 5 if_statement IF ( expression ) statement
a * r 5 if_statement IF ( expression ) statement
a ++ r 5 if_statement IF ( expression ) statement
a - r 5 if_statement IF ( expression ) statement
a -- r 5 if_statement IF ( expression ) statement
a BINARY_CONST r 5 if_statement IF ( expression ) statement
a BREAK r 5 if_statement IF ( expression ) statement
a CASE r 5 if_statement IF ( expression ) statement
a CHAR_CONST r 5 if_statement IF ( expression ) statement
a CONTINUE r 5 if_statement IF ( expression ) statement
a DO r 5 if_statement IF ( expression ) statement
a ELSE r 5 if_statement IF ( expression ) statement
a GOTO r 5 if_statement IF ( expression ) statement
a HEX_CONST r 5 if_statement IF ( expression ) statement
a IDENTIFIER r 5 if_statement IF ( expression ) statement
a IF r 5 if_statement IF ( expression ) statement
a INPUT r 5 if_statement IF ( expression ) statement
a NUMBER_CONST r 5 if_statement IF ( expression ) statement
a OCTAL_CONST r 5 if_statement IF ( expression ) statement
a OUTPUT r 5 if_statement IF ( expression ) statement
a RETURN r 5 if_statement IF ( expression ) statement
a STRING_CONST r 5 if_statement IF ( expression ) statement
a SWITCH r 5 if_statement IF ( expression ) statement
a TEST r 5 if_statement IF ( expression ) statement
a WHILE r 5 if_statement IF ( expression ) statement
a for r 5 if_statement IF ( expression ) statement
a function_call r 5 if_statement IF ( expression ) statement
a { r 5 if_statement IF ( expression ) statement
a } r 5 if_statement IF ( expression ) statement
a ~ r 5 if_statement IF ( expression ) statement
s
a ! r 5 while_loop WHILE ( expression ) statement
a & r 5 while_loop WHILE ( expression ) statement
a ( r 5 while_loop WHILE ( expression ) statement
a * r 5 while_loop WHILE ( expression ) statement
a ++ r 5 while_loop WHILE ( expression ) statement
a - r 5 while_loop WHILE ( expression ) statement
a -- r 5 while_loop WHILE ( expression ) statement
a BINARY_CONST r 5 while_loop WHILE ( expression ) statement
a BREAK r 5 while_loop WHILE ( expression ) statement
a CASE r 5 while_loop WHILE ( expression ) statement
a CHAR_CONST r 5 while_loop WHILE ( expression ) statement
a CONTINUE r 5 while_loop WHILE ( expression ) statement
a DO r 5 while_loop WHILE ( expression ) statement
a ELSE r 5 while_loop WHILE ( expression ) statement
a GOTO r 5 while_loop WHILE ( expression ) statement
a HEX_CONST r 5 while_loop WHILE ( expression ) statement
a IDENTIFIER r 5 while_loop WHILE ( expression ) statement
a IF r 5 while_loop WHILE ( expression ) statement
a INPUT r 5 while_loop WHILE ( expression ) statement
a NUMBER_CONST r 5 while_loop WHILE ( expression ) statement
a OCTAL_CONST r 5 while_loop WHILE ( expression ) statement
a OUTPUT r 5 while_loop WHILE ( expression ) statement
a RETURN r 5 while_loop WHILE ( expression ) statement
a STRING_CONST r 5 while_loop WHILE ( expression ) statement
a SWITCH r 5 while_loop WHILE ( expression ) statement
a TEST r 5 while_loop WHILE ( expression ) statement
a WHILE r 5 while_loop WHILE ( expression ) statement
a for r 5 while_loop WHILE ( expression ) statement
a function_call r 5 while_loop WHILE ( expression ) statement
a { r 5 while_loop WHILE ( expression ) statement
a } r 5 while_loop WHILE ( expression ) statement
a ~ r 5 while_loop WHILE ( expression ) statement
s
a , s 179
a ; s 995
s
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a DEFAULT r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
s
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DEFAULT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ) s 996
a , s 766
s
a block_statements s 992
a { s 885
g block_statements 992
s
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DEFAULT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a CASE r 0 test_case_statements 
a DEFAULT r 0 test_case_statements 
a test_case_statements s 990
a } r 0 test_case_statements 
g test_case_statements 990
s
a CASE r 0 switch_case_statements 
a switch_case_statements s 991
a } r 0 switch_case_statements 
g switch_case_statements 991
s
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DEFAULT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a CASE s 779
a DEFAULT s 782
a test_case_statement s 780
a } s 999
g test_case_statement 780
s
a CASE s 786
a switch_case_statement s 787
a } s 1001
g switch_case_statement 787
s
a ! r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a & r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ( r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a * r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ++ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a - r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a -- r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BINARY_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a BREAK r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CASE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CHAR_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a CONTINUE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a DO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ELSE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a GOTO r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a HEX_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IDENTIFIER r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a IF r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a INPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a NUMBER_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OCTAL_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a OUTPUT r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a RETURN r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a STRING_CONST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a SWITCH r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a TEST r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a WHILE r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a for r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a function_call r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a { r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a } r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
a ~ r 6 function_decl type FUNC IDENTIFIER ( ) block_statements
s
a ; s 1002
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 807
a CHAR_CONST s 19
a CONTINUE s 818
a DO s 821
a ELSE s 808
a GOTO s 812
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 809
a INPUT s 820
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 824
a RETURN s 830
a STRING_CONST s 33
a SWITCH s 826
a TEST s 825
a WHILE s 834
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 814
a conditional_expression s 20
a do_while_loop s 816
a else_statement s 810
a equality_expression s 47
a expression s 817
a for s 828
a for_loop s 832
a function_call s 1
a function_decl s 829
a if_statement s 811
a input_statement s 815
a jump_statement s 835
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 822
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 998
a switch_statement s 813
a test_statement s 823
a type s 806
a unary_expression s 36
a unary_operator s 43
a variable_decls s 833
a while_loop s 827
a { s 819
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 814
g conditional_expression 20
g do_while_loop 816
g else_statement 810
g equality_expression 47
g expression 817
g for_loop 832
g function_decl 829
g if_statement 811
g input_statement 815
g jump_statement 835
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 822
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 998
g switch_statement 813
g test_statement 823
g type 806
g unary_expression 36
g unary_operator 43
g variable_decls 833
g while_loop 827
s
a ! s 9
a & s 10
a ( s 82
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 88
a CHAR_CONST s 84
a HEX_CONST s 103
a IDENTIFIER s 99
a NUMBER_CONST s 100
a OCTAL_CONST s 92
a STRING_CONST s 90
a additive_expression s 93
a assignment_expression s 101
a binary_and_expression s 104
a binary_or_expression s 83
a binary_xor_expression s 98
a conditional_expression s 85
a equality_expression s 96
a expression s 997
a function_call s 78
a logical_and_expression s 102
a logical_or_expression s 80
a logical_xor_expression s 97
a multiplicative_expression s 94
a postfix_expression s 79
a primary_expression s 81
a relational_expression s 89
a shift_expression s 86
a unary_expression s 91
a unary_operator s 95
a ~ s 32
g additive_expression 93
g assignment_expression 101
g binary_and_expression 104
g binary_or_expression 83
g binary_xor_expression 98
g conditional_expression 85
g equality_expression 96
g expression 997
g logical_and_expression 102
g logical_or_expression 80
g logical_xor_expression 97
g multiplicative_expression 94
g postfix_expression 79
g primary_expression 81
g relational_expression 89
g shift_expression 86
g unary_expression 91
g unary_operator 95
s
a block_statements s 1000
a { s 885
g block_statements 1000
s
a ) s 1003
a , s 363
s
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DEFAULT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s
a ! r 7 test_statement TEST ( expression ) { test_case_statements }
a & r 7 test_statement TEST ( expression ) { test_case_statements }
a ( r 7 test_statement TEST ( expression ) { test_case_statements }
a * r 7 test_statement TEST ( expression ) { test_case_statements }
a ++ r 7 test_statement TEST ( expression ) { test_case_statements }
a - r 7 test_statement TEST ( expression ) { test_case_statements }
a -- r 7 test_statement TEST ( expression ) { test_case_statements }
a BINARY_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a BREAK r 7 test_statement TEST ( expression ) { test_case_statements }
a CASE r 7 test_statement TEST ( expression ) { test_case_statements }
a CHAR_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a CONTINUE r 7 test_statement TEST ( expression ) { test_case_statements }
a DO r 7 test_statement TEST ( expression ) { test_case_statements }
a ELSE r 7 test_statement TEST ( expression ) { test_case_statements }
a GOTO r 7 test_statement TEST ( expression ) { test_case_statements }
a HEX_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a IDENTIFIER r 7 test_statement TEST ( expression ) { test_case_statements }
a IF r 7 test_statement TEST ( expression ) { test_case_statements }
a INPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a NUMBER_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OCTAL_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a OUTPUT r 7 test_statement TEST ( expression ) { test_case_statements }
a RETURN r 7 test_statement TEST ( expression ) { test_case_statements }
a STRING_CONST r 7 test_statement TEST ( expression ) { test_case_statements }
a SWITCH r 7 test_statement TEST ( expression ) { test_case_statements }
a TEST r 7 test_statement TEST ( expression ) { test_case_statements }
a WHILE r 7 test_statement TEST ( expression ) { test_case_statements }
a for r 7 test_statement TEST ( expression ) { test_case_statements }
a function_call r 7 test_statement TEST ( expression ) { test_case_statements }
a { r 7 test_statement TEST ( expression ) { test_case_statements }
a } r 7 test_statement TEST ( expression ) { test_case_statements }
a ~ r 7 test_statement TEST ( expression ) { test_case_statements }
s
a ! r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a & r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ( r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a * r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ++ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a - r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a -- r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BINARY_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a BREAK r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CASE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CHAR_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a CONTINUE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a DO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ELSE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a GOTO r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a HEX_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IDENTIFIER r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a IF r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a INPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a NUMBER_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OCTAL_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a OUTPUT r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a RETURN r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a STRING_CONST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a SWITCH r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a TEST r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a WHILE r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a for r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a function_call r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a { r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a } r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
a ~ r 7 function_decl type FUNC IDENTIFIER ( func_args ) block_statements
s
a ! r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a & r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ( r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a * r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ++ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a - r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a -- r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BINARY_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a BREAK r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CASE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CHAR_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a CONTINUE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a DO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ELSE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a GOTO r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a HEX_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IDENTIFIER r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a IF r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a INPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a NUMBER_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OCTAL_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a OUTPUT r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a RETURN r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a STRING_CONST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a SWITCH r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a TEST r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a WHILE r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a for r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a function_call r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a { r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a } r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
a ~ r 7 switch_statement SWITCH ( expression ) { switch_case_statements }
s
a ! r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a & r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ( r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a * r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ++ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a - r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a -- r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BINARY_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a BREAK r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CASE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CHAR_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a CONTINUE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a DO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ELSE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a GOTO r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a HEX_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IDENTIFIER r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a IF r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a INPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a NUMBER_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OCTAL_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a OUTPUT r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a RETURN r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a STRING_CONST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a SWITCH r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a TEST r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a WHILE r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a for r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a function_call r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a { r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a } r 7 do_while_loop DO block_statements WHILE ( expression ) ;
a ~ r 7 do_while_loop DO block_statements WHILE ( expression ) ;
s
a ! s 9
a & s 10
a ( s 11
a * s 13
a ++ s 25
a - s 14
a -- s 42
a BINARY_CONST s 28
a BREAK s 872
a CHAR_CONST s 19
a CONTINUE s 884
a DO s 887
a ELSE s 873
a GOTO s 877
a HEX_CONST s 62
a IDENTIFIER s 57
a IF s 874
a INPUT s 886
a NUMBER_CONST s 58
a OCTAL_CONST s 39
a OUTPUT s 890
a RETURN s 897
a STRING_CONST s 33
a SWITCH s 892
a TEST s 891
a WHILE s 901
a additive_expression s 40
a assignment_expression s 59
a binary_and_expression s 64
a binary_or_expression s 12
a binary_xor_expression s 52
a block_statements s 879
a conditional_expression s 20
a do_while_loop s 882
a else_statement s 875
a equality_expression s 47
a expression s 883
a for s 894
a for_loop s 899
a function_call s 1
a function_decl s 896
a if_statement s 876
a input_statement s 880
a jump_statement s 902
a logical_and_expression s 61
a logical_or_expression s 4
a logical_xor_expression s 49
a multiplicative_expression s 41
a output_statement s 888
a postfix_expression s 2
a primary_expression s 8
a relational_expression s 31
a shift_expression s 21
a statement s 1004
a switch_statement s 878
a test_statement s 889
a type s 871
a unary_expression s 36
a unary_operator s 43
a variable_decls s 900
a while_loop s 893
a { s 885
a ~ s 32
g additive_expression 40
g assignment_expression 59
g binary_and_expression 64
g binary_or_expression 12
g binary_xor_expression 52
g block_statements 879
g conditional_expression 20
g do_while_loop 882
g else_statement 875
g equality_expression 47
g expression 883
g for_loop 899
g function_decl 896
g if_statement 876
g input_statement 880
g jump_statement 902
g logical_and_expression 61
g logical_or_expression 4
g logical_xor_expression 49
g multiplicative_expression 41
g output_statement 888
g postfix_expression 2
g primary_expression 8
g relational_expression 31
g shift_expression 21
g statement 1004
g switch_statement 878
g test_statement 889
g type 871
g unary_expression 36
g unary_operator 43
g variable_decls 900
g while_loop 893
s
a ! r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a & r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ( r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a * r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ++ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a - r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a -- r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BINARY_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a BREAK r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CASE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CHAR_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a CONTINUE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a DO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ELSE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a GOTO r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a HEX_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IDENTIFIER r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a IF r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a INPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a NUMBER_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OCTAL_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a OUTPUT r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a RETURN r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a STRING_CONST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a SWITCH r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a TEST r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a WHILE r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a for r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a function_call r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a { r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a } r 9 for_loop for ( variable_decls ; expression ; expression ) statement
a ~ r 9 for_loop for ( variable_decls ; expression ; expression ) statement
s