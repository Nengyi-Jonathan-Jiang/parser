statements

statements __EPSILON__
statements := statements statement
statement := partial_statement ;

// Label declaration

label_declaration := label label_name
partial_statement := label_declaration

// Type Definitions

raw_location := reg
raw_location := @ reg

constant := bconst
constant := cconst
constant := iconst
constant := fconst

bool_location := [ b raw_location ]
char_location := [ c raw_location ]
int_location := [ i raw_location ]
float_location := [ f raw_location ]

location := bool_location
location := char_location
location := int_location
location := float_location

bool := bool_location
bool := bconst
char := char_location
char := cconst
int := int_location
int := iconst
// We can use a location as a parameter to jmp
int := label_name
float := float_location
float := fconst
any := bool
any := char
any := int
any := float

// PRINT statement (maps to multiple instructions)

print_statement := print string
partial_statement := print_statement

// MOV and CPY

mov_statement := mov any location
cpy_statement := cpy int int int

partial_statement := mov_statement
partial_statement := cpy_statement

// Arithmetic operations

arithmetic_op := add
arithmetic_op := sub
arithmetic_op := mul
arithmetic_op := div
arithmetic_op := mod

arithmetic_statement := arithmetic_op int int int_location
arithmetic_statement := arithmetic_op int float float_location
arithmetic_statement := arithmetic_op float int float_location
arithmetic_statement := arithmetic_op float float float_location

partial_statement := arithmetic_statement

// Bitwise operations

bitwise_op := or
bitwise_op := xor
bitwise_op := and

bitwise_statement := bitwise_op int int int_location
bitwise_statement := bitwise_op bool bool bool_location

partial_statement := bitwise_statement

// Bit Shift operations

sop := shl
sop := shr

shift_statement := sop int int int_location

partial_statement := shift_statement

// JMP and CMP

condition := ucd
condition := eqz
condition := nez
condition := gtz
condition := ltz
condition := gez
condition := lez

jmp_statement := jmp any int condition
cmp_statement := cmp any bool_location condition

partial_statement := jmp_statement
partial_statement := cmp_statement

// DSP and INP

display_statement := dsp any
input_statement := inp location
partial_statement := display_statement
partial_statement := input_statement

// Memory management instructions

alloc_statement := new int int_location
dealloc_statement := del int

partial_statement := alloc_statement
partial_statement := dealloc_statement



partial_statement := dump