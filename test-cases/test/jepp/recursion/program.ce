%% Skip over function declarations
goto PROGRAM_START

%% ======================== Function Definitions ======================== %

%% Calling convention:
%% [start of stack frame]
%% caller location (1 bytes)
%% return value pointer (1 bytes)
%% arguments (M bytes)
%% local variables (X bytes)
%% [end of stack frame, stack pointer points here]

%% ================= FIB(int) -> int ================ %

%% A good demonstration of recursion is the fibonacci function
%% This time, we need locals to store results of fib calls
%% FIB(a:int) -> (a <= 2 ? 1 : FIB(a - 1) + FIB(a - 2)) : int
%% Wow I hate manually implementing call stack

label FIB 

    %% First we extract the argument

    [i r7] <- [i sp] - 3i        %% r7 <- (sp - 3 === &arg0)
    [i r0] <- [i @r7]            %% r0 <- (@r7 === arg0)

    %% If arg0 <= 2, return 1

    [i r7]  <- [i sp] - 4i       %% r7 <- (sp - 4 === &&rv)
    [i r7]  <- [i @r7]           %% r7 <- (@r7 === &rv)
    [i @r7] <- 1i                %% (@r7 == rv) <- 1
    [i r0]  <- [i r0] - 2i       %% r0 <- (r0 === arg0) - 2
    goto RET if [i r0] <=0       %% if (r0 === arg0 - 2) <= 0 jump to RET

    %% otherwise we should do l0 <- FIB (arg0 - 1), l1 <- FIB (arg0 - 2)
    %% we can store arg0 - 1 and arg0 - 2 in l0 and l1 for now

    %% call FIB

    %% Prepare stack

    %% Set caller loc
    [i r7]  <- [i sp] + 0i       %% r7 <- (sp + 0 === &caller')
    [i @r7] <- FIB_CALL_LOC_1    %% (@r7 === &caller') <- FIB_RET_LOC_1

    %% Set return value pointer
    [i r7]  <- [i sp] + 1i       %% r7 <- (sp + 1 === &&rv')
    [i @r7] <- [i sp] - 2i       %% (@r7 === &rv') <- (sp - 2 === &l0)

    %% Set arg0'
    [i r7]  <- [i sp] - 3i       %% r7 <- (sp - 3 === &arg0)
    [i r0]  <- [i @r7] - 1i      %% r0 <- (@r7 === arg0) - 1
    [i r7]  <- [i sp] + 2i       %% r7 <- (sp + 2 === &arg0')
    [i @r7] <- [i r0]            %% (@r7 === arg0') <- (r0 === arg0 - 1)

    %% Call the function
    [i sp]  <- [i sp] + 5i       %% increment the stack pointer
    goto FIB                     %% jump to the function "FIB"
    label FIB_CALL_LOC_1 
    [i sp]  <- [i sp] - 5i       %% decrement the stack pointer

    %% call FIB

    %% Prepare stack

    %% Set caller loc
    [i r7]  <- [i sp] + 0i       %% r7 <- (sp + 0 === &caller')
    [i @r7] <- FIB_CALL_LOC_2    %% (@r7 === &caller') <- FIB_RET_LOC_2

    %% Set return value pointer
    [i r7]  <- [i sp] + 1i       %% r7 <- (sp + 1 === &&rv')
    [i @r7] <- [i sp] - 1i       %% (@r7 === &rv') <- (sp - 1 === &l1)

    %% Set arg0'
    [i r7]  <- [i sp]  - 3i      %% r7 <- (sp - 3 === &arg0)
    [i r0]  <- [i @r7] - 2i      %% r0 <- (@r7 === arg0) - 2
    [i r7]  <- [i sp]  + 2i      %% r7 <- (sp + 2 === &arg0')
    [i @r7] <- [i r0]            %% (@r7 === arg0') <- (r0 === arg0 - 2)

    %% Call the function
    [i sp]  <- [i sp] + 5i       %% increment the stack pointer
    goto FIB                     %% jump to the function "POW"
    label FIB_CALL_LOC_2 
    [i sp]  <- [i sp] - 5i       %% decrement the stack pointer

    %% Add the two values

    [i r7]  <- [i sp] - 2i       %% r7 <- (sp - 2 === &l0)
    [i r0]  <- [i @r7]           %% r0 <- (@r7 === l0)
    [i r7]  <- [i sp] - 1i       %% r7 <- (sp - 1 === &l1)
    [i r1]  <- [i @r7]           %% r1 <- (@r7 === l1)
    [i r7]  <- [i sp] - 4i       %% r7 <- (sp - 4 === &&rv)
    [i r7]  <- [i @r7]           %% r7 <- (@r7 === &rv)
    [i @r7] <- [i r0] + [i r1]   %% (@r7 === rv) <- (r0 === l0) = (r1 === l1)

    label RET 

    %% pop the stack frame
    [i r0]  <- [i sp] - 5i       %% caller location
    goto [i @r0]                 %% jump to caller

%% end of function

%% ============================= Main Block ============================== %

label PROGRAM_START 

%% Take more input
stdout <- "c <- "
[i r0] <- stdin
stdout <- "\n"

%% Store in memory
[i @sp] <- [i r0] 
[i sp]  <- [i sp] + 1i

%% Make space for return value
[i sp] <- [i sp] + 1i

%% Prepare stack
[i r7]  <- [i sp] + 0i           %% This is where the caller location goes
[i @r7] <- CALL_LOC_2            %% set caller location

[i r7]  <- [i sp] + 1i           %% This is where the rv pointer goes
[i @r7] <- [i sp] - 1i           %% set rv pointer

[i r7]  <- [i sp] + 2i           %% This is where arg0 goes
[i @r7] <- [i r0]                %% Since we haven't touched r0 yet, we can do this directly

%% Call function
[i sp] <- [i sp] + 5i            %% increment the stack pointer
goto FIB                         %% jump to the function "POW"
label CALL_LOC_2 
[i sp] <- [i sp] - 5i            %% decrement the stack pointer

stdout <- "c = "
[i r7] <- [i sp] - 2i
stdout <- [i @r7]
stdout <- "\n"

stdout <- "fib(c) = "
[i r7] <- [i sp] - 1i
stdout <- [i @r7]
stdout <- "\n"